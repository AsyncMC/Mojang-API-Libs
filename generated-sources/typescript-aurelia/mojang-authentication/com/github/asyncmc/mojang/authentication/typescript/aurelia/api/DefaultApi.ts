/**
 * Mojang Authentication API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  RefreshRequest,
  AccessKeys,
  RefreshResponse,
  Authentication,
  AuthenticationRequest,
  UsernamePassword,
} from './models';

/**
 * authenticate - parameters interface
 */
export interface IAuthenticateParams {
  authenticationRequest: AuthenticationRequest;
}

/**
 * invalidate - parameters interface
 */
export interface IInvalidateParams {
  accessKeys: AccessKeys;
}

/**
 * refresh - parameters interface
 */
export interface IRefreshParams {
  refreshRequest: RefreshRequest;
}

/**
 * siginout - parameters interface
 */
export interface ISiginoutParams {
  usernamePassword: UsernamePassword;
}

/**
 * validate - parameters interface
 */
export interface IValidateParams {
  accessKeys: AccessKeys;
}

/**
 * DefaultApi - API class
 */
@autoinject()
export class DefaultApi extends Api {

  /**
   * Creates a new DefaultApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * @param params.authenticationRequest 
   */
  async authenticate(params: IAuthenticateParams): Promise<Authentication> {
    // Verify required parameters are set
    this.ensureParamIsSet('authenticate', params, 'authenticationRequest');

    // Create URL to call
    const url = `${this.basePath}/authenticate`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['authenticationRequest'] || {}))

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * @param params.accessKeys 
   */
  async invalidate(params: IInvalidateParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('invalidate', params, 'accessKeys');

    // Create URL to call
    const url = `${this.basePath}/invalidate`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['accessKeys'] || {}))

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * @param params.refreshRequest 
   */
  async refresh(params: IRefreshParams): Promise<RefreshResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('refresh', params, 'refreshRequest');

    // Create URL to call
    const url = `${this.basePath}/refresh`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['refreshRequest'] || {}))

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * @param params.usernamePassword 
   */
  async siginout(params: ISiginoutParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('siginout', params, 'usernamePassword');

    // Create URL to call
    const url = `${this.basePath}/signout`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['usernamePassword'] || {}))

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * @param params.accessKeys 
   */
  async validate(params: IValidateParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('validate', params, 'accessKeys');

    // Create URL to call
    const url = `${this.basePath}/validate`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['accessKeys'] || {}))

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

