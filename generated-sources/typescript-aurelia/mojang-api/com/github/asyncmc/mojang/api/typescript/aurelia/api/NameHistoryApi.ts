/**
 * Mojang API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  NameChange,
  CurrentPlayerIDs,
} from './models';

/**
 * findUniqueIdsByName - parameters interface
 */
export interface IFindUniqueIdsByNameParams {
  requestBody: Array<string>;
}

/**
 * getNameHistory - parameters interface
 */
export interface IGetNameHistoryParams {
  strippedUuid: string;
}

/**
 * getUniqueIdByName - parameters interface
 */
export interface IGetUniqueIdByNameParams {
  username: string;
  at?: number;
}

/**
 * NameHistoryApi - API class
 */
@autoinject()
export class NameHistoryApi extends Api {

  /**
   * Creates a new NameHistoryApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Find the current UUID of multiple players at once
   * Find the current players name, UUID, demo status and migration flag by the current players name. The \&quot;at\&quot; parameter is not supported. Players not found are not returned. If no players are found, an empty array is returned.
   * @param params.requestBody Array with the player names
   */
  async findUniqueIdsByName(params: IFindUniqueIdsByNameParams): Promise<Array<CurrentPlayerIDs>> {
    // Verify required parameters are set
    this.ensureParamIsSet('findUniqueIdsByName', params, 'requestBody');

    // Create URL to call
    const url = `${this.basePath}/profiles/minecraft`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['requestBody'] || {}))

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Gets the full player&#39;s name history
   * @param params.strippedUuid The player UUID without hyphens
   */
  async getNameHistory(params: IGetNameHistoryParams): Promise<Array<NameChange>> {
    // Verify required parameters are set
    this.ensureParamIsSet('getNameHistory', params, 'strippedUuid');

    // Create URL to call
    const url = `${this.basePath}/user/profiles/{stripped_uuid}/names`
      .replace(`{${'stripped_uuid'}}`, encodeURIComponent(`${params['strippedUuid']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Find the UUID by name
   * Find the current player name, UUID, demo status and migration flag by the current player name or at a given time.
   * @param params.username The username in a given time, or in present if \&quot;at\&quot; is not sent
   * @param params.at Find the username in a given time, when 0 selects the original name however, it only works if the name was changed at least once, or if the account is legacy. The time is an UNIX timestamp (without milliseconds)
   */
  async getUniqueIdByName(params: IGetUniqueIdByNameParams): Promise<CurrentPlayerIDs> {
    // Verify required parameters are set
    this.ensureParamIsSet('getUniqueIdByName', params, 'username');

    // Create URL to call
    const url = `${this.basePath}/users/profiles/minecraft/{username}`
      .replace(`{${'username'}}`, encodeURIComponent(`${params['username']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'at': params['at'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

