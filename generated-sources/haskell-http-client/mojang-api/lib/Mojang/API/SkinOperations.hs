{-
   Mojang API

   No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

   OpenAPI Version: 3.0.1
   Mojang API API version: 2020-06-05
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Mojang.API.SkinOperations
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Mojang.API.SkinOperations where

import Mojang.Core
import Mojang.MimeTypes
import Mojang.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** SkinOperations

-- *** changePlayerSkin

-- | @POST \/user\/profile\/{stripped_uuid}\/skin@
-- 
-- Changes the player skin by URL
-- 
-- This will set the skin for the selected profile, but Mojang's servers will fetch the skin from a URL. This will also work for legacy accounts.
-- 
-- AuthMethod: 'AuthBasicPlayerAccessToken'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
changePlayerSkin 
  :: (Consumes ChangePlayerSkin MimeFormUrlEncoded)
  => Url -- ^ "url" -  The URL which Mojang servers will download and apply the skin
  -> StrippedUuid -- ^ "strippedUuid" -  The player UUID without hyphens
  -> MojangRequest ChangePlayerSkin MimeFormUrlEncoded res MimeJSON
changePlayerSkin (Url url) (StrippedUuid strippedUuid) =
  _mkRequest "POST" ["/user/profile/",toPath strippedUuid,"/skin"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicPlayerAccessToken)
    `addForm` toForm ("url", url)

data ChangePlayerSkin  
instance HasOptionalParam ChangePlayerSkin  where
  applyOptionalParam req ( xs) =
    req `addForm` toForm ("model", xs)

-- | @application/x-www-form-urlencoded@
instance Consumes ChangePlayerSkin MimeFormUrlEncoded

-- | @application/json@
instance Produces ChangePlayerSkin MimeJSON


-- *** resetPlayerSkin

-- | @DELETE \/user\/profile\/{stripped_uuid}\/skin@
-- 
-- Resets the player skin to default
-- 
-- AuthMethod: 'AuthBasicPlayerAccessToken'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
resetPlayerSkin 
  :: StrippedUuid -- ^ "strippedUuid" -  The player UUID without hyphens
  -> MojangRequest ResetPlayerSkin MimeNoContent res MimeJSON
resetPlayerSkin (StrippedUuid strippedUuid) =
  _mkRequest "DELETE" ["/user/profile/",toPath strippedUuid,"/skin"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicPlayerAccessToken)

data ResetPlayerSkin  

-- | @application/json@
instance Produces ResetPlayerSkin MimeJSON


-- *** uploadPlayerSkin

-- | @PUT \/user\/profile\/{stripped_uuid}\/skin@
-- 
-- Changes the player skin by upload
-- 
-- This uploads a skin to Mojang's servers. It also sets the users skin. This works on legacy counts as well.
-- 
-- AuthMethod: 'AuthBasicPlayerAccessToken'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
uploadPlayerSkin 
  :: (Consumes UploadPlayerSkin MimeMultipartFormData)
  => File -- ^ "file" -  The skin image in PNG format
  -> StrippedUuid -- ^ "strippedUuid" -  The player UUID without hyphens
  -> MojangRequest UploadPlayerSkin MimeMultipartFormData res MimeJSON
uploadPlayerSkin (File file) (StrippedUuid strippedUuid) =
  _mkRequest "PUT" ["/user/profile/",toPath strippedUuid,"/skin"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicPlayerAccessToken)
    `_addMultiFormPart` NH.partFileSource "file" file

data UploadPlayerSkin  
instance HasOptionalParam UploadPlayerSkin  where
  applyOptionalParam req ( xs) =
    req `_addMultiFormPart` NH.partLBS "model" (mimeRender' MimeMultipartFormData xs)

-- | @multipart/form-data@
instance Consumes UploadPlayerSkin MimeMultipartFormData

-- | @application/json@
instance Produces UploadPlayerSkin MimeJSON

