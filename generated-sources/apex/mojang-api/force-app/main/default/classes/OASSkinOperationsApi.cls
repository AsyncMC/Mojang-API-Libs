/*
 * Mojang API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OAS-api/OAS-codegen.git
 * Do not edit the class manually.
 */

public class OASSkinOperationsApi {
    OASClient client;

    public OASSkinOperationsApi(OASClient client) {
        this.client = client;
    }

    public OASSkinOperationsApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Changes the player skin by URL
     * This will set the skin for the selected profile, but Mojang\&#39;s servers will fetch the skin from a URL. This will also work for legacy accounts.
     * @param strippedUuid The player UUID without hyphens (required)
     * @param url The URL which Mojang servers will download and apply the skin (required)
     * @param model  (optional)
     * @throws OAS.ApiException if fails to make API call
     */
    public void changePlayerSkin(Map<String, Object> params) {
        client.assertNotNull(params.get('strippedUuid'), 'strippedUuid');
        client.assertNotNull(params.get('url'), 'url');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('model', (OASSkinModel) params.get('model')));
        form.addAll(client.makeParam('url', (String) params.get('url')));

        client.invoke(
            'POST', '/user/profile/{stripped_uuid}/skin', '',
            query, form,
            new Map<String, Object>{
                'stripped_uuid' => (String) params.get('strippedUuid')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'PlayerAccessToken' },
            null
        );
    }
    /**
     * Resets the player skin to default
     * 
     * @param strippedUuid The player UUID without hyphens (required)
     * @throws OAS.ApiException if fails to make API call
     */
    public void resetPlayerSkin(Map<String, Object> params) {
        client.assertNotNull(params.get('strippedUuid'), 'strippedUuid');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        client.invoke(
            'DELETE', '/user/profile/{stripped_uuid}/skin', '',
            query, form,
            new Map<String, Object>{
                'stripped_uuid' => (String) params.get('strippedUuid')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'PlayerAccessToken' },
            null
        );
    }
    /**
     * Changes the player skin by upload
     * This uploads a skin to Mojang\&#39;s servers. It also sets the users skin. This works on legacy counts as well.
     * @param strippedUuid The player UUID without hyphens (required)
     * @param file The skin image in PNG format (required)
     * @param model  (optional)
     * @throws OAS.ApiException if fails to make API call
     */
    public void uploadPlayerSkin(Map<String, Object> params) {
        client.assertNotNull(params.get('strippedUuid'), 'strippedUuid');
        client.assertNotNull(params.get('file'), 'file');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('model', (OASSkinModel) params.get('model')));
        form.addAll(client.makeParam('file', (Blob) params.get('file')));

        client.invoke(
            'PUT', '/user/profile/{stripped_uuid}/skin', '',
            query, form,
            new Map<String, Object>{
                'stripped_uuid' => (String) params.get('strippedUuid')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'multipart/form-data' },
            new List<String> { 'PlayerAccessToken' },
            null
        );
    }
}
