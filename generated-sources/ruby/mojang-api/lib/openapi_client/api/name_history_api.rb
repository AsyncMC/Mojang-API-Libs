=begin
#Mojang API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

OpenAPI spec version: 2020-06-05

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.3.4

=end

require 'uri'

module OpenapiClient
  class NameHistoryApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Find the current UUID of multiple players at once
    # Find the current players name, UUID, demo status and migration flag by the current players name. The \"at\" parameter is not supported. Players not found are not returned. If no players are found, an empty array is returned.
    # @param request_body Array with the player names
    # @param [Hash] opts the optional parameters
    # @return [Array<CurrentPlayerIDs>]
    def find_unique_ids_by_name(request_body, opts = {})
      data, _status_code, _headers = find_unique_ids_by_name_with_http_info(request_body, opts)
      data
    end

    # Find the current UUID of multiple players at once
    # Find the current players name, UUID, demo status and migration flag by the current players name. The \&quot;at\&quot; parameter is not supported. Players not found are not returned. If no players are found, an empty array is returned.
    # @param request_body Array with the player names
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CurrentPlayerIDs>, Fixnum, Hash)>] Array<CurrentPlayerIDs> data, response status code and response headers
    def find_unique_ids_by_name_with_http_info(request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NameHistoryApi.find_unique_ids_by_name ...'
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling NameHistoryApi.find_unique_ids_by_name"
      end
      # resource path
      local_var_path = '/profiles/minecraft'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request_body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<CurrentPlayerIDs>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NameHistoryApi#find_unique_ids_by_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the full player's name history
    # @param stripped_uuid The player UUID without hyphens
    # @param [Hash] opts the optional parameters
    # @return [Array<NameChange>]
    def get_name_history(stripped_uuid, opts = {})
      data, _status_code, _headers = get_name_history_with_http_info(stripped_uuid, opts)
      data
    end

    # Gets the full player&#39;s name history
    # @param stripped_uuid The player UUID without hyphens
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<NameChange>, Fixnum, Hash)>] Array<NameChange> data, response status code and response headers
    def get_name_history_with_http_info(stripped_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NameHistoryApi.get_name_history ...'
      end
      # verify the required parameter 'stripped_uuid' is set
      if @api_client.config.client_side_validation && stripped_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'stripped_uuid' when calling NameHistoryApi.get_name_history"
      end
      # resource path
      local_var_path = '/user/profiles/{stripped_uuid}/names'.sub('{' + 'stripped_uuid' + '}', stripped_uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<NameChange>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NameHistoryApi#get_name_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find the UUID by name
    # Find the current player name, UUID, demo status and migration flag by the current player name or at a given time.
    # @param username The username in a given time, or in present if \&quot;at\&quot; is not sent
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :at Find the username in a given time, when 0 selects the original name however, it only works if the name was changed at least once, or if the account is legacy. The time is an UNIX timestamp (without milliseconds)
    # @return [CurrentPlayerIDs]
    def get_unique_id_by_name(username, opts = {})
      data, _status_code, _headers = get_unique_id_by_name_with_http_info(username, opts)
      data
    end

    # Find the UUID by name
    # Find the current player name, UUID, demo status and migration flag by the current player name or at a given time.
    # @param username The username in a given time, or in present if \&quot;at\&quot; is not sent
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :at Find the username in a given time, when 0 selects the original name however, it only works if the name was changed at least once, or if the account is legacy. The time is an UNIX timestamp (without milliseconds)
    # @return [Array<(CurrentPlayerIDs, Fixnum, Hash)>] CurrentPlayerIDs data, response status code and response headers
    def get_unique_id_by_name_with_http_info(username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NameHistoryApi.get_unique_id_by_name ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling NameHistoryApi.get_unique_id_by_name"
      end
      # resource path
      local_var_path = '/users/profiles/minecraft/{username}'.sub('{' + 'username' + '}', username.to_s)

      # query parameters
      query_params = {}
      query_params[:'at'] = opts[:'at'] if !opts[:'at'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CurrentPlayerIDs')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NameHistoryApi#get_unique_id_by_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end
end
