=begin
#Mojang API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

OpenAPI spec version: 2020-06-05

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.3.4

=end

require 'uri'

module OpenapiClient
  class SkinOperationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Changes the player skin by URL
    # This will set the skin for the selected profile, but Mojang's servers will fetch the skin from a URL. This will also work for legacy accounts.
    # @param stripped_uuid The player UUID without hyphens
    # @param url The URL which Mojang servers will download and apply the skin
    # @param [Hash] opts the optional parameters
    # @option opts [SkinModel] :model 
    # @return [nil]
    def change_player_skin(stripped_uuid, url, opts = {})
      change_player_skin_with_http_info(stripped_uuid, url, opts)
      nil
    end

    # Changes the player skin by URL
    # This will set the skin for the selected profile, but Mojang&#39;s servers will fetch the skin from a URL. This will also work for legacy accounts.
    # @param stripped_uuid The player UUID without hyphens
    # @param url The URL which Mojang servers will download and apply the skin
    # @param [Hash] opts the optional parameters
    # @option opts [SkinModel] :model 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def change_player_skin_with_http_info(stripped_uuid, url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SkinOperationsApi.change_player_skin ...'
      end
      # verify the required parameter 'stripped_uuid' is set
      if @api_client.config.client_side_validation && stripped_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'stripped_uuid' when calling SkinOperationsApi.change_player_skin"
      end
      # verify the required parameter 'url' is set
      if @api_client.config.client_side_validation && url.nil?
        fail ArgumentError, "Missing the required parameter 'url' when calling SkinOperationsApi.change_player_skin"
      end
      # resource path
      local_var_path = '/user/profile/{stripped_uuid}/skin'.sub('{' + 'stripped_uuid' + '}', stripped_uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['url'] = url
      form_params['model'] = opts[:'model'] if !opts[:'model'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['PlayerAccessToken']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SkinOperationsApi#change_player_skin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Resets the player skin to default
    # @param stripped_uuid The player UUID without hyphens
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reset_player_skin(stripped_uuid, opts = {})
      reset_player_skin_with_http_info(stripped_uuid, opts)
      nil
    end

    # Resets the player skin to default
    # @param stripped_uuid The player UUID without hyphens
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reset_player_skin_with_http_info(stripped_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SkinOperationsApi.reset_player_skin ...'
      end
      # verify the required parameter 'stripped_uuid' is set
      if @api_client.config.client_side_validation && stripped_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'stripped_uuid' when calling SkinOperationsApi.reset_player_skin"
      end
      # resource path
      local_var_path = '/user/profile/{stripped_uuid}/skin'.sub('{' + 'stripped_uuid' + '}', stripped_uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['PlayerAccessToken']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SkinOperationsApi#reset_player_skin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Changes the player skin by upload
    # This uploads a skin to Mojang's servers. It also sets the users skin. This works on legacy counts as well.
    # @param stripped_uuid The player UUID without hyphens
    # @param file The skin image in PNG format
    # @param [Hash] opts the optional parameters
    # @option opts [SkinModel] :model 
    # @return [nil]
    def upload_player_skin(stripped_uuid, file, opts = {})
      upload_player_skin_with_http_info(stripped_uuid, file, opts)
      nil
    end

    # Changes the player skin by upload
    # This uploads a skin to Mojang&#39;s servers. It also sets the users skin. This works on legacy counts as well.
    # @param stripped_uuid The player UUID without hyphens
    # @param file The skin image in PNG format
    # @param [Hash] opts the optional parameters
    # @option opts [SkinModel] :model 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def upload_player_skin_with_http_info(stripped_uuid, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SkinOperationsApi.upload_player_skin ...'
      end
      # verify the required parameter 'stripped_uuid' is set
      if @api_client.config.client_side_validation && stripped_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'stripped_uuid' when calling SkinOperationsApi.upload_player_skin"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling SkinOperationsApi.upload_player_skin"
      end
      # resource path
      local_var_path = '/user/profile/{stripped_uuid}/skin'.sub('{' + 'stripped_uuid' + '}', stripped_uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file
      form_params['model'] = opts[:'model'] if !opts[:'model'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['PlayerAccessToken']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SkinOperationsApi#upload_player_skin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end
end
