openapi: 3.0.1
info:
  title: Mojang Authentication API
  version: 2020-06-05.0.0
servers:
- url: https://authserver.mojang.com
paths:
  /authenticate:
    post:
      operationId: authenticate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication'
          description: Successfully authenticated
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Could not authenticate
  /refresh:
    post:
      operationId: refresh
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshResponse'
          description: 'Session refreshed successfully. Note: The old access token
            gets invalidated.'
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Could not refresh the session
  /validate:
    post:
      operationId: validate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessKeys'
        required: true
      responses:
        204:
          description: The token is valid
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The token is not valid
  /signout:
    post:
      operationId: siginout
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsernamePassword'
        required: true
      responses:
        204:
          description: All tokens have been invalidated
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid username/password
  /invalidate:
    post:
      operationId: invalidate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessKeys'
        required: true
      responses:
        204:
          description: The token have been invalidated
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Could not invalidate the token
components:
  schemas:
    AccessKeys:
      properties:
        accessToken:
          format: Mojang Token
          type: string
        clientToken:
          type: string
      required:
      - accessToken
      type: object
    UsernamePassword:
      properties:
        username:
          description: The Mojang account e-mail or username. Never store it.
          format: username
          type: string
        password:
          description: The Mojang account password, never store it.
          format: password
          type: string
      required:
      - password
      - username
      type: object
    RefreshRequest:
      allOf:
      - $ref: '#/components/schemas/AccessKeys'
      properties:
        requestUser:
          default: false
          type: boolean
      type: object
    RefreshResponse:
      allOf:
      - $ref: '#/components/schemas/RefreshRequest'
      example:
        selectedProfile:
          name: name
          id: id
        user:
          id: id
          properties:
          - name: name
            value: value
          - name: name
            value: value
      properties:
        selectedProfile:
          $ref: '#/components/schemas/ProfileId'
        user:
          $ref: '#/components/schemas/ReducedUserData'
      required:
      - selectedProfile
      type: object
    ProfileId:
      example:
        name: name
        id: id
      properties:
        id:
          type: string
        name:
          description: The player name
          type: string
      required:
      - id
      - name
      type: object
    AuthenticationRequest:
      allOf:
      - $ref: '#/components/schemas/UsernamePassword'
      description: Request body needed to authenticate the player using the username/e-mail and password. Use with care. This is a risky operation.
      properties:
        agent:
          $ref: '#/components/schemas/Agent'
        clientToken:
          description: Should be a randomly generated identifier and must be identical for each request. The vanilla launcher generates a random (version 4) UUID on first run and saves it, reusing it for every subsequent request. In case it is omitted the server will generate a random token based on Java's UUID.toString() which should then be stored by the client. This will however also invalidate all previously acquired accessTokens for this user across all clients.
          type: string
        requestUser:
          default: false
          description: True adds the user object to the response
          type: boolean
      required:
      - agent
      type: object
    Agent:
      description: Identifies the software doing the request
      properties:
        name:
          default: Minecraft
          description: The name of the game
          enum:
          - Minecraft
          - Scrolls
          type: string
        version:
          default: 1
          description: The agent version, usually 1.
          format: int32
          type: integer
      type: object
    Authentication:
      allOf:
      - $ref: '#/components/schemas/AccessKeys'
      example:
        availableProfiles:
        - createdAt: 0
          legacyProfile: true
          agent: agent
          legacy: true
          name: name
          paid: true
          id: id
          migrated: true
          userId: userId
          suspended: true
        - createdAt: 0
          legacyProfile: true
          agent: agent
          legacy: true
          name: name
          paid: true
          id: id
          migrated: true
          userId: userId
          suspended: true
        selectedProfile:
          createdAt: 0
          legacyProfile: true
          agent: agent
          legacy: true
          name: name
          paid: true
          id: id
          migrated: true
          userId: userId
          suspended: true
        user:
          registerIp: registerIp
          verifiedByParent: true
          migratedAt: 6
          passwordChangedAt: 5
          legacyUser: true
          registeredAt: 1
          dateOfBirth: 5
          suspended: true
          emailVerified: true
          migratedFrom: migratedFrom
          blocked: true
          migrated: true
          secured: true
          email: email
          username: username
      properties:
        availableProfiles:
          items:
            $ref: '#/components/schemas/GameProfile'
          type: array
        selectedProfile:
          $ref: '#/components/schemas/GameProfile'
        user:
          $ref: '#/components/schemas/PrivateUserData'
      type: object
    ReducedUserData:
      example:
        id: id
        properties:
        - name: name
          value: value
        - name: name
          value: value
      properties:
        id:
          type: string
        properties:
          items:
            $ref: '#/components/schemas/GameProfileProperty'
          type: array
      type: object
    PrivateUserData:
      allOf:
      - $ref: '#/components/schemas/ReducedUserData'
      example:
        registerIp: registerIp
        verifiedByParent: true
        migratedAt: 6
        passwordChangedAt: 5
        legacyUser: true
        registeredAt: 1
        dateOfBirth: 5
        suspended: true
        emailVerified: true
        migratedFrom: migratedFrom
        blocked: true
        migrated: true
        secured: true
        email: email
        username: username
      properties:
        email:
          format: email
          type: string
        username:
          type: string
        registerIp:
          format: ip
          type: string
        migratedFrom:
          type: string
        migratedAt:
          format: int64
          type: integer
        registeredAt:
          format: int64
          type: integer
        passwordChangedAt:
          format: int64
          type: integer
        dateOfBirth:
          format: int64
          type: integer
        suspended:
          type: boolean
        blocked:
          type: boolean
        secured:
          type: boolean
        migrated:
          deprecated: true
          type: boolean
        emailVerified:
          type: boolean
        legacyUser:
          type: boolean
        verifiedByParent:
          type: boolean
      type: object
    GameProfileProperty:
      example:
        name: name
        value: value
      properties:
        name:
          type: string
        value:
          type: string
      type: object
    GameProfile:
      example:
        createdAt: 0
        legacyProfile: true
        agent: agent
        legacy: true
        name: name
        paid: true
        id: id
        migrated: true
        userId: userId
        suspended: true
      properties:
        agent:
          type: string
        id:
          type: string
        name:
          type: string
        userId:
          type: string
        createdAt:
          description: Unix timestamp in milliseconds
          format: int64
          type: integer
        legacyProfile:
          type: boolean
        suspended:
          type: boolean
        paid:
          type: boolean
        migrated:
          type: boolean
        legacy:
          type: boolean
      type: object
    Error:
      description: This is returned when the request fails
      properties:
        error:
          example: IllegalArgumentException
          type: string
        errorMessage:
          example: Invalid timestamp.
          type: string
      type: object

