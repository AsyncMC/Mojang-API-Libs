#![allow(unused_extern_crates)]
extern crate serde_ignored;
extern crate tokio_core;
extern crate native_tls;
extern crate hyper_tls;
extern crate openssl;
extern crate mime;
extern crate uuid;
extern crate chrono;
extern crate percent_encoding;
extern crate url;


use std::sync::Arc;
use std::marker::PhantomData;
use futures::{Future, future, Stream, stream};
use hyper;
use hyper::{Request, Response, Error, StatusCode};
use hyper::header::{Headers, ContentType};
use self::url::form_urlencoded;
use mimetypes;

use serde_json;


#[allow(unused_imports)]
use std::collections::{HashMap, BTreeMap};
#[allow(unused_imports)]
use swagger;
use std::io;

#[allow(unused_imports)]
use std::collections::BTreeSet;

pub use swagger::auth::Authorization;
use swagger::{ApiError, XSpanId, XSpanIdString, Has, RequestParser};
use swagger::auth::Scopes;

use {Api,
     GetOrdersStatisticsResponse,
     FindUniqueIdsByNameResponse,
     GetNameHistoryResponse,
     GetUniqueIdByNameResponse,
     CheckSecurityStatusResponse,
     ListPendingSecurityQuestionsResponse,
     SendSecurityQuestionAnswersResponse,
     ChangePlayerSkinResponse,
     ResetPlayerSkinResponse,
     UploadPlayerSkinResponse
     };
#[allow(unused_imports)]
use models;

pub mod context;

header! { (Warning, "Warning") => [String] }

mod paths {
    extern crate regex;

    lazy_static! {
        pub static ref GLOBAL_REGEX_SET: regex::RegexSet = regex::RegexSet::new(&[
            r"^/orders/statistics$",
            r"^/profiles/minecraft$",
            r"^/user/profile/(?P<stripped_uuid>[^/?#]*)/skin$",
            r"^/user/profiles/(?P<stripped_uuid>[^/?#]*)/names$",
            r"^/user/security/challenges$",
            r"^/user/security/location$",
            r"^/users/profiles/minecraft/(?P<username>[^/?#]*)$"
        ]).unwrap();
    }
    pub static ID_ORDERS_STATISTICS: usize = 0;
    pub static ID_PROFILES_MINECRAFT: usize = 1;
    pub static ID_USER_PROFILE_STRIPPED_UUID_SKIN: usize = 2;
    lazy_static! {
        pub static ref REGEX_USER_PROFILE_STRIPPED_UUID_SKIN: regex::Regex = regex::Regex::new(r"^/user/profile/(?P<stripped_uuid>[^/?#]*)/skin$").unwrap();
    }
    pub static ID_USER_PROFILES_STRIPPED_UUID_NAMES: usize = 3;
    lazy_static! {
        pub static ref REGEX_USER_PROFILES_STRIPPED_UUID_NAMES: regex::Regex = regex::Regex::new(r"^/user/profiles/(?P<stripped_uuid>[^/?#]*)/names$").unwrap();
    }
    pub static ID_USER_SECURITY_CHALLENGES: usize = 4;
    pub static ID_USER_SECURITY_LOCATION: usize = 5;
    pub static ID_USERS_PROFILES_MINECRAFT_USERNAME: usize = 6;
    lazy_static! {
        pub static ref REGEX_USERS_PROFILES_MINECRAFT_USERNAME: regex::Regex = regex::Regex::new(r"^/users/profiles/minecraft/(?P<username>[^/?#]*)$").unwrap();
    }
}

pub struct NewService<T, C> {
    api_impl: Arc<T>,
    marker: PhantomData<C>,
}

impl<T, C> NewService<T, C>
where
    T: Api<C> + Clone + 'static,
    C: Has<XSpanIdString> + Has<Option<Authorization>> + 'static
{
    pub fn new<U: Into<Arc<T>>>(api_impl: U) -> NewService<T, C> {
        NewService{api_impl: api_impl.into(), marker: PhantomData}
    }
}

impl<T, C> hyper::server::NewService for NewService<T, C>
where
    T: Api<C> + Clone + 'static,
    C: Has<XSpanIdString> + Has<Option<Authorization>> + 'static
{
    type Request = (Request, C);
    type Response = Response;
    type Error = Error;
    type Instance = Service<T, C>;

    fn new_service(&self) -> Result<Self::Instance, io::Error> {
        Ok(Service::new(self.api_impl.clone()))
    }
}

pub struct Service<T, C> {
    api_impl: Arc<T>,
    marker: PhantomData<C>,
}

impl<T, C> Service<T, C>
where
    T: Api<C> + Clone + 'static,
    C: Has<XSpanIdString> + Has<Option<Authorization>> + 'static {
    pub fn new<U: Into<Arc<T>>>(api_impl: U) -> Service<T, C> {
        Service{api_impl: api_impl.into(), marker: PhantomData}
    }
}

impl<T, C> hyper::server::Service for Service<T, C>
where
    T: Api<C> + Clone + 'static,
    C: Has<XSpanIdString> + Has<Option<Authorization>> + 'static
{
    type Request = (Request, C);
    type Response = Response;
    type Error = Error;
    type Future = Box<Future<Item=Response, Error=Error>>;

    fn call(&self, (req, mut context): Self::Request) -> Self::Future {
        let api_impl = self.api_impl.clone();
        let (method, uri, _, headers, body) = req.deconstruct();
        let path = paths::GLOBAL_REGEX_SET.matches(uri.path());

        // This match statement is duplicated below in `parse_operation_id()`.
        // Please update both places if changing how this code is autogenerated.
        match &method {

            // GetOrdersStatistics - POST /orders/statistics
            &hyper::Method::Post if path.matched(paths::ID_ORDERS_STATISTICS) => {
                {
                    let authorization = match (&context as &Has<Option<Authorization>>).get() {
                        &Some(ref authorization) => authorization,
                        &None => return Box::new(future::ok(Response::new()
                                                .with_status(StatusCode::Forbidden)
                                                .with_body("Unauthenticated"))),
                    };

                }






                // Body parameters (note that non-required body parameters will ignore garbage
                // values, rather than causing a 400 response). Produce warning header and logs for
                // any unused fields.
                Box::new(body.concat2()
                    .then(move |result| -> Box<Future<Item=Response, Error=Error>> {
                        match result {
                            Ok(body) => {

                                let mut unused_elements = Vec::new();
                                let param_order_statistics_request: Option<models::OrderStatisticsRequest> = if !body.is_empty() {

                                    let deserializer = &mut serde_json::Deserializer::from_slice(&*body);

                                    match serde_ignored::deserialize(deserializer, |path| {
                                            warn!("Ignoring unknown field in body: {}", path);
                                            unused_elements.push(path.to_string());
                                    }) {
                                        Ok(param_order_statistics_request) => param_order_statistics_request,
                                        Err(e) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't parse body parameter OrderStatisticsRequest - doesn't match schema: {}", e)))),
                                    }

                                } else {
                                    None
                                };
                                let param_order_statistics_request = match param_order_statistics_request {
                                    Some(param_order_statistics_request) => param_order_statistics_request,
                                    None => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body("Missing required body parameter OrderStatisticsRequest"))),
                                };


                                Box::new(api_impl.get_orders_statistics(param_order_statistics_request, &context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &Has<XSpanIdString>).get().0.to_string()));

                                        if !unused_elements.is_empty() {
                                            response.headers_mut().set(Warning(format!("Ignoring unknown fields in body: {:?}", unused_elements)));
                                        }

                                        match result {
                                            Ok(rsp) => match rsp {
                                                GetOrdersStatisticsResponse::AJsonObjectIsReturnedWithTheTotalAmountOfCopiesSold

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(200).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::GET_ORDERS_STATISTICS_A_JSON_OBJECT_IS_RETURNED_WITH_THE_TOTAL_AMOUNT_OF_COPIES_SOLD.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))


                            },
                            Err(e) => Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't read body parameter OrderStatisticsRequest: {}", e)))),
                        }
                    })
                ) as Box<Future<Item=Response, Error=Error>>

            },


            // FindUniqueIdsByName - POST /profiles/minecraft
            &hyper::Method::Post if path.matched(paths::ID_PROFILES_MINECRAFT) => {






                // Body parameters (note that non-required body parameters will ignore garbage
                // values, rather than causing a 400 response). Produce warning header and logs for
                // any unused fields.
                Box::new(body.concat2()
                    .then(move |result| -> Box<Future<Item=Response, Error=Error>> {
                        match result {
                            Ok(body) => {

                                let mut unused_elements = Vec::new();
                                let param_string: Option<Vec<String>> = if !body.is_empty() {

                                    let deserializer = &mut serde_json::Deserializer::from_slice(&*body);

                                    match serde_ignored::deserialize(deserializer, |path| {
                                            warn!("Ignoring unknown field in body: {}", path);
                                            unused_elements.push(path.to_string());
                                    }) {
                                        Ok(param_string) => param_string,
                                        Err(e) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't parse body parameter string - doesn't match schema: {}", e)))),
                                    }

                                } else {
                                    None
                                };
                                let param_string = match param_string {
                                    Some(param_string) => param_string,
                                    None => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body("Missing required body parameter string"))),
                                };


                                Box::new(api_impl.find_unique_ids_by_name(param_string.as_ref(), &context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &Has<XSpanIdString>).get().0.to_string()));

                                        if !unused_elements.is_empty() {
                                            response.headers_mut().set(Warning(format!("Ignoring unknown fields in body: {:?}", unused_elements)));
                                        }

                                        match result {
                                            Ok(rsp) => match rsp {
                                                FindUniqueIdsByNameResponse::AnArrayContainingAllPlayersFound

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(200).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::FIND_UNIQUE_IDS_BY_NAME_AN_ARRAY_CONTAINING_ALL_PLAYERS_FOUND.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))


                            },
                            Err(e) => Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't read body parameter string: {}", e)))),
                        }
                    })
                ) as Box<Future<Item=Response, Error=Error>>

            },


            // GetNameHistory - GET /user/profiles/{stripped_uuid}/names
            &hyper::Method::Get if path.matched(paths::ID_USER_PROFILES_STRIPPED_UUID_NAMES) => {


                // Path parameters
                let path = uri.path().to_string();
                let path_params =
                    paths::REGEX_USER_PROFILES_STRIPPED_UUID_NAMES
                    .captures(&path)
                    .unwrap_or_else(||
                        panic!("Path {} matched RE USER_PROFILES_STRIPPED_UUID_NAMES in set but failed match against \"{}\"", path, paths::REGEX_USER_PROFILES_STRIPPED_UUID_NAMES.as_str())
                    );

                let param_stripped_uuid = match percent_encoding::percent_decode(path_params["stripped_uuid"].as_bytes()).decode_utf8() {
                    Ok(param_stripped_uuid) => match param_stripped_uuid.parse::<String>() {
                        Ok(param_stripped_uuid) => param_stripped_uuid,
                        Err(e) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't parse path parameter stripped_uuid: {}", e)))),
                    },
                    Err(_) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't percent-decode path parameter as UTF-8: {}", &path_params["stripped_uuid"]))))
                };





                Box::new({
                        {{

                                Box::new(api_impl.get_name_history(param_stripped_uuid, &context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &Has<XSpanIdString>).get().0.to_string()));

                                        match result {
                                            Ok(rsp) => match rsp {
                                                GetNameHistoryResponse::AListOfNameChanges

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(200).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::GET_NAME_HISTORY_A_LIST_OF_NAME_CHANGES.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                                GetNameHistoryResponse::UsernameNotFoundAtTheGivenTime


                                                => {
                                                    response.set_status(StatusCode::try_from(204).unwrap());

                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))

                        }}
                }) as Box<Future<Item=Response, Error=Error>>


            },


            // GetUniqueIdByName - GET /users/profiles/minecraft/{username}
            &hyper::Method::Get if path.matched(paths::ID_USERS_PROFILES_MINECRAFT_USERNAME) => {


                // Path parameters
                let path = uri.path().to_string();
                let path_params =
                    paths::REGEX_USERS_PROFILES_MINECRAFT_USERNAME
                    .captures(&path)
                    .unwrap_or_else(||
                        panic!("Path {} matched RE USERS_PROFILES_MINECRAFT_USERNAME in set but failed match against \"{}\"", path, paths::REGEX_USERS_PROFILES_MINECRAFT_USERNAME.as_str())
                    );

                let param_username = match percent_encoding::percent_decode(path_params["username"].as_bytes()).decode_utf8() {
                    Ok(param_username) => match param_username.parse::<String>() {
                        Ok(param_username) => param_username,
                        Err(e) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't parse path parameter username: {}", e)))),
                    },
                    Err(_) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't percent-decode path parameter as UTF-8: {}", &path_params["username"]))))
                };



                // Query parameters (note that non-required or collection query parameters will ignore garbage values, rather than causing a 400 response)
                let query_params = form_urlencoded::parse(uri.query().unwrap_or_default().as_bytes()).collect::<Vec<_>>();
                let param_at = query_params.iter().filter(|e| e.0 == "at").map(|e| e.1.to_owned())

                    .nth(0);

                let param_at = param_at.and_then(|param_at| param_at.parse::<>().ok());



                Box::new({
                        {{

                                Box::new(api_impl.get_unique_id_by_name(param_username, param_at, &context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &Has<XSpanIdString>).get().0.to_string()));

                                        match result {
                                            Ok(rsp) => match rsp {
                                                GetUniqueIdByNameResponse::TheUserWasFound

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(200).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::GET_UNIQUE_ID_BY_NAME_THE_USER_WAS_FOUND.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                                GetUniqueIdByNameResponse::UserNotFound


                                                => {
                                                    response.set_status(StatusCode::try_from(204).unwrap());

                                                },
                                                GetUniqueIdByNameResponse::IfTheTimestampIsInvalid

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(400).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::GET_UNIQUE_ID_BY_NAME_IF_THE_TIMESTAMP_IS_INVALID.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))

                        }}
                }) as Box<Future<Item=Response, Error=Error>>


            },


            // CheckSecurityStatus - GET /user/security/location
            &hyper::Method::Get if path.matched(paths::ID_USER_SECURITY_LOCATION) => {
                {
                    let authorization = match (&context as &Has<Option<Authorization>>).get() {
                        &Some(ref authorization) => authorization,
                        &None => return Box::new(future::ok(Response::new()
                                                .with_status(StatusCode::Forbidden)
                                                .with_body("Unauthenticated"))),
                    };

                }







                Box::new({
                        {{

                                Box::new(api_impl.check_security_status(&context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &Has<XSpanIdString>).get().0.to_string()));

                                        match result {
                                            Ok(rsp) => match rsp {
                                                CheckSecurityStatusResponse::NoCheckIsNeeded


                                                => {
                                                    response.set_status(StatusCode::try_from(204).unwrap());

                                                },
                                                CheckSecurityStatusResponse::ASecurityCheckIsNeededOrThereIsAnOtherIssue

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(400).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::CHECK_SECURITY_STATUS_A_SECURITY_CHECK_IS_NEEDED_OR_THERE_IS_AN_OTHER_ISSUE.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))

                        }}
                }) as Box<Future<Item=Response, Error=Error>>


            },


            // ListPendingSecurityQuestions - GET /user/security/challenges
            &hyper::Method::Get if path.matched(paths::ID_USER_SECURITY_CHALLENGES) => {
                {
                    let authorization = match (&context as &Has<Option<Authorization>>).get() {
                        &Some(ref authorization) => authorization,
                        &None => return Box::new(future::ok(Response::new()
                                                .with_status(StatusCode::Forbidden)
                                                .with_body("Unauthenticated"))),
                    };

                }







                Box::new({
                        {{

                                Box::new(api_impl.list_pending_security_questions(&context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &Has<XSpanIdString>).get().0.to_string()));

                                        match result {
                                            Ok(rsp) => match rsp {
                                                ListPendingSecurityQuestionsResponse::AListOfSecurityQuestionsToBeAnswered

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(200).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::LIST_PENDING_SECURITY_QUESTIONS_A_LIST_OF_SECURITY_QUESTIONS_TO_BE_ANSWERED.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))

                        }}
                }) as Box<Future<Item=Response, Error=Error>>


            },


            // SendSecurityQuestionAnswers - POST /user/security/location
            &hyper::Method::Post if path.matched(paths::ID_USER_SECURITY_LOCATION) => {
                {
                    let authorization = match (&context as &Has<Option<Authorization>>).get() {
                        &Some(ref authorization) => authorization,
                        &None => return Box::new(future::ok(Response::new()
                                                .with_status(StatusCode::Forbidden)
                                                .with_body("Unauthenticated"))),
                    };

                }






                // Body parameters (note that non-required body parameters will ignore garbage
                // values, rather than causing a 400 response). Produce warning header and logs for
                // any unused fields.
                Box::new(body.concat2()
                    .then(move |result| -> Box<Future<Item=Response, Error=Error>> {
                        match result {
                            Ok(body) => {

                                let mut unused_elements = Vec::new();
                                let param_security_answer: Option<Vec<models::SecurityAnswer>> = if !body.is_empty() {

                                    let deserializer = &mut serde_json::Deserializer::from_slice(&*body);

                                    match serde_ignored::deserialize(deserializer, |path| {
                                            warn!("Ignoring unknown field in body: {}", path);
                                            unused_elements.push(path.to_string());
                                    }) {
                                        Ok(param_security_answer) => param_security_answer,
                                        Err(e) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't parse body parameter SecurityAnswer - doesn't match schema: {}", e)))),
                                    }

                                } else {
                                    None
                                };
                                let param_security_answer = match param_security_answer {
                                    Some(param_security_answer) => param_security_answer,
                                    None => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body("Missing required body parameter SecurityAnswer"))),
                                };


                                Box::new(api_impl.send_security_question_answers(param_security_answer.as_ref(), &context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &Has<XSpanIdString>).get().0.to_string()));

                                        if !unused_elements.is_empty() {
                                            response.headers_mut().set(Warning(format!("Ignoring unknown fields in body: {:?}", unused_elements)));
                                        }

                                        match result {
                                            Ok(rsp) => match rsp {
                                                SendSecurityQuestionAnswersResponse::TheAnswersWereAccepted


                                                => {
                                                    response.set_status(StatusCode::try_from(204).unwrap());

                                                },
                                                SendSecurityQuestionAnswersResponse::AtLeastOneAnswerWeNotAccepted

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(400).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::SEND_SECURITY_QUESTION_ANSWERS_AT_LEAST_ONE_ANSWER_WE_NOT_ACCEPTED.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))


                            },
                            Err(e) => Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't read body parameter SecurityAnswer: {}", e)))),
                        }
                    })
                ) as Box<Future<Item=Response, Error=Error>>

            },


            // ChangePlayerSkin - POST /user/profile/{stripped_uuid}/skin
            &hyper::Method::Post if path.matched(paths::ID_USER_PROFILE_STRIPPED_UUID_SKIN) => {
                {
                    let authorization = match (&context as &Has<Option<Authorization>>).get() {
                        &Some(ref authorization) => authorization,
                        &None => return Box::new(future::ok(Response::new()
                                                .with_status(StatusCode::Forbidden)
                                                .with_body("Unauthenticated"))),
                    };

                }


                // Path parameters
                let path = uri.path().to_string();
                let path_params =
                    paths::REGEX_USER_PROFILE_STRIPPED_UUID_SKIN
                    .captures(&path)
                    .unwrap_or_else(||
                        panic!("Path {} matched RE USER_PROFILE_STRIPPED_UUID_SKIN in set but failed match against \"{}\"", path, paths::REGEX_USER_PROFILE_STRIPPED_UUID_SKIN.as_str())
                    );

                let param_stripped_uuid = match percent_encoding::percent_decode(path_params["stripped_uuid"].as_bytes()).decode_utf8() {
                    Ok(param_stripped_uuid) => match param_stripped_uuid.parse::<String>() {
                        Ok(param_stripped_uuid) => param_stripped_uuid,
                        Err(e) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't parse path parameter stripped_uuid: {}", e)))),
                    },
                    Err(_) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't percent-decode path parameter as UTF-8: {}", &path_params["stripped_uuid"]))))
                };





                Box::new({
                        {{

                                // Form parameters
                                let param_model = None;
                                let param_url = "url_example".to_string();

                                Box::new(api_impl.change_player_skin(param_stripped_uuid, param_url, param_model, &context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &Has<XSpanIdString>).get().0.to_string()));

                                        match result {
                                            Ok(rsp) => match rsp {
                                                ChangePlayerSkinResponse::TheSkinHasBeenChanged


                                                => {
                                                    response.set_status(StatusCode::try_from(204).unwrap());

                                                },
                                                ChangePlayerSkinResponse::UponErrorTheServerWillSendBackAJSONWithTheError

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(400).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::CHANGE_PLAYER_SKIN_UPON_ERROR_THE_SERVER_WILL_SEND_BACK_AJSON_WITH_THE_ERROR.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))

                        }}
                }) as Box<Future<Item=Response, Error=Error>>


            },


            // ResetPlayerSkin - DELETE /user/profile/{stripped_uuid}/skin
            &hyper::Method::Delete if path.matched(paths::ID_USER_PROFILE_STRIPPED_UUID_SKIN) => {
                {
                    let authorization = match (&context as &Has<Option<Authorization>>).get() {
                        &Some(ref authorization) => authorization,
                        &None => return Box::new(future::ok(Response::new()
                                                .with_status(StatusCode::Forbidden)
                                                .with_body("Unauthenticated"))),
                    };

                }


                // Path parameters
                let path = uri.path().to_string();
                let path_params =
                    paths::REGEX_USER_PROFILE_STRIPPED_UUID_SKIN
                    .captures(&path)
                    .unwrap_or_else(||
                        panic!("Path {} matched RE USER_PROFILE_STRIPPED_UUID_SKIN in set but failed match against \"{}\"", path, paths::REGEX_USER_PROFILE_STRIPPED_UUID_SKIN.as_str())
                    );

                let param_stripped_uuid = match percent_encoding::percent_decode(path_params["stripped_uuid"].as_bytes()).decode_utf8() {
                    Ok(param_stripped_uuid) => match param_stripped_uuid.parse::<String>() {
                        Ok(param_stripped_uuid) => param_stripped_uuid,
                        Err(e) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't parse path parameter stripped_uuid: {}", e)))),
                    },
                    Err(_) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't percent-decode path parameter as UTF-8: {}", &path_params["stripped_uuid"]))))
                };





                Box::new({
                        {{

                                Box::new(api_impl.reset_player_skin(param_stripped_uuid, &context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &Has<XSpanIdString>).get().0.to_string()));

                                        match result {
                                            Ok(rsp) => match rsp {
                                                ResetPlayerSkinResponse::TheSkinHasBeenChanged


                                                => {
                                                    response.set_status(StatusCode::try_from(204).unwrap());

                                                },
                                                ResetPlayerSkinResponse::UponErrorTheServerWillSendBackAJSONWithTheError

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(400).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::RESET_PLAYER_SKIN_UPON_ERROR_THE_SERVER_WILL_SEND_BACK_AJSON_WITH_THE_ERROR.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))

                        }}
                }) as Box<Future<Item=Response, Error=Error>>


            },


            // UploadPlayerSkin - PUT /user/profile/{stripped_uuid}/skin
            &hyper::Method::Put if path.matched(paths::ID_USER_PROFILE_STRIPPED_UUID_SKIN) => {
                {
                    let authorization = match (&context as &Has<Option<Authorization>>).get() {
                        &Some(ref authorization) => authorization,
                        &None => return Box::new(future::ok(Response::new()
                                                .with_status(StatusCode::Forbidden)
                                                .with_body("Unauthenticated"))),
                    };

                }


                // Path parameters
                let path = uri.path().to_string();
                let path_params =
                    paths::REGEX_USER_PROFILE_STRIPPED_UUID_SKIN
                    .captures(&path)
                    .unwrap_or_else(||
                        panic!("Path {} matched RE USER_PROFILE_STRIPPED_UUID_SKIN in set but failed match against \"{}\"", path, paths::REGEX_USER_PROFILE_STRIPPED_UUID_SKIN.as_str())
                    );

                let param_stripped_uuid = match percent_encoding::percent_decode(path_params["stripped_uuid"].as_bytes()).decode_utf8() {
                    Ok(param_stripped_uuid) => match param_stripped_uuid.parse::<String>() {
                        Ok(param_stripped_uuid) => param_stripped_uuid,
                        Err(e) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't parse path parameter stripped_uuid: {}", e)))),
                    },
                    Err(_) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't percent-decode path parameter as UTF-8: {}", &path_params["stripped_uuid"]))))
                };





                Box::new({
                        {{

                                // Form parameters
                                let param_model = None;
                                let param_file = swagger::ByteArray(Vec::from("BINARY_DATA_HERE"));

                                Box::new(api_impl.upload_player_skin(param_stripped_uuid, param_file, param_model, &context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &Has<XSpanIdString>).get().0.to_string()));

                                        match result {
                                            Ok(rsp) => match rsp {
                                                UploadPlayerSkinResponse::TheSkinHasBeenChanged


                                                => {
                                                    response.set_status(StatusCode::try_from(204).unwrap());

                                                },
                                                UploadPlayerSkinResponse::UponErrorTheServerWillSendBackAJSONWithTheError

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(400).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::UPLOAD_PLAYER_SKIN_UPON_ERROR_THE_SERVER_WILL_SEND_BACK_AJSON_WITH_THE_ERROR.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))

                        }}
                }) as Box<Future<Item=Response, Error=Error>>


            },


            _ => Box::new(future::ok(Response::new().with_status(StatusCode::NotFound))) as Box<Future<Item=Response, Error=Error>>,
        }
    }
}

impl<T, C> Clone for Service<T, C>
{
    fn clone(&self) -> Self {
        Service {
            api_impl: self.api_impl.clone(),
            marker: self.marker.clone(),
        }
    }
}

/// Request parser for `Api`.
pub struct ApiRequestParser;
impl RequestParser for ApiRequestParser {
    fn parse_operation_id(request: &Request) -> Result<&'static str, ()> {
        let path = paths::GLOBAL_REGEX_SET.matches(request.uri().path());
        match request.method() {

            // GetOrdersStatistics - POST /orders/statistics
            &hyper::Method::Post if path.matched(paths::ID_ORDERS_STATISTICS) => Ok("GetOrdersStatistics"),

            // FindUniqueIdsByName - POST /profiles/minecraft
            &hyper::Method::Post if path.matched(paths::ID_PROFILES_MINECRAFT) => Ok("FindUniqueIdsByName"),

            // GetNameHistory - GET /user/profiles/{stripped_uuid}/names
            &hyper::Method::Get if path.matched(paths::ID_USER_PROFILES_STRIPPED_UUID_NAMES) => Ok("GetNameHistory"),

            // GetUniqueIdByName - GET /users/profiles/minecraft/{username}
            &hyper::Method::Get if path.matched(paths::ID_USERS_PROFILES_MINECRAFT_USERNAME) => Ok("GetUniqueIdByName"),

            // CheckSecurityStatus - GET /user/security/location
            &hyper::Method::Get if path.matched(paths::ID_USER_SECURITY_LOCATION) => Ok("CheckSecurityStatus"),

            // ListPendingSecurityQuestions - GET /user/security/challenges
            &hyper::Method::Get if path.matched(paths::ID_USER_SECURITY_CHALLENGES) => Ok("ListPendingSecurityQuestions"),

            // SendSecurityQuestionAnswers - POST /user/security/location
            &hyper::Method::Post if path.matched(paths::ID_USER_SECURITY_LOCATION) => Ok("SendSecurityQuestionAnswers"),

            // ChangePlayerSkin - POST /user/profile/{stripped_uuid}/skin
            &hyper::Method::Post if path.matched(paths::ID_USER_PROFILE_STRIPPED_UUID_SKIN) => Ok("ChangePlayerSkin"),

            // ResetPlayerSkin - DELETE /user/profile/{stripped_uuid}/skin
            &hyper::Method::Delete if path.matched(paths::ID_USER_PROFILE_STRIPPED_UUID_SKIN) => Ok("ResetPlayerSkin"),

            // UploadPlayerSkin - PUT /user/profile/{stripped_uuid}/skin
            &hyper::Method::Put if path.matched(paths::ID_USER_PROFILE_STRIPPED_UUID_SKIN) => Ok("UploadPlayerSkin"),
            _ => Err(()),
        }
    }
}
