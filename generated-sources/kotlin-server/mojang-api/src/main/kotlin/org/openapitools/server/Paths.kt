/**
* Mojang API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 2020-06-05
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server

import io.ktor.application.ApplicationCall
import io.ktor.http.HttpMethod
import io.ktor.locations.*
import io.ktor.pipeline.PipelineContext
import io.ktor.routing.Route
import io.ktor.routing.method
import org.openapitools.server.models.*


// NOTE: ktor-location@0.9.0 is missing extension for Route.delete. This includes it.
inline fun <reified T : Any> Route.delete(noinline body: suspend PipelineContext<Unit, ApplicationCall>.(T) -> Unit): Route {
    return location(T::class) {
        method(HttpMethod.Delete) {
            handle(body)
        }
    }
}

object Paths {
    /**
     * Gets the full player&#39;s name history
     * 
     * @param strippedUuid The player UUID without hyphens 
     */
    @Location("/user/profiles/{stripped_uuid}/names") class getNameHistory(val strippedUuid: kotlin.String)

    /**
     * Find the UUID by name
     * Find the current player name, UUID, demo status and migration flag by the current player name or at a given time.
     * @param username The username in a given time, or in present if \&quot;at\&quot; is not sent 
     * @param at Find the username in a given time, when 0 selects the original name however, it only works if the name was changed at least once, or if the account is legacy. The time is an UNIX timestamp (without milliseconds) (optional, default to null)
     */
    @Location("/users/profiles/minecraft/{username}") class getUniqueIdByName(val username: kotlin.String, val at: kotlin.Long)

    /**
     * Check if security questions are needed
     * 
     */
    @Location("/user/security/location") class checkSecurityStatus()

    /**
     * Get list of questions
     * 
     */
    @Location("/user/security/challenges") class listPendingSecurityQuestions()

    /**
     * Resets the player skin to default
     * 
     * @param strippedUuid The player UUID without hyphens 
     */
    @Location("/user/profile/{stripped_uuid}/skin") class resetPlayerSkin(val strippedUuid: kotlin.String)

}
