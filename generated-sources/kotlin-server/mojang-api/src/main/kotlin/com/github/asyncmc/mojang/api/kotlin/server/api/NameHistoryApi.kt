/**
* Mojang API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 2020-06-05
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.github.asyncmc.mojang.api.kotlin.server.api

import com.google.gson.Gson
import io.ktor.application.call
import io.ktor.auth.UserIdPrincipal
import io.ktor.auth.authentication
import io.ktor.auth.basicAuthentication
import io.ktor.auth.oauth
import io.ktor.auth.OAuthAccessTokenResponse
import io.ktor.auth.OAuthServerSettings
import io.ktor.http.ContentType
import io.ktor.http.HttpStatusCode
import io.ktor.locations.*
import io.ktor.response.respond
import io.ktor.response.respondText
import io.ktor.routing.*

import kotlinx.coroutines.experimental.asCoroutineDispatcher

import org.openapitools.server.ApplicationAuthProviders
import org.openapitools.server.Paths
import org.openapitools.server.ApplicationExecutors
import org.openapitools.server.HTTP.client
import org.openapitools.server.infrastructure.ApiPrincipal
import org.openapitools.server.infrastructure.apiKeyAuth

// ktor 0.9.x is missing io.ktor.locations.DELETE, this adds it.
// see https://github.com/ktorio/ktor/issues/288
import org.openapitools.server.delete

import com.github.asyncmc.mojang.api.kotlin.server.model.CurrentPlayerIDs
import com.github.asyncmc.mojang.api.kotlin.server.model.Error
import com.github.asyncmc.mojang.api.kotlin.server.model.NameChange

fun Route.NameHistoryApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    route("/profiles/minecraft") {
        post {
            val exampleContentType = "application/json"
val exampleContentString = """{
              "legacy" : false,
              "name" : "Alonelord",
              "id" : "38ba542eb5924231a54cca0f2eac2b54",
              "demo" : false
            }"""

when(exampleContentType) {
    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
    else -> call.respondText(exampleContentString)
}

        }
    }
    

    get<Paths.getNameHistory> {  it: Paths.getNameHistory ->
        call.respond(HttpStatusCode.NotImplemented)

    }
    

    get<Paths.getUniqueIdByName> {  it: Paths.getUniqueIdByName ->
        val exampleContentType = "application/json"
val exampleContentString = """{
          "legacy" : false,
          "name" : "Alonelord",
          "id" : "38ba542eb5924231a54cca0f2eac2b54",
          "demo" : false
        }"""

when(exampleContentType) {
    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
    else -> call.respondText(exampleContentString)
}

    }
    
}
