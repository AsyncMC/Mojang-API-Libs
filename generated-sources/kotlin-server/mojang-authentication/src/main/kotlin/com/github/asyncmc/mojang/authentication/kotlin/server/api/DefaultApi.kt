/**
* Mojang Authentication API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 2020-06-05
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.github.asyncmc.mojang.authentication.kotlin.server.api

import com.google.gson.Gson
import io.ktor.application.call
import io.ktor.auth.UserIdPrincipal
import io.ktor.auth.authentication
import io.ktor.auth.basicAuthentication
import io.ktor.auth.oauth
import io.ktor.auth.OAuthAccessTokenResponse
import io.ktor.auth.OAuthServerSettings
import io.ktor.http.ContentType
import io.ktor.http.HttpStatusCode
import io.ktor.locations.*
import io.ktor.response.respond
import io.ktor.response.respondText
import io.ktor.routing.*

import kotlinx.coroutines.experimental.asCoroutineDispatcher

import org.openapitools.server.ApplicationAuthProviders
import org.openapitools.server.Paths
import org.openapitools.server.ApplicationExecutors
import org.openapitools.server.HTTP.client
import org.openapitools.server.infrastructure.ApiPrincipal
import org.openapitools.server.infrastructure.apiKeyAuth

// ktor 0.9.x is missing io.ktor.locations.DELETE, this adds it.
// see https://github.com/ktorio/ktor/issues/288
import org.openapitools.server.delete

import com.github.asyncmc.mojang.authentication.kotlin.server.model.AccessKeys
import com.github.asyncmc.mojang.authentication.kotlin.server.model.Authentication
import com.github.asyncmc.mojang.authentication.kotlin.server.model.AuthenticationRequest
import com.github.asyncmc.mojang.authentication.kotlin.server.model.Error
import com.github.asyncmc.mojang.authentication.kotlin.server.model.RefreshRequest
import com.github.asyncmc.mojang.authentication.kotlin.server.model.RefreshResponse
import com.github.asyncmc.mojang.authentication.kotlin.server.model.UsernamePassword

fun Route.DefaultApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    route("/authenticate") {
        post {
            val exampleContentType = "application/json"
val exampleContentString = """{
              "availableProfiles" : [ {
                "createdAt" : 0,
                "legacyProfile" : true,
                "agent" : "agent",
                "legacy" : true,
                "name" : "name",
                "paid" : true,
                "id" : "id",
                "migrated" : true,
                "userId" : "userId",
                "suspended" : true
              }, {
                "createdAt" : 0,
                "legacyProfile" : true,
                "agent" : "agent",
                "legacy" : true,
                "name" : "name",
                "paid" : true,
                "id" : "id",
                "migrated" : true,
                "userId" : "userId",
                "suspended" : true
              } ],
              "selectedProfile" : {
                "createdAt" : 0,
                "legacyProfile" : true,
                "agent" : "agent",
                "legacy" : true,
                "name" : "name",
                "paid" : true,
                "id" : "id",
                "migrated" : true,
                "userId" : "userId",
                "suspended" : true
              },
              "user" : {
                "registerIp" : "registerIp",
                "verifiedByParent" : true,
                "migratedAt" : 6,
                "passwordChangedAt" : 5,
                "legacyUser" : true,
                "registeredAt" : 1,
                "dateOfBirth" : 5,
                "suspended" : true,
                "emailVerified" : true,
                "migratedFrom" : "migratedFrom",
                "blocked" : true,
                "migrated" : true,
                "secured" : true,
                "email" : "email",
                "username" : "username"
              }
            }"""

when(exampleContentType) {
    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
    else -> call.respondText(exampleContentString)
}

        }
    }
    

    route("/invalidate") {
        post {
            call.respond(HttpStatusCode.NotImplemented)

        }
    }
    

    route("/refresh") {
        post {
            val exampleContentType = "application/json"
val exampleContentString = """{
              "selectedProfile" : {
                "name" : "name",
                "id" : "id"
              },
              "user" : {
                "id" : "id",
                "properties" : [ {
                  "name" : "name",
                  "value" : "value"
                }, {
                  "name" : "name",
                  "value" : "value"
                } ]
              }
            }"""

when(exampleContentType) {
    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
    else -> call.respondText(exampleContentString)
}

        }
    }
    

    route("/signout") {
        post {
            call.respond(HttpStatusCode.NotImplemented)

        }
    }
    

    route("/validate") {
        post {
            call.respond(HttpStatusCode.NotImplemented)

        }
    }
    
}
