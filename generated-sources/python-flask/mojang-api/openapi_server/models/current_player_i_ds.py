# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class CurrentPlayerIDs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, legacy=False, demo=False):  # noqa: E501
        """CurrentPlayerIDs - a model defined in OpenAPI

        :param id: The id of this CurrentPlayerIDs.  # noqa: E501
        :type id: str
        :param name: The name of this CurrentPlayerIDs.  # noqa: E501
        :type name: str
        :param legacy: The legacy of this CurrentPlayerIDs.  # noqa: E501
        :type legacy: bool
        :param demo: The demo of this CurrentPlayerIDs.  # noqa: E501
        :type demo: bool
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'legacy': bool,
            'demo': bool
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'legacy': 'legacy',
            'demo': 'demo'
        }

        self._id = id
        self._name = name
        self._legacy = legacy
        self._demo = demo

    @classmethod
    def from_dict(cls, dikt) -> 'CurrentPlayerIDs':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CurrentPlayerIDs of this CurrentPlayerIDs.  # noqa: E501
        :rtype: CurrentPlayerIDs
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CurrentPlayerIDs.

        The player UUID without hyphens  # noqa: E501

        :return: The id of this CurrentPlayerIDs.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CurrentPlayerIDs.

        The player UUID without hyphens  # noqa: E501

        :param id: The id of this CurrentPlayerIDs.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this CurrentPlayerIDs.

        The current name being used by this player  # noqa: E501

        :return: The name of this CurrentPlayerIDs.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CurrentPlayerIDs.

        The current name being used by this player  # noqa: E501

        :param name: The name of this CurrentPlayerIDs.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def legacy(self):
        """Gets the legacy of this CurrentPlayerIDs.

        If account has not been converted  # noqa: E501

        :return: The legacy of this CurrentPlayerIDs.
        :rtype: bool
        """
        return self._legacy

    @legacy.setter
    def legacy(self, legacy):
        """Sets the legacy of this CurrentPlayerIDs.

        If account has not been converted  # noqa: E501

        :param legacy: The legacy of this CurrentPlayerIDs.
        :type legacy: bool
        """

        self._legacy = legacy

    @property
    def demo(self):
        """Gets the demo of this CurrentPlayerIDs.

        If the player has not puchased the game  # noqa: E501

        :return: The demo of this CurrentPlayerIDs.
        :rtype: bool
        """
        return self._demo

    @demo.setter
    def demo(self, demo):
        """Sets the demo of this CurrentPlayerIDs.

        If the player has not puchased the game  # noqa: E501

        :param demo: The demo of this CurrentPlayerIDs.
        :type demo: bool
        """

        self._demo = demo
