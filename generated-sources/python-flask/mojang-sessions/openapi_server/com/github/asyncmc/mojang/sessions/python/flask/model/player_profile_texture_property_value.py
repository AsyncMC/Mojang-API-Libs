# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.com.github.asyncmc.mojang.sessions.python.flask.model.base_model_ import Model
from openapi_server import util


class PlayerProfileTexturePropertyValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, timestamp=None, profile_id=None, profile_name=None, signature_required=False, textures=None):  # noqa: E501
        """PlayerProfileTexturePropertyValue - a model defined in OpenAPI

        :param timestamp: The timestamp of this PlayerProfileTexturePropertyValue.  # noqa: E501
        :type timestamp: int
        :param profile_id: The profile_id of this PlayerProfileTexturePropertyValue.  # noqa: E501
        :type profile_id: str
        :param profile_name: The profile_name of this PlayerProfileTexturePropertyValue.  # noqa: E501
        :type profile_name: str
        :param signature_required: The signature_required of this PlayerProfileTexturePropertyValue.  # noqa: E501
        :type signature_required: bool
        :param textures: The textures of this PlayerProfileTexturePropertyValue.  # noqa: E501
        :type textures: PlayerTexture
        """
        self.openapi_types = {
            'timestamp': int,
            'profile_id': str,
            'profile_name': str,
            'signature_required': bool,
            'textures': PlayerTexture
        }

        self.attribute_map = {
            'timestamp': 'timestamp',
            'profile_id': 'profileId',
            'profile_name': 'profileName',
            'signature_required': 'signatureRequired',
            'textures': 'textures'
        }

        self._timestamp = timestamp
        self._profile_id = profile_id
        self._profile_name = profile_name
        self._signature_required = signature_required
        self._textures = textures

    @classmethod
    def from_dict(cls, dikt) -> 'PlayerProfileTexturePropertyValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PlayerProfileTexturePropertyValue of this PlayerProfileTexturePropertyValue.  # noqa: E501
        :rtype: PlayerProfileTexturePropertyValue
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timestamp(self):
        """Gets the timestamp of this PlayerProfileTexturePropertyValue.

        UNIX timestamp in milliseconds  # noqa: E501

        :return: The timestamp of this PlayerProfileTexturePropertyValue.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this PlayerProfileTexturePropertyValue.

        UNIX timestamp in milliseconds  # noqa: E501

        :param timestamp: The timestamp of this PlayerProfileTexturePropertyValue.
        :type timestamp: int
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def profile_id(self):
        """Gets the profile_id of this PlayerProfileTexturePropertyValue.

        The player UUID without hyphens  # noqa: E501

        :return: The profile_id of this PlayerProfileTexturePropertyValue.
        :rtype: str
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this PlayerProfileTexturePropertyValue.

        The player UUID without hyphens  # noqa: E501

        :param profile_id: The profile_id of this PlayerProfileTexturePropertyValue.
        :type profile_id: str
        """
        if profile_id is None:
            raise ValueError("Invalid value for `profile_id`, must not be `None`")  # noqa: E501

        self._profile_id = profile_id

    @property
    def profile_name(self):
        """Gets the profile_name of this PlayerProfileTexturePropertyValue.

        The player's name  # noqa: E501

        :return: The profile_name of this PlayerProfileTexturePropertyValue.
        :rtype: str
        """
        return self._profile_name

    @profile_name.setter
    def profile_name(self, profile_name):
        """Sets the profile_name of this PlayerProfileTexturePropertyValue.

        The player's name  # noqa: E501

        :param profile_name: The profile_name of this PlayerProfileTexturePropertyValue.
        :type profile_name: str
        """
        if profile_name is None:
            raise ValueError("Invalid value for `profile_name`, must not be `None`")  # noqa: E501

        self._profile_name = profile_name

    @property
    def signature_required(self):
        """Gets the signature_required of this PlayerProfileTexturePropertyValue.

        Only present if unsigned was set to false in the request  # noqa: E501

        :return: The signature_required of this PlayerProfileTexturePropertyValue.
        :rtype: bool
        """
        return self._signature_required

    @signature_required.setter
    def signature_required(self, signature_required):
        """Sets the signature_required of this PlayerProfileTexturePropertyValue.

        Only present if unsigned was set to false in the request  # noqa: E501

        :param signature_required: The signature_required of this PlayerProfileTexturePropertyValue.
        :type signature_required: bool
        """

        self._signature_required = signature_required

    @property
    def textures(self):
        """Gets the textures of this PlayerProfileTexturePropertyValue.


        :return: The textures of this PlayerProfileTexturePropertyValue.
        :rtype: PlayerTexture
        """
        return self._textures

    @textures.setter
    def textures(self, textures):
        """Sets the textures of this PlayerProfileTexturePropertyValue.


        :param textures: The textures of this PlayerProfileTexturePropertyValue.
        :type textures: PlayerTexture
        """

        self._textures = textures
