# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.com.github.asyncmc.mojang.sessions.python.flask.model.base_model_ import Model
from openapi_server import util


class PlayerProfileProperty(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, value=None, signature=None):  # noqa: E501
        """PlayerProfileProperty - a model defined in OpenAPI

        :param name: The name of this PlayerProfileProperty.  # noqa: E501
        :type name: str
        :param value: The value of this PlayerProfileProperty.  # noqa: E501
        :type value: ByteArray
        :param signature: The signature of this PlayerProfileProperty.  # noqa: E501
        :type signature: ByteArray
        """
        self.openapi_types = {
            'name': str,
            'value': ByteArray,
            'signature': ByteArray
        }

        self.attribute_map = {
            'name': 'name',
            'value': 'value',
            'signature': 'signature'
        }

        self._name = name
        self._value = value
        self._signature = signature

    @classmethod
    def from_dict(cls, dikt) -> 'PlayerProfileProperty':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PlayerProfileProperty of this PlayerProfileProperty.  # noqa: E501
        :rtype: PlayerProfileProperty
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this PlayerProfileProperty.

        The property name  # noqa: E501

        :return: The name of this PlayerProfileProperty.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PlayerProfileProperty.

        The property name  # noqa: E501

        :param name: The name of this PlayerProfileProperty.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def value(self):
        """Gets the value of this PlayerProfileProperty.

        The serialized property value in base64.  # noqa: E501

        :return: The value of this PlayerProfileProperty.
        :rtype: ByteArray
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PlayerProfileProperty.

        The serialized property value in base64.  # noqa: E501

        :param value: The value of this PlayerProfileProperty.
        :type value: ByteArray
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def signature(self):
        """Gets the signature of this PlayerProfileProperty.

        signed data using Yggdrasil's private key  # noqa: E501

        :return: The signature of this PlayerProfileProperty.
        :rtype: ByteArray
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this PlayerProfileProperty.

        signed data using Yggdrasil's private key  # noqa: E501

        :param signature: The signature of this PlayerProfileProperty.
        :type signature: ByteArray
        """

        self._signature = signature
