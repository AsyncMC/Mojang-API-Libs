# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.com.github.asyncmc.mojang.authentication.python.flask.model.base_model_ import Model
from openapi_server import util


class AccessKeys(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token=None, client_token=None):  # noqa: E501
        """AccessKeys - a model defined in OpenAPI

        :param access_token: The access_token of this AccessKeys.  # noqa: E501
        :type access_token: str
        :param client_token: The client_token of this AccessKeys.  # noqa: E501
        :type client_token: str
        """
        self.openapi_types = {
            'access_token': str,
            'client_token': str
        }

        self.attribute_map = {
            'access_token': 'accessToken',
            'client_token': 'clientToken'
        }

        self._access_token = access_token
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt) -> 'AccessKeys':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AccessKeys of this AccessKeys.  # noqa: E501
        :rtype: AccessKeys
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this AccessKeys.


        :return: The access_token of this AccessKeys.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this AccessKeys.


        :param access_token: The access_token of this AccessKeys.
        :type access_token: str
        """
        if access_token is None:
            raise ValueError("Invalid value for `access_token`, must not be `None`")  # noqa: E501

        self._access_token = access_token

    @property
    def client_token(self):
        """Gets the client_token of this AccessKeys.


        :return: The client_token of this AccessKeys.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this AccessKeys.


        :param client_token: The client_token of this AccessKeys.
        :type client_token: str
        """

        self._client_token = client_token
