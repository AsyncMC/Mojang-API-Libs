h1. Mojang Session API No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

*Version:* 2020-06-05

----

{toc:printable=true|style=square|minLevel=2|maxLevel=3|type=list|outline=false|include=.*}

h2. Endpoints

    h3. getBlockedServerHashes
    {status:colour=Yellow|title=get|subtle=false}
    {code}
    get /blockedservers
    {code}
    *Summary:* A list of SHA1 hashes of banned servers
    *Description:* Returns a list of SHA1 hashes used to check server addresses against when the client tries to connect. Clients check the lowercase name, using the ISO-8859-1 charset, against this list. They will also attempt to check subdomains, replacing each level with a *. Specifically, it splits based off of the . in the domain, goes through each section removing one at a time. For instance, for mc.example.com, it would try mc.example.com, *.example.com, and *.com. With IP addresses (verified by having 4 split sections, with each section being a valid integer between 0 and 255, inclusive) substitution starts from the end, so for 192.168.0.1, it would try 192.168.0.1, 192.168.0.*, 192.168.*, and 192.*. This check is done by the bootstrap class in netty. The default netty class is overridden by one in the com.mojang:netty dependency loaded by the launcher. This allows it to affect any version that used netty (1.7+)


    h4. Parameters







    h4. Responses
        *Status Code:* 200
        *Message:*     A list of SHA1 hashes, one hash per line
        {code:title=Response Type}
String
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "A list of SHA1 hashes, one hash per line",
  "content" : {
    "text/plain" : {
      "schema" : {
        "type" : "string",
        "example" : "6f2520f8bd70a718c568ab5274c56bdbbfc14ef4 7ea72de5f8e70a2ac45f1aa17d43f0ca3cddeedd c005ad34245a8f2105658da2d6d6e8545ef0f0de c645d6c6430db3069abd291ec13afebdb320714b 8bf58811e6ebca16a01b842ff0c012db1171d7d6 8789800277882d1989d384e7941b6ad3dadab430 e40c3456fb05687b8eeb17213a47b263d566f179 278b24ffff7f9f46cf71212a4c0948d07fb3bc35 c78697e385bfa58d6bd2a013f543cdfbdc297c4f b13009db1e2fbe05465716f67c8d58b9c0503520 3e560742576af9413fca72e70f75d7ddc9416020 986204c70d368d50ffead9031e86f2b9e70bb6d0"
      }
    }
  }
}
        {code}
    ----

    h3. getPlayerProfile
    {status:colour=Yellow|title=get|subtle=false}
    {code}
    get /session/minecraft/profile/{stripped_uuid}
    {code}
    *Summary:* Gets the player&#39;s game profile
    *Description:* This will return the player&#39;s username plus any additional information about them (e.g. skins). This has a much stricter rate limit: You can request the same profile once per minute, however you can send as many unique requests as you like.


    h4. Parameters
        h5. Path Parameters
        ||Name||Description||Required||Default||Pattern||
        |strippedUuid |The player UUID without hyphens |(/) |null |  |




        h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |unsigned |When set to false, the signature data are sent |(x) |null |  |





    h4. Responses
        *Status Code:* 200
        *Message:*     The player profile and all properties
        {code:title=Response Type}
PlayerProfile
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "The player profile and all properties",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/PlayerProfile"
      }
    }
  }
}
        {code}
        *Status Code:* 400
        *Message:*     UUID is invalid
        {code:title=Response Type}
SessionApiError
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "UUID is invalid",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/SessionApiError"
      }
    }
  }
}
        {code}
    ----

h2. Models

        h3. PlayerProfile
        ||Field Name||Required||Type||Description||
         |id | |String |The player UUID without hyphens |
 |name | |String | |
 |legacy | |Boolean |Will appear in the response if the user has not migrated their minecraft.net account to Mojang. |
 |properties | |array[PlayerProfileProperty] |An array with all player properties, like skin and cape |
        h3. PlayerProfileProperty
        ||Field Name||Required||Type||Description||
         |name | |String |The property name |
 |value | |byte[] |The serialized property value in base64. |
 |signature | |byte[] |signed data using Yggdrasil&#39;s private key |
        h3. PlayerProfileTexturePropertyValue
        ||Field Name||Required||Type||Description||
         |timestamp | |Long |UNIX timestamp in milliseconds |
 |profileId | |String |The player UUID without hyphens |
 |profileName | |String |The player&#39;s name |
 |signatureRequired | |Boolean |Only present if unsigned was set to false in the request |
 |textures | |PlayerTexture | |
        h3. PlayerSkinMetadata
        ||Field Name||Required||Type||Description||
         |model | |String |The player model, currently only \&quot;slim\&quot; (Alex) is valid, for Steve&#39;s model this property must be absent. |
        h3. PlayerSkinURL
        ||Field Name||Required||Type||Description||
         |url | |String |The URL to the texture, must be in Mojang&#39;s domains. |
        h3. PlayerTexture
        ||Field Name||Required||Type||Description||
         |SKIN | |PlayerSkinURL | |
 |CAPE | |PlayerTextureURL | |
        h3. PlayerTextureURL
        ||Field Name||Required||Type||Description||
         |url | |String |The URL to the texture, must be in Mojang&#39;s domains. |
        h3. SessionApiError
        ||Field Name||Required||Type||Description||
         |error | |String |A message describing the error |
 |path | |String |The request path |
