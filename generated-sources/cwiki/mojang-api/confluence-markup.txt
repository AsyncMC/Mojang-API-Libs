h1. Mojang API No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

*Version:* 2020-06-05

----

{toc:printable=true|style=square|minLevel=2|maxLevel=3|type=list|outline=false|include=.*}

h2. Endpoints

    h3. getOrdersStatistics
    {status:colour=Yellow|title=post|subtle=false}
    {code}
    post /orders/statistics
    {code}
    *Summary:* Get statistics on the sales of Minecraft.
    *Description:* 


    h4. Parameters

        h5. Body Parameter
        ||Name||Description||Required||Default||Pattern||
        |orderStatisticsRequest |The payload is a json list of options under the metricKeys key. You will receive a single object corresponding to the sum of sales of the requested type(s). You must request at least one type of sale. Below is the default list used by https://minecraft.net/en/stats/ |(/) | |  |







    h4. Responses
        *Status Code:* 200
        *Message:*     A json object is returned with the total amount of copies sold, the amount of copies sold in the last 24h and how many sales there are per second.
        {code:title=Response Type}
OrderStatisticsResponse
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "A json object is returned with the total amount of copies sold, the amount of copies sold in the last 24h and how many sales there are per second.",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/OrderStatisticsResponse"
      }
    }
  }
}
        {code}
    ----

    h3. findUniqueIdsByName
    {status:colour=Yellow|title=post|subtle=false}
    {code}
    post /profiles/minecraft
    {code}
    *Summary:* Find the current UUID of multiple players at once
    *Description:* Find the current players name, UUID, demo status and migration flag by the current players name. The \&quot;at\&quot; parameter is not supported. Players not found are not returned. If no players are found, an empty array is returned.


    h4. Parameters

        h5. Body Parameter
        ||Name||Description||Required||Default||Pattern||
        |string |Array with the player names |(/) | |  |







    h4. Responses
        *Status Code:* 200
        *Message:*     An array containing all players found
        {code:title=Response Type}
array[CurrentPlayerIDs]
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "An array containing all players found",
  "content" : {
    "application/json" : {
      "schema" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/CurrentPlayerIDs"
        }
      },
      "example" : "[ { \"id\": \"185e217600954ff8a2016f2aed9a032a\", \"name\": \"joserobjr\" }, { \"id\": \"0d252b7218b648bfb86c2ae476954d32\", \"name\": \"maksimkurb\", \"legacy\": true, \"demo\": true } ]"
    }
  }
}
        {code}
    ----

    h3. getNameHistory
    {status:colour=Yellow|title=get|subtle=false}
    {code}
    get /user/profiles/{stripped_uuid}/names
    {code}
    *Summary:* Gets the full player&#39;s name history
    *Description:* 


    h4. Parameters
        h5. Path Parameters
        ||Name||Description||Required||Default||Pattern||
        |strippedUuid |The player UUID without hyphens |(/) |null |  |








    h4. Responses
        *Status Code:* 200
        *Message:*     A list of name changes, the first entry usually don&#39;t have a change time
        {code:title=Response Type}
array[NameChange]
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "A list of name changes, the first entry usually don't have a change time",
  "content" : {
    "application/json" : {
      "schema" : {
        "type" : "array",
        "example" : "[ { \"name\": \"firelordwill\" }, { \"name\": \"LordofMC_Playerz\", \"changedToAt\": 1448677333000 }, { \"name\": \"Alonlord\", \"changedToAt\": 1460944203000 }, { \"name\": \"Alonelord\", \"changedToAt\": 1477533727000 }, { \"name\": \"Alonelordz\", \"changedToAt\": 1585545654000 }, { \"name\": \"Alonelord\", \"changedToAt\": 1588184987000 } ]",
        "items" : {
          "$ref" : "#/components/schemas/NameChange"
        }
      }
    }
  }
}
        {code}
        *Status Code:* 204
        *Message:*     Username not found at the given time
        {code:title=Response Type}

        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Username not found at the given time"
}
        {code}
    ----

    h3. getUniqueIdByName
    {status:colour=Yellow|title=get|subtle=false}
    {code}
    get /users/profiles/minecraft/{username}
    {code}
    *Summary:* Find the UUID by name
    *Description:* Find the current player name, UUID, demo status and migration flag by the current player name or at a given time.


    h4. Parameters
        h5. Path Parameters
        ||Name||Description||Required||Default||Pattern||
        |username |The username in a given time, or in present if \&quot;at\&quot; is not sent |(/) |null |  |




        h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |at |Find the username in a given time, when 0 selects the original name however, it only works if the name was changed at least once, or if the account is legacy. The time is an UNIX timestamp (without milliseconds) |(x) |null |  |





    h4. Responses
        *Status Code:* 200
        *Message:*     The user was found
        {code:title=Response Type}
CurrentPlayerIDs
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "The user was found",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/CurrentPlayerIDs"
      }
    }
  }
}
        {code}
        *Status Code:* 204
        *Message:*     User not found
        {code:title=Response Type}

        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "User not found"
}
        {code}
        *Status Code:* 400
        *Message:*     If the timestamp is invalid
        {code:title=Response Type}
Error
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "If the timestamp is invalid",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Error"
      }
    }
  }
}
        {code}
    ----

    h3. checkSecurityStatus
    {status:colour=Yellow|title=get|subtle=false}
    {code}
    get /user/security/location
    {code}
    *Summary:* Check if security questions are needed
    *Description:* 


    h4. Parameters







    h4. Responses
        *Status Code:* 204
        *Message:*     No check is needed.
        {code:title=Response Type}

        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "No check is needed."
}
        {code}
        *Status Code:* 400
        *Message:*     A security check is needed or there is an other issue
        {code:title=Response Type}
Error
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "A security check is needed or there is an other issue",
  "content" : {
    "application/json" : {
      "schema" : {
        "example" : "{ \"error\": \"ForbiddenOperationException\", \"errorMessage\": \"Current IP is not secured\" }",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Error"
        } ]
      }
    }
  }
}
        {code}
    ----

    h3. listPendingSecurityQuestions
    {status:colour=Yellow|title=get|subtle=false}
    {code}
    get /user/security/challenges
    {code}
    *Summary:* Get list of questions
    *Description:* 


    h4. Parameters







    h4. Responses
        *Status Code:* 200
        *Message:*     A list of security questions to be answered
        {code:title=Response Type}
array[SecurityChallenge]
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "A list of security questions to be answered",
  "content" : {
    "application/json" : {
      "schema" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/SecurityChallenge"
        }
      }
    }
  }
}
        {code}
    ----

    h3. sendSecurityQuestionAnswers
    {status:colour=Yellow|title=post|subtle=false}
    {code}
    post /user/security/location
    {code}
    *Summary:* Send back the answers
    *Description:* 


    h4. Parameters

        h5. Body Parameter
        ||Name||Description||Required||Default||Pattern||
        |securityAnswer |An array with all the answers |(/) | |  |







    h4. Responses
        *Status Code:* 204
        *Message:*     The answers were accepted
        {code:title=Response Type}

        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "The answers were accepted"
}
        {code}
        *Status Code:* 400
        *Message:*     At least one answer we not accepted
        {code:title=Response Type}
Error
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "At least one answer we not accepted",
  "content" : {
    "application/json" : {
      "schema" : {
        "example" : "{\n  \"error\": \"ForbiddenOperationException\",\n  \"errorMessage\": \"At least one answer was incorrect\"\n}",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Error"
        } ]
      }
    }
  }
}
        {code}
    ----

    h3. changePlayerSkin
    {status:colour=Yellow|title=post|subtle=false}
    {code}
    post /user/profile/{stripped_uuid}/skin
    {code}
    *Summary:* Changes the player skin by URL
    *Description:* This will set the skin for the selected profile, but Mojang&#39;s servers will fetch the skin from a URL. This will also work for legacy accounts.


    h4. Parameters
        h5. Path Parameters
        ||Name||Description||Required||Default||Pattern||
        |strippedUuid |The player UUID without hyphens |(/) |null |  |








    h4. Responses
        *Status Code:* 204
        *Message:*     The skin has been changed. The response has no body
        {code:title=Response Type}

        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "The skin has been changed. The response has no body"
}
        {code}
        *Status Code:* 400
        *Message:*     Upon error the server will send back a JSON with the error. (Success is a blank payload)
        {code:title=Response Type}
Error
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Upon error the server will send back a JSON with the error. (Success is a blank payload)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Error"
      }
    }
  }
}
        {code}
    ----

    h3. resetPlayerSkin
    {status:colour=Yellow|title=delete|subtle=false}
    {code}
    delete /user/profile/{stripped_uuid}/skin
    {code}
    *Summary:* Resets the player skin to default
    *Description:* 


    h4. Parameters
        h5. Path Parameters
        ||Name||Description||Required||Default||Pattern||
        |strippedUuid |The player UUID without hyphens |(/) |null |  |








    h4. Responses
        *Status Code:* 204
        *Message:*     The skin has been changed. The response has no body
        {code:title=Response Type}

        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "The skin has been changed. The response has no body"
}
        {code}
        *Status Code:* 400
        *Message:*     Upon error the server will send back a JSON with the error. (Success is a blank payload)
        {code:title=Response Type}
Error
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Upon error the server will send back a JSON with the error. (Success is a blank payload)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Error"
      }
    }
  }
}
        {code}
    ----

    h3. uploadPlayerSkin
    {status:colour=Yellow|title=put|subtle=false}
    {code}
    put /user/profile/{stripped_uuid}/skin
    {code}
    *Summary:* Changes the player skin by upload
    *Description:* This uploads a skin to Mojang&#39;s servers. It also sets the users skin. This works on legacy counts as well.


    h4. Parameters
        h5. Path Parameters
        ||Name||Description||Required||Default||Pattern||
        |strippedUuid |The player UUID without hyphens |(/) |null |  |








    h4. Responses
        *Status Code:* 204
        *Message:*     The skin has been changed. The response has no body
        {code:title=Response Type}

        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "The skin has been changed. The response has no body"
}
        {code}
        *Status Code:* 400
        *Message:*     Upon error the server will send back a JSON with the error. (Success is a blank payload)
        {code:title=Response Type}
Error
        {code}
        See [#models]



        {code:title=Response Schema |collapse=true}
{
  "description" : "Upon error the server will send back a JSON with the error. (Success is a blank payload)",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Error"
      }
    }
  }
}
        {code}
    ----

h2. Models

        h3. ChangeSkinRequest
        ||Field Name||Required||Type||Description||
         |model | |SkinModel | |
 |url | |String |The URL which Mojang servers will download and apply the skin |
        h3. CurrentPlayerIDs
        ||Field Name||Required||Type||Description||
         |id | |String |The player UUID without hyphens |
 |name | |String |The current name being used by this player |
 |legacy | |Boolean |If account has not been converted |
 |demo | |Boolean |If the player has not puchased the game |
        h3. Error
        ||Field Name||Required||Type||Description||
         |error | |String | |
 |errorMessage | |String | |
        h3. NameChange
        ||Field Name||Required||Type||Description||
         |name | |String |The new player name |
 |changedToAt | |Long |Time which the name was changed in UNIX Timestamp without milliseconds. Usually absent for the first entry. |
        h3. OrderStatistic
        ||Field Name||Required||Type||Description||
                h3. OrderStatisticsRequest
        ||Field Name||Required||Type||Description||
         |metricKeys | |array[OrderStatistic] | |
        h3. OrderStatisticsResponse
        ||Field Name||Required||Type||Description||
         |total | |Long |total amount sold |
 |last24h | |Long |total sold in last 24 hours |
 |saleVelocityPerSeconds | |Double |decimal average sales per second |
        h3. SecurityAnswer
        ||Field Name||Required||Type||Description||
         |id | |Integer |A number giver by Mojang to reply a question |
        h3. SecurityAnswerId
        ||Field Name||Required||Type||Description||
         |id | |Integer |A number giver by Mojang to reply a question |
        h3. SecurityChallenge
        ||Field Name||Required||Type||Description||
         |question | |SecurityQuestion | |
 |answer | |SecurityAnswerId | |
        h3. SecurityQuestion
        ||Field Name||Required||Type||Description||
         |id | |Integer |The possible IDs are these:   1  What is your favorite pet&#39;s name?   2  What is your favorite movie?   3  What is your favorite author&#39;s last name?   4  What is your favorite artist&#39;s last name?   5  What is your favorite actor&#39;s last name?   6  What is your favorite activity?   7  What is your favorite restaurant?   8  What is the name of your favorite cartoon?   9  What is the name of the first school you attended?   10 What is the last name of your favorite teacher?   11 What is your best friend&#39;s first name?   12 What is your favorite cousin&#39;s name?   13 What was the first name of your first girl/boyfriend?   14 What was the name of your first stuffed animal?   15 What is your mother&#39;s middle name?   16 What is your father&#39;s middle name?   17 What is your oldest sibling&#39;s middle name?   18 In what city did your parents meet?   19 In what hospital were you born?   20 What is your favorite team?   21 How old were you when you got your first computer?   22 How old were you when you got your first gaming console?   23 What was your first video game?   24 What is your favorite card game?   25 What is your favorite board game?   26 What was your first gaming console?   27 What was the first book you ever read?   28 Where did you go on your first holiday?   29 In what city does your grandmother live?   30 In what city does your grandfather live?   31 What is your grandmother&#39;s first name?   32 What is your grandfather&#39;s first name?   33 What is your least favorite food?   34 What is your favorite ice cream flavor?   35 What is your favorite ice cream flavor?   36 What is your favorite place to visit?   37 What is your dream job?   38 What color was your first pet?   39 What is your lucky number? |
 |question | |String |The question itself |
        h3. SkinModel
        ||Field Name||Required||Type||Description||
                h3. UploadSkinRequest
        ||Field Name||Required||Type||Description||
         |model | |SkinModel | |
 |file | |File |The skin image in PNG format |
