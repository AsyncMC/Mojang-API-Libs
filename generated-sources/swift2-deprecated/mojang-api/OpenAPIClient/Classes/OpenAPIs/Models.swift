// Models.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public enum ErrorResponse : ErrorType {
    case Error(Int, NSData?, ErrorType)
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for case let (key, value) as (String, String) in rawHeader {
            header[key] = value
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe OpenAPI spec file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.locale = NSLocale(localeIdentifier:"en_US_POSIX")
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            }

            // Decoder for ISOFullDate
            Decoders.addDecoder(clazz: ISOFullDate.self, decoder: { (source: AnyObject) -> ISOFullDate in
                if let string = source as? String,
                   let isoDate = ISOFullDate.from(string: string) {
                    return isoDate
                }
                fatalError("formatter failed to parse \(source)")
            }) 

            // Decoder for [CurrentPlayerIDs]
            Decoders.addDecoder(clazz: [CurrentPlayerIDs].self) { (source: AnyObject) -> [CurrentPlayerIDs] in
                return Decoders.decode(clazz: [CurrentPlayerIDs].self, source: source)
            }
            // Decoder for CurrentPlayerIDs
            Decoders.addDecoder(clazz: CurrentPlayerIDs.self) { (source: AnyObject) -> CurrentPlayerIDs in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CurrentPlayerIDs()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.legacy = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["legacy"])
                instance.demo = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["demo"])
                return instance
            }


            // Decoder for [Error]
            Decoders.addDecoder(clazz: [Error].self) { (source: AnyObject) -> [Error] in
                return Decoders.decode(clazz: [Error].self, source: source)
            }
            // Decoder for Error
            Decoders.addDecoder(clazz: Error.self) { (source: AnyObject) -> Error in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Error()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                instance.errorMessage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["errorMessage"])
                return instance
            }


            // Decoder for [InlineObject]
            Decoders.addDecoder(clazz: [InlineObject].self) { (source: AnyObject) -> [InlineObject] in
                return Decoders.decode(clazz: [InlineObject].self, source: source)
            }
            // Decoder for InlineObject
            Decoders.addDecoder(clazz: InlineObject.self) { (source: AnyObject) -> InlineObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineObject()
                instance.model = Decoders.decodeOptional(clazz: SkinModel.self, source: sourceDictionary["model"])
                instance.file = Decoders.decodeOptional(clazz: NSURL.self, source: sourceDictionary["file"])
                return instance
            }


            // Decoder for [InlineObject1]
            Decoders.addDecoder(clazz: [InlineObject1].self) { (source: AnyObject) -> [InlineObject1] in
                return Decoders.decode(clazz: [InlineObject1].self, source: source)
            }
            // Decoder for InlineObject1
            Decoders.addDecoder(clazz: InlineObject1.self) { (source: AnyObject) -> InlineObject1 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineObject1()
                instance.model = Decoders.decodeOptional(clazz: SkinModel.self, source: sourceDictionary["model"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                return instance
            }


            // Decoder for [NameChange]
            Decoders.addDecoder(clazz: [NameChange].self) { (source: AnyObject) -> [NameChange] in
                return Decoders.decode(clazz: [NameChange].self, source: source)
            }
            // Decoder for NameChange
            Decoders.addDecoder(clazz: NameChange.self) { (source: AnyObject) -> NameChange in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NameChange()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.changedToAt = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["changedToAt"])
                return instance
            }


            // Decoder for [OrderStatistic]
            Decoders.addDecoder(clazz: [OrderStatistic].self) { (source: AnyObject) -> [OrderStatistic] in
                return Decoders.decode(clazz: [OrderStatistic].self, source: source)
            }
            // Decoder for OrderStatistic
            Decoders.addDecoder(clazz: OrderStatistic.self) { (source: AnyObject) -> OrderStatistic in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrderStatistic()
                return instance
            }


            // Decoder for [OrderStatisticsRequest]
            Decoders.addDecoder(clazz: [OrderStatisticsRequest].self) { (source: AnyObject) -> [OrderStatisticsRequest] in
                return Decoders.decode(clazz: [OrderStatisticsRequest].self, source: source)
            }
            // Decoder for OrderStatisticsRequest
            Decoders.addDecoder(clazz: OrderStatisticsRequest.self) { (source: AnyObject) -> OrderStatisticsRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrderStatisticsRequest()
                instance.metricKeys = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["metricKeys"])
                return instance
            }


            // Decoder for [OrderStatisticsResponse]
            Decoders.addDecoder(clazz: [OrderStatisticsResponse].self) { (source: AnyObject) -> [OrderStatisticsResponse] in
                return Decoders.decode(clazz: [OrderStatisticsResponse].self, source: source)
            }
            // Decoder for OrderStatisticsResponse
            Decoders.addDecoder(clazz: OrderStatisticsResponse.self) { (source: AnyObject) -> OrderStatisticsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OrderStatisticsResponse()
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.last24h = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["last24h"])
                instance.saleVelocityPerSeconds = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["saleVelocityPerSeconds"])
                return instance
            }


            // Decoder for [SecurityAnswer]
            Decoders.addDecoder(clazz: [SecurityAnswer].self) { (source: AnyObject) -> [SecurityAnswer] in
                return Decoders.decode(clazz: [SecurityAnswer].self, source: source)
            }
            // Decoder for SecurityAnswer
            Decoders.addDecoder(clazz: SecurityAnswer.self) { (source: AnyObject) -> SecurityAnswer in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SecurityAnswer()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                return instance
            }


            // Decoder for [SecurityAnswerId]
            Decoders.addDecoder(clazz: [SecurityAnswerId].self) { (source: AnyObject) -> [SecurityAnswerId] in
                return Decoders.decode(clazz: [SecurityAnswerId].self, source: source)
            }
            // Decoder for SecurityAnswerId
            Decoders.addDecoder(clazz: SecurityAnswerId.self) { (source: AnyObject) -> SecurityAnswerId in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SecurityAnswerId()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                return instance
            }


            // Decoder for [SecurityChallenge]
            Decoders.addDecoder(clazz: [SecurityChallenge].self) { (source: AnyObject) -> [SecurityChallenge] in
                return Decoders.decode(clazz: [SecurityChallenge].self, source: source)
            }
            // Decoder for SecurityChallenge
            Decoders.addDecoder(clazz: SecurityChallenge.self) { (source: AnyObject) -> SecurityChallenge in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SecurityChallenge()
                instance.question = Decoders.decodeOptional(clazz: SecurityQuestion.self, source: sourceDictionary["question"])
                instance.answer = Decoders.decodeOptional(clazz: SecurityAnswerId.self, source: sourceDictionary["answer"])
                return instance
            }


            // Decoder for [SecurityQuestion]
            Decoders.addDecoder(clazz: [SecurityQuestion].self) { (source: AnyObject) -> [SecurityQuestion] in
                return Decoders.decode(clazz: [SecurityQuestion].self, source: source)
            }
            // Decoder for SecurityQuestion
            Decoders.addDecoder(clazz: SecurityQuestion.self) { (source: AnyObject) -> SecurityQuestion in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SecurityQuestion()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.question = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["question"])
                return instance
            }


            // Decoder for [SkinModel]
            Decoders.addDecoder(clazz: [SkinModel].self) { (source: AnyObject) -> [SkinModel] in
                return Decoders.decode(clazz: [SkinModel].self, source: source)
            }
            // Decoder for SkinModel
            Decoders.addDecoder(clazz: SkinModel.self) { (source: AnyObject) -> SkinModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SkinModel()
                return instance
            }
        }
    }
}
