//
// SecurityQuestionAnswerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Alamofire



public class SecurityQuestionAnswerAPI: APIBase {
    /**
     Check if security questions are needed
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func checkSecurityStatus(completion: ((error: ErrorType?) -> Void)) {
        checkSecurityStatusWithRequestBuilder().execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Check if security questions are needed
     - GET /user/security/location     - BASIC:
       - type: http
       - name: PlayerAccessToken

     - returns: RequestBuilder<Void> 
     */
    public class func checkSecurityStatusWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/user/security/location"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get list of questions
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listPendingSecurityQuestions(completion: ((data: [SecurityChallenge]?, error: ErrorType?) -> Void)) {
        listPendingSecurityQuestionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get list of questions
     - GET /user/security/challenges     - BASIC:
       - type: http
       - name: PlayerAccessToken
     - examples: [{contentType=application/json, example={
  "question" : {
    "question" : "What is your dream job?",
    "id" : 37
  },
  "answer" : {
    "id" : 593
  }
}, statusCode=200}]

     - returns: RequestBuilder<[SecurityChallenge]> 
     */
    public class func listPendingSecurityQuestionsWithRequestBuilder() -> RequestBuilder<[SecurityChallenge]> {
        let path = "/user/security/challenges"
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[SecurityChallenge]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Send back the answers
     
     - parameter securityAnswer: (body) An array with all the answers 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func sendSecurityQuestionAnswers(securityAnswer securityAnswer: [SecurityAnswer], completion: ((error: ErrorType?) -> Void)) {
        sendSecurityQuestionAnswersWithRequestBuilder(securityAnswer: securityAnswer).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Send back the answers
     - POST /user/security/location     - BASIC:
       - type: http
       - name: PlayerAccessToken
     - parameter securityAnswer: (body) An array with all the answers 

     - returns: RequestBuilder<Void> 
     */
    public class func sendSecurityQuestionAnswersWithRequestBuilder(securityAnswer securityAnswer: [SecurityAnswer]) -> RequestBuilder<Void> {
        let path = "/user/security/location"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = securityAnswer.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
