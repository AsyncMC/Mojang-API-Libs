//
// SkinOperationsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Alamofire



public class SkinOperationsAPI: APIBase {
    /**
     Changes the player skin by URL
     
     - parameter strippedUuid: (path) The player UUID without hyphens 
     - parameter url: (form) The URL which Mojang servers will download and apply the skin 
     - parameter model: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func changePlayerSkin(strippedUuid strippedUuid: String, url: String, model: SkinModel? = nil, completion: ((error: ErrorType?) -> Void)) {
        changePlayerSkinWithRequestBuilder(strippedUuid: strippedUuid, url: url, model: model).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Changes the player skin by URL
     - POST /user/profile/{strippedUuid}/skin
     - This will set the skin for the selected profile, but Mojang's servers will fetch the skin from a URL. This will also work for legacy accounts.     - BASIC:
       - type: http
       - name: PlayerAccessToken
     - parameter strippedUuid: (path) The player UUID without hyphens 
     - parameter url: (form) The URL which Mojang servers will download and apply the skin 
     - parameter model: (form)  (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func changePlayerSkinWithRequestBuilder(strippedUuid strippedUuid: String, url: String, model: SkinModel? = nil) -> RequestBuilder<Void> {
        var path = "/user/profile/{strippedUuid}/skin"
        path = path.stringByReplacingOccurrencesOfString("{stripped_uuid}", withString: "\(strippedUuid)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "model": model,
            "url": url
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Resets the player skin to default
     
     - parameter strippedUuid: (path) The player UUID without hyphens 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func resetPlayerSkin(strippedUuid strippedUuid: String, completion: ((error: ErrorType?) -> Void)) {
        resetPlayerSkinWithRequestBuilder(strippedUuid: strippedUuid).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Resets the player skin to default
     - DELETE /user/profile/{strippedUuid}/skin     - BASIC:
       - type: http
       - name: PlayerAccessToken
     - parameter strippedUuid: (path) The player UUID without hyphens 

     - returns: RequestBuilder<Void> 
     */
    public class func resetPlayerSkinWithRequestBuilder(strippedUuid strippedUuid: String) -> RequestBuilder<Void> {
        var path = "/user/profile/{strippedUuid}/skin"
        path = path.stringByReplacingOccurrencesOfString("{stripped_uuid}", withString: "\(strippedUuid)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Changes the player skin by upload
     
     - parameter strippedUuid: (path) The player UUID without hyphens 
     - parameter file: (form) The skin image in PNG format 
     - parameter model: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func uploadPlayerSkin(strippedUuid strippedUuid: String, file: NSURL, model: SkinModel? = nil, completion: ((error: ErrorType?) -> Void)) {
        uploadPlayerSkinWithRequestBuilder(strippedUuid: strippedUuid, file: file, model: model).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Changes the player skin by upload
     - PUT /user/profile/{strippedUuid}/skin
     - This uploads a skin to Mojang's servers. It also sets the users skin. This works on legacy counts as well.     - BASIC:
       - type: http
       - name: PlayerAccessToken
     - parameter strippedUuid: (path) The player UUID without hyphens 
     - parameter file: (form) The skin image in PNG format 
     - parameter model: (form)  (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func uploadPlayerSkinWithRequestBuilder(strippedUuid strippedUuid: String, file: NSURL, model: SkinModel? = nil) -> RequestBuilder<Void> {
        var path = "/user/profile/{strippedUuid}/skin"
        path = path.stringByReplacingOccurrencesOfString("{stripped_uuid}", withString: "\(strippedUuid)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "model": model,
            "file": file
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
