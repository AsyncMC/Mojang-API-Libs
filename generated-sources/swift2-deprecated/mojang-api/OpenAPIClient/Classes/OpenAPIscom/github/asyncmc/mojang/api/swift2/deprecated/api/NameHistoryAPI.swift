//
// NameHistoryAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Alamofire



public class NameHistoryAPI: APIBase {
    /**
     Find the current UUID of multiple players at once
     
     - parameter requestBody: (body) Array with the player names 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func findUniqueIdsByName(requestBody requestBody: [String], completion: ((data: [CurrentPlayerIDs]?, error: ErrorType?) -> Void)) {
        findUniqueIdsByNameWithRequestBuilder(requestBody: requestBody).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Find the current UUID of multiple players at once
     - POST /profiles/minecraft
     - Find the current players name, UUID, demo status and migration flag by the current players name. The \"at\" parameter is not supported. Players not found are not returned. If no players are found, an empty array is returned.     - examples: [{contentType=application/json, example={
  "legacy" : false,
  "name" : "Alonelord",
  "id" : "38ba542eb5924231a54cca0f2eac2b54",
  "demo" : false
}, statusCode=200}]
     - parameter requestBody: (body) Array with the player names 

     - returns: RequestBuilder<[CurrentPlayerIDs]> 
     */
    public class func findUniqueIdsByNameWithRequestBuilder(requestBody requestBody: [String]) -> RequestBuilder<[CurrentPlayerIDs]> {
        let path = "/profiles/minecraft"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = requestBody.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[CurrentPlayerIDs]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Gets the full player's name history
     
     - parameter strippedUuid: (path) The player UUID without hyphens 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getNameHistory(strippedUuid strippedUuid: String, completion: ((data: [NameChange]?, error: ErrorType?) -> Void)) {
        getNameHistoryWithRequestBuilder(strippedUuid: strippedUuid).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Gets the full player's name history
     - GET /user/profiles/{strippedUuid}/names     - parameter strippedUuid: (path) The player UUID without hyphens 

     - returns: RequestBuilder<[NameChange]> 
     */
    public class func getNameHistoryWithRequestBuilder(strippedUuid strippedUuid: String) -> RequestBuilder<[NameChange]> {
        var path = "/user/profiles/{strippedUuid}/names"
        path = path.stringByReplacingOccurrencesOfString("{stripped_uuid}", withString: "\(strippedUuid)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[NameChange]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Find the UUID by name
     
     - parameter username: (path) The username in a given time, or in present if \&quot;at\&quot; is not sent 
     - parameter at: (query) Find the username in a given time, when 0 selects the original name however, it only works if the name was changed at least once, or if the account is legacy. The time is an UNIX timestamp (without milliseconds) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUniqueIdByName(username username: String, at: Int64? = nil, completion: ((data: CurrentPlayerIDs?, error: ErrorType?) -> Void)) {
        getUniqueIdByNameWithRequestBuilder(username: username, at: at).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Find the UUID by name
     - GET /users/profiles/minecraft/{username}
     - Find the current player name, UUID, demo status and migration flag by the current player name or at a given time.     - examples: [{contentType=application/json, example={
  "legacy" : false,
  "name" : "Alonelord",
  "id" : "38ba542eb5924231a54cca0f2eac2b54",
  "demo" : false
}, statusCode=200}]
     - parameter username: (path) The username in a given time, or in present if \&quot;at\&quot; is not sent 
     - parameter at: (query) Find the username in a given time, when 0 selects the original name however, it only works if the name was changed at least once, or if the account is legacy. The time is an UNIX timestamp (without milliseconds) (optional)

     - returns: RequestBuilder<CurrentPlayerIDs> 
     */
    public class func getUniqueIdByNameWithRequestBuilder(username username: String, at: Int64? = nil) -> RequestBuilder<CurrentPlayerIDs> {
        var path = "/users/profiles/minecraft/{username}"
        path = path.stringByReplacingOccurrencesOfString("{username}", withString: "\(username)", options: .LiteralSearch, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "at": at?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CurrentPlayerIDs>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
