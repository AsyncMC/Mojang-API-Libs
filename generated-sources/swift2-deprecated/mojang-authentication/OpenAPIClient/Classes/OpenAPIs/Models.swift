// Models.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public enum ErrorResponse : ErrorType {
    case Error(Int, NSData?, ErrorType)
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for case let (key, value) as (String, String) in rawHeader {
            header[key] = value
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe OpenAPI spec file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.locale = NSLocale(localeIdentifier:"en_US_POSIX")
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            }

            // Decoder for ISOFullDate
            Decoders.addDecoder(clazz: ISOFullDate.self, decoder: { (source: AnyObject) -> ISOFullDate in
                if let string = source as? String,
                   let isoDate = ISOFullDate.from(string: string) {
                    return isoDate
                }
                fatalError("formatter failed to parse \(source)")
            }) 

            // Decoder for [AccessKeys]
            Decoders.addDecoder(clazz: [AccessKeys].self) { (source: AnyObject) -> [AccessKeys] in
                return Decoders.decode(clazz: [AccessKeys].self, source: source)
            }
            // Decoder for AccessKeys
            Decoders.addDecoder(clazz: AccessKeys.self) { (source: AnyObject) -> AccessKeys in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AccessKeys()
                instance.accessToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accessToken"])
                instance.clientToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["clientToken"])
                return instance
            }


            // Decoder for [Agent]
            Decoders.addDecoder(clazz: [Agent].self) { (source: AnyObject) -> [Agent] in
                return Decoders.decode(clazz: [Agent].self, source: source)
            }
            // Decoder for Agent
            Decoders.addDecoder(clazz: Agent.self) { (source: AnyObject) -> Agent in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Agent()
                instance.name = Agent.Name(rawValue: (sourceDictionary["name"] as? String) ?? "") 
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                return instance
            }


            // Decoder for [Authentication]
            Decoders.addDecoder(clazz: [Authentication].self) { (source: AnyObject) -> [Authentication] in
                return Decoders.decode(clazz: [Authentication].self, source: source)
            }
            // Decoder for Authentication
            Decoders.addDecoder(clazz: Authentication.self) { (source: AnyObject) -> Authentication in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Authentication()
                instance.accessToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accessToken"])
                instance.clientToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["clientToken"])
                return instance
            }


            // Decoder for [AuthenticationRequest]
            Decoders.addDecoder(clazz: [AuthenticationRequest].self) { (source: AnyObject) -> [AuthenticationRequest] in
                return Decoders.decode(clazz: [AuthenticationRequest].self, source: source)
            }
            // Decoder for AuthenticationRequest
            Decoders.addDecoder(clazz: AuthenticationRequest.self) { (source: AnyObject) -> AuthenticationRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AuthenticationRequest()
                instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"])
                instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"])
                return instance
            }


            // Decoder for [Error]
            Decoders.addDecoder(clazz: [Error].self) { (source: AnyObject) -> [Error] in
                return Decoders.decode(clazz: [Error].self, source: source)
            }
            // Decoder for Error
            Decoders.addDecoder(clazz: Error.self) { (source: AnyObject) -> Error in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Error()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                instance.errorMessage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["errorMessage"])
                return instance
            }


            // Decoder for [GameProfile]
            Decoders.addDecoder(clazz: [GameProfile].self) { (source: AnyObject) -> [GameProfile] in
                return Decoders.decode(clazz: [GameProfile].self, source: source)
            }
            // Decoder for GameProfile
            Decoders.addDecoder(clazz: GameProfile.self) { (source: AnyObject) -> GameProfile in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GameProfile()
                instance.agent = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["agent"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.userId = Decoders.decodeOptional(clazz: NSURL.self, source: sourceDictionary["userId"])
                instance.createdAt = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["createdAt"])
                instance.legacyProfile = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["legacyProfile"])
                instance.suspended = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["suspended"])
                instance.paid = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["paid"])
                instance.migrated = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["migrated"])
                instance.legacy = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["legacy"])
                return instance
            }


            // Decoder for [GameProfileProperty]
            Decoders.addDecoder(clazz: [GameProfileProperty].self) { (source: AnyObject) -> [GameProfileProperty] in
                return Decoders.decode(clazz: [GameProfileProperty].self, source: source)
            }
            // Decoder for GameProfileProperty
            Decoders.addDecoder(clazz: GameProfileProperty.self) { (source: AnyObject) -> GameProfileProperty in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GameProfileProperty()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                return instance
            }


            // Decoder for [PrivateUserData]
            Decoders.addDecoder(clazz: [PrivateUserData].self) { (source: AnyObject) -> [PrivateUserData] in
                return Decoders.decode(clazz: [PrivateUserData].self, source: source)
            }
            // Decoder for PrivateUserData
            Decoders.addDecoder(clazz: PrivateUserData.self) { (source: AnyObject) -> PrivateUserData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PrivateUserData()
                instance.id = Decoders.decodeOptional(clazz: NSURL.self, source: sourceDictionary["id"])
                instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ProfileId]
            Decoders.addDecoder(clazz: [ProfileId].self) { (source: AnyObject) -> [ProfileId] in
                return Decoders.decode(clazz: [ProfileId].self, source: source)
            }
            // Decoder for ProfileId
            Decoders.addDecoder(clazz: ProfileId.self) { (source: AnyObject) -> ProfileId in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProfileId()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [ReducedUserData]
            Decoders.addDecoder(clazz: [ReducedUserData].self) { (source: AnyObject) -> [ReducedUserData] in
                return Decoders.decode(clazz: [ReducedUserData].self, source: source)
            }
            // Decoder for ReducedUserData
            Decoders.addDecoder(clazz: ReducedUserData.self) { (source: AnyObject) -> ReducedUserData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ReducedUserData()
                instance.id = Decoders.decodeOptional(clazz: NSURL.self, source: sourceDictionary["id"])
                instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [RefreshRequest]
            Decoders.addDecoder(clazz: [RefreshRequest].self) { (source: AnyObject) -> [RefreshRequest] in
                return Decoders.decode(clazz: [RefreshRequest].self, source: source)
            }
            // Decoder for RefreshRequest
            Decoders.addDecoder(clazz: RefreshRequest.self) { (source: AnyObject) -> RefreshRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RefreshRequest()
                instance.accessToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accessToken"])
                instance.clientToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["clientToken"])
                return instance
            }


            // Decoder for [RefreshResponse]
            Decoders.addDecoder(clazz: [RefreshResponse].self) { (source: AnyObject) -> [RefreshResponse] in
                return Decoders.decode(clazz: [RefreshResponse].self, source: source)
            }
            // Decoder for RefreshResponse
            Decoders.addDecoder(clazz: RefreshResponse.self) { (source: AnyObject) -> RefreshResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RefreshResponse()
                instance.accessToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accessToken"])
                instance.clientToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["clientToken"])
                return instance
            }


            // Decoder for [UsernamePassword]
            Decoders.addDecoder(clazz: [UsernamePassword].self) { (source: AnyObject) -> [UsernamePassword] in
                return Decoders.decode(clazz: [UsernamePassword].self, source: source)
            }
            // Decoder for UsernamePassword
            Decoders.addDecoder(clazz: UsernamePassword.self) { (source: AnyObject) -> UsernamePassword in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UsernamePassword()
                instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"])
                instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"])
                return instance
            }
        }
    }
}
