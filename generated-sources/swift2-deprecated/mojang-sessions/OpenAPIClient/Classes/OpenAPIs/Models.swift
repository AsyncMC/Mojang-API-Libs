// Models.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public enum ErrorResponse : ErrorType {
    case Error(Int, NSData?, ErrorType)
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for case let (key, value) as (String, String) in rawHeader {
            header[key] = value
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe OpenAPI spec file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.locale = NSLocale(localeIdentifier:"en_US_POSIX")
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            }

            // Decoder for ISOFullDate
            Decoders.addDecoder(clazz: ISOFullDate.self, decoder: { (source: AnyObject) -> ISOFullDate in
                if let string = source as? String,
                   let isoDate = ISOFullDate.from(string: string) {
                    return isoDate
                }
                fatalError("formatter failed to parse \(source)")
            }) 

            // Decoder for [PlayerProfile]
            Decoders.addDecoder(clazz: [PlayerProfile].self) { (source: AnyObject) -> [PlayerProfile] in
                return Decoders.decode(clazz: [PlayerProfile].self, source: source)
            }
            // Decoder for PlayerProfile
            Decoders.addDecoder(clazz: PlayerProfile.self) { (source: AnyObject) -> PlayerProfile in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PlayerProfile()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.legacy = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["legacy"])
                instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [PlayerProfileProperty]
            Decoders.addDecoder(clazz: [PlayerProfileProperty].self) { (source: AnyObject) -> [PlayerProfileProperty] in
                return Decoders.decode(clazz: [PlayerProfileProperty].self, source: source)
            }
            // Decoder for PlayerProfileProperty
            Decoders.addDecoder(clazz: PlayerProfileProperty.self) { (source: AnyObject) -> PlayerProfileProperty in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PlayerProfileProperty()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.value = Decoders.decodeOptional(clazz: NSData.self, source: sourceDictionary["value"])
                instance.signature = Decoders.decodeOptional(clazz: NSData.self, source: sourceDictionary["signature"])
                return instance
            }


            // Decoder for [PlayerProfileTexturePropertyValue]
            Decoders.addDecoder(clazz: [PlayerProfileTexturePropertyValue].self) { (source: AnyObject) -> [PlayerProfileTexturePropertyValue] in
                return Decoders.decode(clazz: [PlayerProfileTexturePropertyValue].self, source: source)
            }
            // Decoder for PlayerProfileTexturePropertyValue
            Decoders.addDecoder(clazz: PlayerProfileTexturePropertyValue.self) { (source: AnyObject) -> PlayerProfileTexturePropertyValue in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PlayerProfileTexturePropertyValue()
                instance.timestamp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["timestamp"])
                instance.profileId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["profileId"])
                instance.profileName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["profileName"])
                instance.signatureRequired = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["signatureRequired"])
                instance.textures = Decoders.decodeOptional(clazz: PlayerTexture.self, source: sourceDictionary["textures"])
                return instance
            }


            // Decoder for [PlayerSkinMetadata]
            Decoders.addDecoder(clazz: [PlayerSkinMetadata].self) { (source: AnyObject) -> [PlayerSkinMetadata] in
                return Decoders.decode(clazz: [PlayerSkinMetadata].self, source: source)
            }
            // Decoder for PlayerSkinMetadata
            Decoders.addDecoder(clazz: PlayerSkinMetadata.self) { (source: AnyObject) -> PlayerSkinMetadata in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PlayerSkinMetadata()
                instance.model = PlayerSkinMetadata.Model(rawValue: (sourceDictionary["model"] as? String) ?? "") 
                return instance
            }


            // Decoder for [PlayerSkinURL]
            Decoders.addDecoder(clazz: [PlayerSkinURL].self) { (source: AnyObject) -> [PlayerSkinURL] in
                return Decoders.decode(clazz: [PlayerSkinURL].self, source: source)
            }
            // Decoder for PlayerSkinURL
            Decoders.addDecoder(clazz: PlayerSkinURL.self) { (source: AnyObject) -> PlayerSkinURL in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PlayerSkinURL()
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                return instance
            }


            // Decoder for [PlayerTexture]
            Decoders.addDecoder(clazz: [PlayerTexture].self) { (source: AnyObject) -> [PlayerTexture] in
                return Decoders.decode(clazz: [PlayerTexture].self, source: source)
            }
            // Decoder for PlayerTexture
            Decoders.addDecoder(clazz: PlayerTexture.self) { (source: AnyObject) -> PlayerTexture in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PlayerTexture()
                instance.SKIN = Decoders.decodeOptional(clazz: PlayerSkinURL.self, source: sourceDictionary["SKIN"])
                instance.CAPE = Decoders.decodeOptional(clazz: PlayerTextureURL.self, source: sourceDictionary["CAPE"])
                return instance
            }


            // Decoder for [PlayerTextureURL]
            Decoders.addDecoder(clazz: [PlayerTextureURL].self) { (source: AnyObject) -> [PlayerTextureURL] in
                return Decoders.decode(clazz: [PlayerTextureURL].self, source: source)
            }
            // Decoder for PlayerTextureURL
            Decoders.addDecoder(clazz: PlayerTextureURL.self) { (source: AnyObject) -> PlayerTextureURL in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PlayerTextureURL()
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                return instance
            }


            // Decoder for [SessionApiError]
            Decoders.addDecoder(clazz: [SessionApiError].self) { (source: AnyObject) -> [SessionApiError] in
                return Decoders.decode(clazz: [SessionApiError].self, source: source)
            }
            // Decoder for SessionApiError
            Decoders.addDecoder(clazz: SessionApiError.self) { (source: AnyObject) -> SessionApiError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SessionApiError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                instance.path = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["path"])
                return instance
            }
        }
    }
}
