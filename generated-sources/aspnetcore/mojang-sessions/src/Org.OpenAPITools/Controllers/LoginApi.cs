/*
 * Mojang Session API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class LoginApiController : ControllerBase
    { 
        /// <summary>
        /// Gets the player&#39;s game profile
        /// </summary>
        /// <remarks>This will return the player&#39;s username plus any additional information about them (e.g. skins). This has a much stricter rate limit: You can request the same profile once per minute, however you can send as many unique requests as you like.</remarks>
        /// <param name="strippedUuid">The player UUID without hyphens</param>
        /// <param name="unsigned">When set to false, the signature data are sent</param>
        /// <response code="200">The player profile and all properties</response>
        /// <response code="400">UUID is invalid</response>
        [HttpGet]
        [Route("/session/minecraft/profile/{stripped_uuid}")]
        [ValidateModelState]
        [SwaggerOperation("GetPlayerProfile")]
        [SwaggerResponse(statusCode: 200, type: typeof(PlayerProfile), description: "The player profile and all properties")]
        [SwaggerResponse(statusCode: 400, type: typeof(SessionApiError), description: "UUID is invalid")]
        public virtual IActionResult GetPlayerProfile([FromRoute][Required]string strippedUuid, [FromQuery]bool? unsigned)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PlayerProfile));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(SessionApiError));

            string exampleJson = null;
            exampleJson = "{\r\n  \"legacy\" : false,\r\n  \"name\" : \"jeb_\",\r\n  \"id\" : \"853c80ef3c3749fdaa49938b674adae6\",\r\n  \"properties\" : [ {\r\n    \"signature\" : \"signature\",\r\n    \"name\" : \"textures\",\r\n    \"value\" : \"value\"\r\n  }, {\r\n    \"signature\" : \"signature\",\r\n    \"name\" : \"textures\",\r\n    \"value\" : \"value\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PlayerProfile>(exampleJson)
            : default(PlayerProfile);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
