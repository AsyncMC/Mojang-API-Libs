/*
 * Mojang Session API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// This is obtained by decoding the \&quot;textures\&quot; property
    /// </summary>
    [DataContract]
    public partial class PlayerProfileTexturePropertyValue : IEquatable<PlayerProfileTexturePropertyValue>
    { 
        /// <summary>
        /// UNIX timestamp in milliseconds
        /// </summary>
        /// <value>UNIX timestamp in milliseconds</value>
        [Required]
        [DataMember(Name="timestamp")]
        public long? Timestamp { get; set; }

        /// <summary>
        /// The player UUID without hyphens
        /// </summary>
        /// <value>The player UUID without hyphens</value>
        [Required]
        [DataMember(Name="profileId")]
        public string ProfileId { get; set; }

        /// <summary>
        /// The player&#39;s name
        /// </summary>
        /// <value>The player&#39;s name</value>
        [Required]
        [DataMember(Name="profileName")]
        public string ProfileName { get; set; }

        /// <summary>
        /// Only present if unsigned was set to false in the request
        /// </summary>
        /// <value>Only present if unsigned was set to false in the request</value>
        [DataMember(Name="signatureRequired")]
        public bool? SignatureRequired { get; set; }

        /// <summary>
        /// Gets or Sets Textures
        /// </summary>
        [DataMember(Name="textures")]
        public PlayerTexture Textures { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlayerProfileTexturePropertyValue {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  ProfileId: ").Append(ProfileId).Append("\n");
            sb.Append("  ProfileName: ").Append(ProfileName).Append("\n");
            sb.Append("  SignatureRequired: ").Append(SignatureRequired).Append("\n");
            sb.Append("  Textures: ").Append(Textures).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PlayerProfileTexturePropertyValue)obj);
        }

        /// <summary>
        /// Returns true if PlayerProfileTexturePropertyValue instances are equal
        /// </summary>
        /// <param name="other">Instance of PlayerProfileTexturePropertyValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlayerProfileTexturePropertyValue other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    ProfileId == other.ProfileId ||
                    ProfileId != null &&
                    ProfileId.Equals(other.ProfileId)
                ) && 
                (
                    ProfileName == other.ProfileName ||
                    ProfileName != null &&
                    ProfileName.Equals(other.ProfileName)
                ) && 
                (
                    SignatureRequired == other.SignatureRequired ||
                    SignatureRequired != null &&
                    SignatureRequired.Equals(other.SignatureRequired)
                ) && 
                (
                    Textures == other.Textures ||
                    Textures != null &&
                    Textures.Equals(other.Textures)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                    if (ProfileId != null)
                    hashCode = hashCode * 59 + ProfileId.GetHashCode();
                    if (ProfileName != null)
                    hashCode = hashCode * 59 + ProfileName.GetHashCode();
                    if (SignatureRequired != null)
                    hashCode = hashCode * 59 + SignatureRequired.GetHashCode();
                    if (Textures != null)
                    hashCode = hashCode * 59 + Textures.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PlayerProfileTexturePropertyValue left, PlayerProfileTexturePropertyValue right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PlayerProfileTexturePropertyValue left, PlayerProfileTexturePropertyValue right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
