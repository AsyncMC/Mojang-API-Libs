/*
 * Mojang Session API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Provide links to the player&#39;s skin and cape
    /// </summary>
    [DataContract]
    public partial class PlayerTexture : IEquatable<PlayerTexture>
    { 
        /// <summary>
        /// Gets or Sets SKIN
        /// </summary>
        [DataMember(Name="SKIN")]
        public PlayerSkinURL SKIN { get; set; }

        /// <summary>
        /// Gets or Sets CAPE
        /// </summary>
        [DataMember(Name="CAPE")]
        public PlayerTextureURL CAPE { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlayerTexture {\n");
            sb.Append("  SKIN: ").Append(SKIN).Append("\n");
            sb.Append("  CAPE: ").Append(CAPE).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PlayerTexture)obj);
        }

        /// <summary>
        /// Returns true if PlayerTexture instances are equal
        /// </summary>
        /// <param name="other">Instance of PlayerTexture to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlayerTexture other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SKIN == other.SKIN ||
                    SKIN != null &&
                    SKIN.Equals(other.SKIN)
                ) && 
                (
                    CAPE == other.CAPE ||
                    CAPE != null &&
                    CAPE.Equals(other.CAPE)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SKIN != null)
                    hashCode = hashCode * 59 + SKIN.GetHashCode();
                    if (CAPE != null)
                    hashCode = hashCode * 59 + CAPE.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PlayerTexture left, PlayerTexture right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PlayerTexture left, PlayerTexture right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
