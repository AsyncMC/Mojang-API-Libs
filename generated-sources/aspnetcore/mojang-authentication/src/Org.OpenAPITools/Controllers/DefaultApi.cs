/*
 * Mojang Authentication API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <param name="authenticationRequest"></param>
        /// <response code="200">Successfully authenticated</response>
        /// <response code="400">Could not authenticate</response>
        [HttpPost]
        [Route("/authenticate")]
        [ValidateModelState]
        [SwaggerOperation("Authenticate")]
        [SwaggerResponse(statusCode: 200, type: typeof(Authentication), description: "Successfully authenticated")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Could not authenticate")]
        public virtual IActionResult Authenticate([FromBody]AuthenticationRequest authenticationRequest)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Authentication));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            string exampleJson = null;
            exampleJson = "{\r\n  \"availableProfiles\" : [ {\r\n    \"createdAt\" : 0,\r\n    \"legacyProfile\" : true,\r\n    \"agent\" : \"agent\",\r\n    \"legacy\" : true,\r\n    \"name\" : \"name\",\r\n    \"paid\" : true,\r\n    \"id\" : \"id\",\r\n    \"migrated\" : true,\r\n    \"userId\" : \"\",\r\n    \"suspended\" : true\r\n  }, {\r\n    \"createdAt\" : 0,\r\n    \"legacyProfile\" : true,\r\n    \"agent\" : \"agent\",\r\n    \"legacy\" : true,\r\n    \"name\" : \"name\",\r\n    \"paid\" : true,\r\n    \"id\" : \"id\",\r\n    \"migrated\" : true,\r\n    \"userId\" : \"\",\r\n    \"suspended\" : true\r\n  } ],\r\n  \"selectedProfile\" : {\r\n    \"createdAt\" : 0,\r\n    \"legacyProfile\" : true,\r\n    \"agent\" : \"agent\",\r\n    \"legacy\" : true,\r\n    \"name\" : \"name\",\r\n    \"paid\" : true,\r\n    \"id\" : \"id\",\r\n    \"migrated\" : true,\r\n    \"userId\" : \"\",\r\n    \"suspended\" : true\r\n  },\r\n  \"user\" : {\r\n    \"registerIp\" : \"registerIp\",\r\n    \"verifiedByParent\" : true,\r\n    \"migratedAt\" : 6,\r\n    \"passwordChangedAt\" : 5,\r\n    \"legacyUser\" : true,\r\n    \"registeredAt\" : 1,\r\n    \"dateOfBirth\" : 5,\r\n    \"suspended\" : true,\r\n    \"emailVerified\" : true,\r\n    \"migratedFrom\" : \"migratedFrom\",\r\n    \"blocked\" : true,\r\n    \"migrated\" : true,\r\n    \"secured\" : true,\r\n    \"email\" : \"email\",\r\n    \"username\" : \"username\"\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Authentication>(exampleJson)
            : default(Authentication);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="accessKeys"></param>
        /// <response code="204">The token have been invalidated</response>
        /// <response code="400">Could not invalidate the token</response>
        [HttpPost]
        [Route("/invalidate")]
        [ValidateModelState]
        [SwaggerOperation("Invalidate")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Could not invalidate the token")]
        public virtual IActionResult Invalidate([FromBody]AccessKeys accessKeys)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));


            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="refreshRequest"></param>
        /// <response code="200">Session refreshed successfully. Note: The old access token gets invalidated.</response>
        /// <response code="400">Could not refresh the session</response>
        [HttpPost]
        [Route("/refresh")]
        [ValidateModelState]
        [SwaggerOperation("Refresh")]
        [SwaggerResponse(statusCode: 200, type: typeof(RefreshResponse), description: "Session refreshed successfully. Note: The old access token gets invalidated.")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Could not refresh the session")]
        public virtual IActionResult Refresh([FromBody]RefreshRequest refreshRequest)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RefreshResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            string exampleJson = null;
            exampleJson = "{\r\n  \"selectedProfile\" : {\r\n    \"name\" : \"name\",\r\n    \"id\" : \"id\"\r\n  },\r\n  \"user\" : {\r\n    \"id\" : \"\",\r\n    \"properties\" : [ {\r\n      \"name\" : \"name\",\r\n      \"value\" : \"value\"\r\n    }, {\r\n      \"name\" : \"name\",\r\n      \"value\" : \"value\"\r\n    } ]\r\n  }\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RefreshResponse>(exampleJson)
            : default(RefreshResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="usernamePassword"></param>
        /// <response code="204">All tokens have been invalidated</response>
        /// <response code="400">Invalid username/password</response>
        [HttpPost]
        [Route("/signout")]
        [ValidateModelState]
        [SwaggerOperation("Siginout")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid username/password")]
        public virtual IActionResult Siginout([FromBody]UsernamePassword usernamePassword)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));


            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="accessKeys"></param>
        /// <response code="204">The token is valid</response>
        /// <response code="403">The token is not valid</response>
        [HttpPost]
        [Route("/validate")]
        [ValidateModelState]
        [SwaggerOperation("Validate")]
        [SwaggerResponse(statusCode: 403, type: typeof(Error), description: "The token is not valid")]
        public virtual IActionResult Validate([FromBody]AccessKeys accessKeys)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Error));


            throw new NotImplementedException();
        }
    }
}
