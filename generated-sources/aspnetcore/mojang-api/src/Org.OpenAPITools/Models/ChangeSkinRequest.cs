/*
 * Mojang API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Request Mojang to download a skin from an URL and apply to the player
    /// </summary>
    [DataContract]
    public partial class ChangeSkinRequest : IEquatable<ChangeSkinRequest>
    { 
        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum SkinModel
        {
            
            /// <summary>
            /// Enum Empty for 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 1,
            
            /// <summary>
            /// Enum SlimEnum for slim
            /// </summary>
            [EnumMember(Value = "slim")]
            SlimEnum = 2
        }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name="model")]
        public SkinModel? Model { get; set; }

        /// <summary>
        /// The URL which Mojang servers will download and apply the skin
        /// </summary>
        /// <value>The URL which Mojang servers will download and apply the skin</value>
        [Required]
        [DataMember(Name="url")]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChangeSkinRequest {\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ChangeSkinRequest)obj);
        }

        /// <summary>
        /// Returns true if ChangeSkinRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ChangeSkinRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChangeSkinRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Model == other.Model ||
                    Model != null &&
                    Model.Equals(other.Model)
                ) && 
                (
                    Url == other.Url ||
                    Url != null &&
                    Url.Equals(other.Url)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Model != null)
                    hashCode = hashCode * 59 + Model.GetHashCode();
                    if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ChangeSkinRequest left, ChangeSkinRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ChangeSkinRequest left, ChangeSkinRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
