/*
 * Mojang API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class NameHistoryApiController : ControllerBase
    { 
        /// <summary>
        /// Find the current UUID of multiple players at once
        /// </summary>
        /// <remarks>Find the current players name, UUID, demo status and migration flag by the current players name. The \&quot;at\&quot; parameter is not supported. Players not found are not returned. If no players are found, an empty array is returned.</remarks>
        /// <param name="requestBody">Array with the player names</param>
        /// <response code="200">An array containing all players found</response>
        [HttpPost]
        [Route("/profiles/minecraft")]
        [ValidateModelState]
        [SwaggerOperation("FindUniqueIdsByName")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<CurrentPlayerIDs>), description: "An array containing all players found")]
        public virtual IActionResult FindUniqueIdsByName([FromBody]List<string> requestBody)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<CurrentPlayerIDs>));

            string exampleJson = null;
            exampleJson = "{\r\n  \"legacy\" : false,\r\n  \"name\" : \"Alonelord\",\r\n  \"id\" : \"38ba542eb5924231a54cca0f2eac2b54\",\r\n  \"demo\" : false\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<CurrentPlayerIDs>>(exampleJson)
            : default(List<CurrentPlayerIDs>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the full player&#39;s name history
        /// </summary>
        /// <param name="strippedUuid">The player UUID without hyphens</param>
        /// <response code="200">A list of name changes, the first entry usually don&#39;t have a change time</response>
        /// <response code="204">Username not found at the given time</response>
        [HttpGet]
        [Route("/user/profiles/{stripped_uuid}/names")]
        [ValidateModelState]
        [SwaggerOperation("GetNameHistory")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<NameChange>), description: "A list of name changes, the first entry usually don&#39;t have a change time")]
        public virtual IActionResult GetNameHistory([FromRoute][Required]string strippedUuid)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<NameChange>));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<NameChange>>(exampleJson)
            : default(List<NameChange>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Find the UUID by name
        /// </summary>
        /// <remarks>Find the current player name, UUID, demo status and migration flag by the current player name or at a given time.</remarks>
        /// <param name="username">The username in a given time, or in present if \&quot;at\&quot; is not sent</param>
        /// <param name="at">Find the username in a given time, when 0 selects the original name however, it only works if the name was changed at least once, or if the account is legacy. The time is an UNIX timestamp (without milliseconds)</param>
        /// <response code="200">The user was found</response>
        /// <response code="204">User not found</response>
        /// <response code="400">If the timestamp is invalid</response>
        [HttpGet]
        [Route("/users/profiles/minecraft/{username}")]
        [ValidateModelState]
        [SwaggerOperation("GetUniqueIdByName")]
        [SwaggerResponse(statusCode: 200, type: typeof(CurrentPlayerIDs), description: "The user was found")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "If the timestamp is invalid")]
        public virtual IActionResult GetUniqueIdByName([FromRoute][Required]string username, [FromQuery]long? at)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CurrentPlayerIDs));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            string exampleJson = null;
            exampleJson = "{\r\n  \"legacy\" : false,\r\n  \"name\" : \"Alonelord\",\r\n  \"id\" : \"38ba542eb5924231a54cca0f2eac2b54\",\r\n  \"demo\" : false\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CurrentPlayerIDs>(exampleJson)
            : default(CurrentPlayerIDs);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
