/*
 * Mojang API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class SkinOperationsApiController : ControllerBase
    { 
        /// <summary>
        /// Changes the player skin by URL
        /// </summary>
        /// <remarks>This will set the skin for the selected profile, but Mojang&#39;s servers will fetch the skin from a URL. This will also work for legacy accounts.</remarks>
        /// <param name="strippedUuid">The player UUID without hyphens</param>
        /// <param name="url">The URL which Mojang servers will download and apply the skin</param>
        /// <param name="model"></param>
        /// <response code="204">The skin has been changed. The response has no body</response>
        /// <response code="400">Upon error the server will send back a JSON with the error. (Success is a blank payload)</response>
        [HttpPost]
        [Route("/user/profile/{stripped_uuid}/skin")]
        [ValidateModelState]
        [SwaggerOperation("ChangePlayerSkin")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Upon error the server will send back a JSON with the error. (Success is a blank payload)")]
        public virtual IActionResult ChangePlayerSkin([FromRoute][Required]string strippedUuid, [FromForm][Required()]string url, [FromForm]SkinModel model)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Resets the player skin to default
        /// </summary>
        /// <param name="strippedUuid">The player UUID without hyphens</param>
        /// <response code="204">The skin has been changed. The response has no body</response>
        /// <response code="400">Upon error the server will send back a JSON with the error. (Success is a blank payload)</response>
        [HttpDelete]
        [Route("/user/profile/{stripped_uuid}/skin")]
        [ValidateModelState]
        [SwaggerOperation("ResetPlayerSkin")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Upon error the server will send back a JSON with the error. (Success is a blank payload)")]
        public virtual IActionResult ResetPlayerSkin([FromRoute][Required]string strippedUuid)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));


            throw new NotImplementedException();
        }

        /// <summary>
        /// Changes the player skin by upload
        /// </summary>
        /// <remarks>This uploads a skin to Mojang&#39;s servers. It also sets the users skin. This works on legacy counts as well.</remarks>
        /// <param name="strippedUuid">The player UUID without hyphens</param>
        /// <param name="file">The skin image in PNG format</param>
        /// <param name="model"></param>
        /// <response code="204">The skin has been changed. The response has no body</response>
        /// <response code="400">Upon error the server will send back a JSON with the error. (Success is a blank payload)</response>
        [HttpPut]
        [Route("/user/profile/{stripped_uuid}/skin")]
        [ValidateModelState]
        [SwaggerOperation("UploadPlayerSkin")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Upon error the server will send back a JSON with the error. (Success is a blank payload)")]
        public virtual IActionResult UploadPlayerSkin([FromRoute][Required]string strippedUuid, [FromForm][Required()]System.IO.Stream file, [FromForm]SkinModel model)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));


            throw new NotImplementedException();
        }
    }
}
