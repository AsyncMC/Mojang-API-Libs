/**
 * Mojang Authentication API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIDefaultApiRequest.h"

namespace OpenAPI {

OAIDefaultApiRequest::OAIDefaultApiRequest(QHttpEngine::Socket *s, OAIDefaultApiHandler* hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIDefaultApiRequest::~OAIDefaultApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIDefaultApiRequest::~OAIDefaultApiRequest()";
}

QMap<QString, QString>
OAIDefaultApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIDefaultApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIDefaultApiRequest::getRawSocket(){
    return socket;
}


void OAIDefaultApiRequest::authenticateRequest(){
    qDebug() << "/authenticate";
    connect(this, &OAIDefaultApiRequest::authenticate, handler, &OAIDefaultApiHandler::authenticate);

    
 
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIAuthenticationRequest oai_authentication_request;
    ::OpenAPI::fromJsonValue(oai_authentication_request, obj);
    

    emit authenticate(oai_authentication_request);
}


void OAIDefaultApiRequest::invalidateRequest(){
    qDebug() << "/invalidate";
    connect(this, &OAIDefaultApiRequest::invalidate, handler, &OAIDefaultApiHandler::invalidate);

    
 
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIAccessKeys oai_access_keys;
    ::OpenAPI::fromJsonValue(oai_access_keys, obj);
    

    emit invalidate(oai_access_keys);
}


void OAIDefaultApiRequest::refreshRequest(){
    qDebug() << "/refresh";
    connect(this, &OAIDefaultApiRequest::refresh, handler, &OAIDefaultApiHandler::refresh);

    
 
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIRefreshRequest oai_refresh_request;
    ::OpenAPI::fromJsonValue(oai_refresh_request, obj);
    

    emit refresh(oai_refresh_request);
}


void OAIDefaultApiRequest::siginoutRequest(){
    qDebug() << "/signout";
    connect(this, &OAIDefaultApiRequest::siginout, handler, &OAIDefaultApiHandler::siginout);

    
 
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIUsernamePassword oai_username_password;
    ::OpenAPI::fromJsonValue(oai_username_password, obj);
    

    emit siginout(oai_username_password);
}


void OAIDefaultApiRequest::validateRequest(){
    qDebug() << "/validate";
    connect(this, &OAIDefaultApiRequest::validate, handler, &OAIDefaultApiHandler::validate);

    
 
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIAccessKeys oai_access_keys;
    ::OpenAPI::fromJsonValue(oai_access_keys, obj);
    

    emit validate(oai_access_keys);
}



void OAIDefaultApiRequest::authenticateResponse(const OAIAuthentication& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDefaultApiRequest::invalidateResponse(){
    writeResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDefaultApiRequest::refreshResponse(const OAIRefreshResponse& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDefaultApiRequest::siginoutResponse(){
    writeResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDefaultApiRequest::validateResponse(){
    writeResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIDefaultApiRequest::authenticateError(const OAIAuthentication& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDefaultApiRequest::invalidateError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDefaultApiRequest::refreshError(const OAIRefreshResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDefaultApiRequest::siginoutError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDefaultApiRequest::validateError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIDefaultApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(res);  // TODO
    Q_UNUSED(error_type); // TODO
}

void OAIDefaultApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(res);  // TODO
    Q_UNUSED(error_type); // TODO
}

}
