/**
 * Mojang Session API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAILoginApiRequest.h"

namespace OpenAPI {

OAILoginApiRequest::OAILoginApiRequest(QHttpEngine::Socket *s, OAILoginApiHandler* hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAILoginApiRequest::~OAILoginApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAILoginApiRequest::~OAILoginApiRequest()";
}

QMap<QString, QString>
OAILoginApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAILoginApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAILoginApiRequest::getRawSocket(){
    return socket;
}


void OAILoginApiRequest::getPlayerProfileRequest(const QString& stripped_uuidstr){
    qDebug() << "/session/minecraft/profile/{stripped_uuid}";
    connect(this, &OAILoginApiRequest::getPlayerProfile, handler, &OAILoginApiHandler::getPlayerProfile);

    
    bool _unsigned;
    if(socket->queryString().keys().contains("_unsigned")){
        fromStringValue(socket->queryString().value("_unsigned"), _unsigned);
    }
    
    QString stripped_uuid;
    fromStringValue(stripped_uuidstr, stripped_uuid);
    

    emit getPlayerProfile(stripped_uuid, _unsigned);
}



void OAILoginApiRequest::getPlayerProfileResponse(const OAIPlayerProfile& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAILoginApiRequest::getPlayerProfileError(const OAIPlayerProfile& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAILoginApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(res);  // TODO
    Q_UNUSED(error_type); // TODO
}

void OAILoginApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(res);  // TODO
    Q_UNUSED(error_type); // TODO
}

}
