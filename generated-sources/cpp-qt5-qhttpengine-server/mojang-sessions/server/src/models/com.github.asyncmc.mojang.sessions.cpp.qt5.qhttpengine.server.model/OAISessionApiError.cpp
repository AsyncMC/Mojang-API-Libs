/**
 * Mojang Session API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAISessionApiError.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAISessionApiError::OAISessionApiError(QString json) {
    this->fromJson(json);
}

OAISessionApiError::OAISessionApiError() {
    this->init();
}

OAISessionApiError::~OAISessionApiError() {

}

void
OAISessionApiError::init() {
    m_error_isSet = false;
    m_path_isSet = false;
}

void
OAISessionApiError::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAISessionApiError::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(error, json[QString("error")]);
    
    ::OpenAPI::fromJsonValue(path, json[QString("path")]);
    
}

QString
OAISessionApiError::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAISessionApiError::asJsonObject() const {
    QJsonObject obj;
	if(m_error_isSet){
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(error));
    }
	if(m_path_isSet){
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(path));
    }
    return obj;
}

QString
OAISessionApiError::getError() const {
    return error;
}
void
OAISessionApiError::setError(const QString &error) {
    this->error = error;
    this->m_error_isSet = true;
}

QString
OAISessionApiError::getPath() const {
    return path;
}
void
OAISessionApiError::setPath(const QString &path) {
    this->path = path;
    this->m_path_isSet = true;
}


bool
OAISessionApiError::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_error_isSet){ isObjectUpdated = true; break;}
    
        if(m_path_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

