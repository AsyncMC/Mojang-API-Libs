/**
 * Mojang Session API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIPlayerProfileTexturePropertyValue.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIPlayerProfileTexturePropertyValue::OAIPlayerProfileTexturePropertyValue(QString json) {
    this->fromJson(json);
}

OAIPlayerProfileTexturePropertyValue::OAIPlayerProfileTexturePropertyValue() {
    this->init();
}

OAIPlayerProfileTexturePropertyValue::~OAIPlayerProfileTexturePropertyValue() {

}

void
OAIPlayerProfileTexturePropertyValue::init() {
    m_timestamp_isSet = false;
    m_profile_id_isSet = false;
    m_profile_name_isSet = false;
    m_signature_required_isSet = false;
    m_textures_isSet = false;
}

void
OAIPlayerProfileTexturePropertyValue::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIPlayerProfileTexturePropertyValue::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(timestamp, json[QString("timestamp")]);
    
    ::OpenAPI::fromJsonValue(profile_id, json[QString("profileId")]);
    
    ::OpenAPI::fromJsonValue(profile_name, json[QString("profileName")]);
    
    ::OpenAPI::fromJsonValue(signature_required, json[QString("signatureRequired")]);
    
    ::OpenAPI::fromJsonValue(textures, json[QString("textures")]);
    
}

QString
OAIPlayerProfileTexturePropertyValue::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIPlayerProfileTexturePropertyValue::asJsonObject() const {
    QJsonObject obj;
	if(m_timestamp_isSet){
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(timestamp));
    }
	if(m_profile_id_isSet){
        obj.insert(QString("profileId"), ::OpenAPI::toJsonValue(profile_id));
    }
	if(m_profile_name_isSet){
        obj.insert(QString("profileName"), ::OpenAPI::toJsonValue(profile_name));
    }
	if(m_signature_required_isSet){
        obj.insert(QString("signatureRequired"), ::OpenAPI::toJsonValue(signature_required));
    }
	if(textures.isSet()){
        obj.insert(QString("textures"), ::OpenAPI::toJsonValue(textures));
    }
    return obj;
}

qint64
OAIPlayerProfileTexturePropertyValue::getTimestamp() const {
    return timestamp;
}
void
OAIPlayerProfileTexturePropertyValue::setTimestamp(const qint64 &timestamp) {
    this->timestamp = timestamp;
    this->m_timestamp_isSet = true;
}

QString
OAIPlayerProfileTexturePropertyValue::getProfileId() const {
    return profile_id;
}
void
OAIPlayerProfileTexturePropertyValue::setProfileId(const QString &profile_id) {
    this->profile_id = profile_id;
    this->m_profile_id_isSet = true;
}

QString
OAIPlayerProfileTexturePropertyValue::getProfileName() const {
    return profile_name;
}
void
OAIPlayerProfileTexturePropertyValue::setProfileName(const QString &profile_name) {
    this->profile_name = profile_name;
    this->m_profile_name_isSet = true;
}

bool
OAIPlayerProfileTexturePropertyValue::isSignatureRequired() const {
    return signature_required;
}
void
OAIPlayerProfileTexturePropertyValue::setSignatureRequired(const bool &signature_required) {
    this->signature_required = signature_required;
    this->m_signature_required_isSet = true;
}

OAIPlayerTexture
OAIPlayerProfileTexturePropertyValue::getTextures() const {
    return textures;
}
void
OAIPlayerProfileTexturePropertyValue::setTextures(const OAIPlayerTexture &textures) {
    this->textures = textures;
    this->m_textures_isSet = true;
}


bool
OAIPlayerProfileTexturePropertyValue::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_timestamp_isSet){ isObjectUpdated = true; break;}
    
        if(m_profile_id_isSet){ isObjectUpdated = true; break;}
    
        if(m_profile_name_isSet){ isObjectUpdated = true; break;}
    
        if(m_signature_required_isSet){ isObjectUpdated = true; break;}
    
        if(textures.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

