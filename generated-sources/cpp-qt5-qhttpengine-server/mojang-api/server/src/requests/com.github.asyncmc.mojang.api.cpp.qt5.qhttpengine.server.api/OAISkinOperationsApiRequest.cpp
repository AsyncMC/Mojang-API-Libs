/**
 * Mojang API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAISkinOperationsApiRequest.h"

namespace OpenAPI {

OAISkinOperationsApiRequest::OAISkinOperationsApiRequest(QHttpEngine::Socket *s, OAISkinOperationsApiHandler* hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAISkinOperationsApiRequest::~OAISkinOperationsApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAISkinOperationsApiRequest::~OAISkinOperationsApiRequest()";
}

QMap<QString, QString>
OAISkinOperationsApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAISkinOperationsApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAISkinOperationsApiRequest::getRawSocket(){
    return socket;
}


void OAISkinOperationsApiRequest::changePlayerSkinRequest(const QString& stripped_uuidstr){
    qDebug() << "/user/profile/{stripped_uuid}/skin";
    connect(this, &OAISkinOperationsApiRequest::changePlayerSkin, handler, &OAISkinOperationsApiHandler::changePlayerSkin);

    
    QString stripped_uuid;
    fromStringValue(stripped_uuidstr, stripped_uuid);
    
    OAISkinModel model;
    QString url;

    emit changePlayerSkin(stripped_uuid, url, model);
}


void OAISkinOperationsApiRequest::resetPlayerSkinRequest(const QString& stripped_uuidstr){
    qDebug() << "/user/profile/{stripped_uuid}/skin";
    connect(this, &OAISkinOperationsApiRequest::resetPlayerSkin, handler, &OAISkinOperationsApiHandler::resetPlayerSkin);

    
    QString stripped_uuid;
    fromStringValue(stripped_uuidstr, stripped_uuid);
    

    emit resetPlayerSkin(stripped_uuid);
}


void OAISkinOperationsApiRequest::uploadPlayerSkinRequest(const QString& stripped_uuidstr){
    qDebug() << "/user/profile/{stripped_uuid}/skin";
    connect(this, &OAISkinOperationsApiRequest::uploadPlayerSkin, handler, &OAISkinOperationsApiHandler::uploadPlayerSkin);

    
    QString stripped_uuid;
    fromStringValue(stripped_uuidstr, stripped_uuid);
    
    OAISkinModel model;
    QIODevice* file;

    emit uploadPlayerSkin(stripped_uuid, file, model);
}



void OAISkinOperationsApiRequest::changePlayerSkinResponse(){
    writeResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISkinOperationsApiRequest::resetPlayerSkinResponse(){
    writeResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISkinOperationsApiRequest::uploadPlayerSkinResponse(){
    writeResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAISkinOperationsApiRequest::changePlayerSkinError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISkinOperationsApiRequest::resetPlayerSkinError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISkinOperationsApiRequest::uploadPlayerSkinError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}


void OAISkinOperationsApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(res);  // TODO
    Q_UNUSED(error_type); // TODO
}

void OAISkinOperationsApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(res);  // TODO
    Q_UNUSED(error_type); // TODO
}

}
