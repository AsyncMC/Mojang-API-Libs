/**
 * Mojang API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAINameHistoryApiRequest.h"

namespace OpenAPI {

OAINameHistoryApiRequest::OAINameHistoryApiRequest(QHttpEngine::Socket *s, OAINameHistoryApiHandler* hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAINameHistoryApiRequest::~OAINameHistoryApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAINameHistoryApiRequest::~OAINameHistoryApiRequest()";
}

QMap<QString, QString>
OAINameHistoryApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAINameHistoryApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAINameHistoryApiRequest::getRawSocket(){
    return socket;
}


void OAINameHistoryApiRequest::findUniqueIdsByNameRequest(){
    qDebug() << "/profiles/minecraft";
    connect(this, &OAINameHistoryApiRequest::findUniqueIdsByName, handler, &OAINameHistoryApiHandler::findUniqueIdsByName);

    
 
    QJsonDocument doc;
    QList<QString> request_body;
    if(socket->readJson(doc)){
        QJsonArray jsonArray = doc.array();
        foreach(QJsonValue obj, jsonArray) {
            QString o;
            ::OpenAPI::fromJsonValue(o, obj);
            request_body.append(o);
        }
    }
    

    emit findUniqueIdsByName(request_body);
}


void OAINameHistoryApiRequest::getNameHistoryRequest(const QString& stripped_uuidstr){
    qDebug() << "/user/profiles/{stripped_uuid}/names";
    connect(this, &OAINameHistoryApiRequest::getNameHistory, handler, &OAINameHistoryApiHandler::getNameHistory);

    
    QString stripped_uuid;
    fromStringValue(stripped_uuidstr, stripped_uuid);
    

    emit getNameHistory(stripped_uuid);
}


void OAINameHistoryApiRequest::getUniqueIdByNameRequest(const QString& usernamestr){
    qDebug() << "/users/profiles/minecraft/{username}";
    connect(this, &OAINameHistoryApiRequest::getUniqueIdByName, handler, &OAINameHistoryApiHandler::getUniqueIdByName);

    
    qint64 at;
    if(socket->queryString().keys().contains("at")){
        fromStringValue(socket->queryString().value("at"), at);
    }
    
    QString username;
    fromStringValue(usernamestr, username);
    

    emit getUniqueIdByName(username, at);
}



void OAINameHistoryApiRequest::findUniqueIdsByNameResponse(const QList<OAICurrentPlayerIDs>& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAINameHistoryApiRequest::getNameHistoryResponse(const QList<OAINameChange>& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAINameHistoryApiRequest::getUniqueIdByNameResponse(const OAICurrentPlayerIDs& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAINameHistoryApiRequest::findUniqueIdsByNameError(const QList<OAICurrentPlayerIDs>& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAINameHistoryApiRequest::getNameHistoryError(const QList<OAINameChange>& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAINameHistoryApiRequest::getUniqueIdByNameError(const OAICurrentPlayerIDs& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAINameHistoryApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(res);  // TODO
    Q_UNUSED(error_type); // TODO
}

void OAINameHistoryApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(res);  // TODO
    Q_UNUSED(error_type); // TODO
}

}
