/**
 * Mojang API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIMiscellaneousApiRequest.h"

namespace OpenAPI {

OAIMiscellaneousApiRequest::OAIMiscellaneousApiRequest(QHttpEngine::Socket *s, OAIMiscellaneousApiHandler* hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIMiscellaneousApiRequest::~OAIMiscellaneousApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIMiscellaneousApiRequest::~OAIMiscellaneousApiRequest()";
}

QMap<QString, QString>
OAIMiscellaneousApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIMiscellaneousApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIMiscellaneousApiRequest::getRawSocket(){
    return socket;
}


void OAIMiscellaneousApiRequest::getOrdersStatisticsRequest(){
    qDebug() << "/orders/statistics";
    connect(this, &OAIMiscellaneousApiRequest::getOrdersStatistics, handler, &OAIMiscellaneousApiHandler::getOrdersStatistics);

    
 
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIOrderStatisticsRequest oai_order_statistics_request;
    ::OpenAPI::fromJsonValue(oai_order_statistics_request, obj);
    

    emit getOrdersStatistics(oai_order_statistics_request);
}



void OAIMiscellaneousApiRequest::getOrdersStatisticsResponse(const OAIOrderStatisticsResponse& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIMiscellaneousApiRequest::getOrdersStatisticsError(const OAIOrderStatisticsResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIMiscellaneousApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(res);  // TODO
    Q_UNUSED(error_type); // TODO
}

void OAIMiscellaneousApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(res);  // TODO
    Q_UNUSED(error_type); // TODO
}

}
