/**
 * Mojang API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAISecurityQuestionAnswerApiRequest.h"

namespace OpenAPI {

OAISecurityQuestionAnswerApiRequest::OAISecurityQuestionAnswerApiRequest(QHttpEngine::Socket *s, OAISecurityQuestionAnswerApiHandler* hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAISecurityQuestionAnswerApiRequest::~OAISecurityQuestionAnswerApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAISecurityQuestionAnswerApiRequest::~OAISecurityQuestionAnswerApiRequest()";
}

QMap<QString, QString>
OAISecurityQuestionAnswerApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAISecurityQuestionAnswerApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAISecurityQuestionAnswerApiRequest::getRawSocket(){
    return socket;
}


void OAISecurityQuestionAnswerApiRequest::checkSecurityStatusRequest(){
    qDebug() << "/user/security/location";
    connect(this, &OAISecurityQuestionAnswerApiRequest::checkSecurityStatus, handler, &OAISecurityQuestionAnswerApiHandler::checkSecurityStatus);

    


    emit checkSecurityStatus();
}


void OAISecurityQuestionAnswerApiRequest::listPendingSecurityQuestionsRequest(){
    qDebug() << "/user/security/challenges";
    connect(this, &OAISecurityQuestionAnswerApiRequest::listPendingSecurityQuestions, handler, &OAISecurityQuestionAnswerApiHandler::listPendingSecurityQuestions);

    


    emit listPendingSecurityQuestions();
}


void OAISecurityQuestionAnswerApiRequest::sendSecurityQuestionAnswersRequest(){
    qDebug() << "/user/security/location";
    connect(this, &OAISecurityQuestionAnswerApiRequest::sendSecurityQuestionAnswers, handler, &OAISecurityQuestionAnswerApiHandler::sendSecurityQuestionAnswers);

    
 
    QJsonDocument doc;
    QList<OAISecurityAnswer> oai_security_answer;
    if(socket->readJson(doc)){
        QJsonArray jsonArray = doc.array();
        foreach(QJsonValue obj, jsonArray) {
            OAISecurityAnswer o;
            ::OpenAPI::fromJsonValue(o, obj);
            oai_security_answer.append(o);
        }
    }
    

    emit sendSecurityQuestionAnswers(oai_security_answer);
}



void OAISecurityQuestionAnswerApiRequest::checkSecurityStatusResponse(){
    writeResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISecurityQuestionAnswerApiRequest::listPendingSecurityQuestionsResponse(const QList<OAISecurityChallenge>& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISecurityQuestionAnswerApiRequest::sendSecurityQuestionAnswersResponse(){
    writeResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAISecurityQuestionAnswerApiRequest::checkSecurityStatusError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISecurityQuestionAnswerApiRequest::listPendingSecurityQuestionsError(const QList<OAISecurityChallenge>& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISecurityQuestionAnswerApiRequest::sendSecurityQuestionAnswersError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}


void OAISecurityQuestionAnswerApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(res);  // TODO
    Q_UNUSED(error_type); // TODO
}

void OAISecurityQuestionAnswerApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(res);  // TODO
    Q_UNUSED(error_type); // TODO
}

}
