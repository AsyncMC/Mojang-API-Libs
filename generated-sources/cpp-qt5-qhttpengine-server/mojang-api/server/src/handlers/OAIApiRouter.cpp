/**
 * Mojang API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>


#include "OAIApiRouter.h"
#include "OAIMiscellaneousApiRequest.h"
#include "OAINameHistoryApiRequest.h"
#include "OAISecurityQuestionAnswerApiRequest.h"
#include "OAISkinOperationsApiRequest.h"


namespace OpenAPI {

OAIApiRouter::OAIApiRouter() {
    createApiHandlers();
}

OAIApiRouter::~OAIApiRouter(){
    
    delete OAIMiscellaneousApiApiHandler;
    delete OAINameHistoryApiApiHandler;
    delete OAISecurityQuestionAnswerApiApiHandler;
    delete OAISkinOperationsApiApiHandler;
}

void OAIApiRouter::createApiHandlers() { 
    OAIMiscellaneousApiApiHandler = new OAIMiscellaneousApiHandler();
    OAINameHistoryApiApiHandler = new OAINameHistoryApiHandler();
    OAISecurityQuestionAnswerApiApiHandler = new OAISecurityQuestionAnswerApiHandler();
    OAISkinOperationsApiApiHandler = new OAISkinOperationsApiHandler();
}

void OAIApiRouter::setUpRoutes() {
    
    Routes.insert(QString("%1 %2").arg("POST").arg("/orders/statistics").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIMiscellaneousApiRequest(socket, OAIMiscellaneousApiApiHandler);
            reqObj->getOrdersStatisticsRequest();
    });
    Routes.insert(QString("%1 %2").arg("POST").arg("/profiles/minecraft").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAINameHistoryApiRequest(socket, OAINameHistoryApiApiHandler);
            reqObj->findUniqueIdsByNameRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/user/security/location").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAISecurityQuestionAnswerApiRequest(socket, OAISecurityQuestionAnswerApiApiHandler);
            reqObj->checkSecurityStatusRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/user/security/challenges").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAISecurityQuestionAnswerApiRequest(socket, OAISecurityQuestionAnswerApiApiHandler);
            reqObj->listPendingSecurityQuestionsRequest();
    });
    Routes.insert(QString("%1 %2").arg("POST").arg("/user/security/location").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAISecurityQuestionAnswerApiRequest(socket, OAISecurityQuestionAnswerApiApiHandler);
            reqObj->sendSecurityQuestionAnswersRequest();
    });
}

void OAIApiRouter::processRequest(QHttpEngine::Socket *socket){
    if( handleRequest(socket) ){
        return;
    }
    if( handleRequestAndExtractPathParam(socket) ){
        return;
    }
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    if(socket->isOpen()){
        socket->writeHeaders();
        socket->close();
    }
}

bool OAIApiRouter::handleRequest(QHttpEngine::Socket *socket){
    auto reqPath = QString("%1 %2").arg(fromQHttpEngineMethod(socket->method())).arg(socket->path()).toLower();
    if ( Routes.contains(reqPath) ) {
        Routes.value(reqPath).operator()(socket);
        return true;
    }
    return false;
}

bool OAIApiRouter::handleRequestAndExtractPathParam(QHttpEngine::Socket *socket){
    auto reqPath = QString("%1 %2").arg(fromQHttpEngineMethod(socket->method())).arg(socket->path()).toLower();
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/user/profiles/{stripped_uuid}/names").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString stripped_uuid = match.captured(QString("stripped_uuid").toLower());
                auto reqObj = new OAINameHistoryApiRequest(socket, OAINameHistoryApiApiHandler);
                reqObj->getNameHistoryRequest(stripped_uuid);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/users/profiles/minecraft/{username}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString username = match.captured(QString("username").toLower());
                auto reqObj = new OAINameHistoryApiRequest(socket, OAINameHistoryApiApiHandler);
                reqObj->getUniqueIdByNameRequest(username);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("POST").arg("/user/profile/{stripped_uuid}/skin").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString stripped_uuid = match.captured(QString("stripped_uuid").toLower());
                auto reqObj = new OAISkinOperationsApiRequest(socket, OAISkinOperationsApiApiHandler);
                reqObj->changePlayerSkinRequest(stripped_uuid);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("DELETE").arg("/user/profile/{stripped_uuid}/skin").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString stripped_uuid = match.captured(QString("stripped_uuid").toLower());
                auto reqObj = new OAISkinOperationsApiRequest(socket, OAISkinOperationsApiApiHandler);
                reqObj->resetPlayerSkinRequest(stripped_uuid);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("PUT").arg("/user/profile/{stripped_uuid}/skin").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString stripped_uuid = match.captured(QString("stripped_uuid").toLower());
                auto reqObj = new OAISkinOperationsApiRequest(socket, OAISkinOperationsApiApiHandler);
                reqObj->uploadPlayerSkinRequest(stripped_uuid);
                return true;
            }
        }
    }
    return false;
}

}
