package com.github.asyncmc.mojang.api.jaxrs.cxf.api;

import com.github.asyncmc.mojang.api.jaxrs.cxf.model.Error;
import java.io.File;
import com.github.asyncmc.mojang.api.jaxrs.cxf.model.SkinModel;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;
import javax.ws.rs.*;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.MediaType;
import org.apache.cxf.jaxrs.ext.multipart.*;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.ApiResponse;
import io.swagger.jaxrs.PATCH;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * Mojang API
 *
 * <p>No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 */
@Path("/")
@Api(value = "/", description = "")
public interface SkinOperationsApi  {

    /**
     * Changes the player skin by URL
     *
     * This will set the skin for the selected profile, but Mojang&#39;s servers will fetch the skin from a URL. This will also work for legacy accounts.
     *
     */
    @POST
    @Path("/user/profile/{stripped_uuid}/skin")
    @Consumes({ "application/x-www-form-urlencoded" })
    @Produces({ "application/json" })
    @ApiOperation(value = "Changes the player skin by URL", tags={ "Skin Operations",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The skin has been changed. The response has no body"),
        @ApiResponse(code = 400, message = "Upon error the server will send back a JSON with the error. (Success is a blank payload)", response = Error.class) })
    public void changePlayerSkin(@PathParam("stripped_uuid") String strippedUuid, @Multipart(value = "url")  String url, @Multipart(value = "model", required = false)  SkinModel model);

    /**
     * Resets the player skin to default
     *
     */
    @DELETE
    @Path("/user/profile/{stripped_uuid}/skin")
    @Produces({ "application/json" })
    @ApiOperation(value = "Resets the player skin to default", tags={ "Skin Operations",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The skin has been changed. The response has no body"),
        @ApiResponse(code = 400, message = "Upon error the server will send back a JSON with the error. (Success is a blank payload)", response = Error.class) })
    public void resetPlayerSkin(@PathParam("stripped_uuid") String strippedUuid);

    /**
     * Changes the player skin by upload
     *
     * This uploads a skin to Mojang&#39;s servers. It also sets the users skin. This works on legacy counts as well.
     *
     */
    @PUT
    @Path("/user/profile/{stripped_uuid}/skin")
    @Consumes({ "multipart/form-data" })
    @Produces({ "application/json" })
    @ApiOperation(value = "Changes the player skin by upload", tags={ "Skin Operations" })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The skin has been changed. The response has no body"),
        @ApiResponse(code = 400, message = "Upon error the server will send back a JSON with the error. (Success is a blank payload)", response = Error.class) })
    public void uploadPlayerSkin(@PathParam("stripped_uuid") String strippedUuid,  @Multipart(value = "file" ) Attachment fileDetail, @Multipart(value = "model", required = false)  SkinModel model);
}

