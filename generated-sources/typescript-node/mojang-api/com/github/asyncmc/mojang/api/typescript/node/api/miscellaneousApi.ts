/**
 * Mojang API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');
import Promise = require('bluebird');

/* tslint:disable:no-unused-locals */
import { OrderStatisticsRequest } from '../com.github.asyncmc.mojang.api.typescript.node.model/orderStatisticsRequest';
import { OrderStatisticsResponse } from '../com.github.asyncmc.mojang.api.typescript.node.model/orderStatisticsResponse';

import { ObjectSerializer, Authentication, HttpBasicAuth, ApiKeyAuth, OAuth, VoidAuth } from '../model/models';

let defaultBasePath = 'https://api.mojang.com';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum MiscellaneousApiApiKeys {
}

export class MiscellaneousApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'MojangStatisticsToken': new HttpBasicAuth(),
    }

    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            this.username = basePathOrUsername;
            this.password = password
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: MiscellaneousApiApiKeys, value: string) {
        (this.authentications as any)[MiscellaneousApiApiKeys[key]].apiKey = value;
    }
    set username(username: string) {
        this.authentications.MojangStatisticsToken.username = username;
    }

    set password(password: string) {
        this.authentications.MojangStatisticsToken.password = password;
    }

    /**
     * 
     * @summary Get statistics on the sales of Minecraft.
     * @param orderStatisticsRequest The payload is a json list of options under the metricKeys key. You will receive a single object corresponding to the sum of sales of the requested type(s). You must request at least one type of sale. Below is the default list used by https://minecraft.net/en/stats/
     */
    public getOrdersStatistics (orderStatisticsRequest: OrderStatisticsRequest) : Promise<{ response: http.ClientResponse; body: OrderStatisticsResponse;  }> {
        const localVarPath = this.basePath + '/orders/statistics';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'orderStatisticsRequest' is not null or undefined
        if (orderStatisticsRequest === null || orderStatisticsRequest === undefined) {
            throw new Error('Required parameter orderStatisticsRequest was null or undefined when calling getOrdersStatistics.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(orderStatisticsRequest, "OrderStatisticsRequest")
        };

        this.authentications.MojangStatisticsToken.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: OrderStatisticsResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "OrderStatisticsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
