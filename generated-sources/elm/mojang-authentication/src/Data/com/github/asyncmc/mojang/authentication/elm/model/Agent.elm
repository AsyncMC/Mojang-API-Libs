{-
   Mojang Authentication API
   No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

   OpenAPI spec version: 2020-06-05

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.Agent exposing (Agent, Name(..), decoder, encoder)

import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


{-| Identifies the software doing the request
-}
type alias Agent =
    { name : Maybe (Name)
    , version : Maybe (Int)
    }


type Name
    = Minecraft
    | Scrolls



decoder : Decoder Agent
decoder =
    Decode.succeed Agent
        |> optional "name" (Decode.nullable nameDecoder) (Just "Minecraft")
        |> optional "version" (Decode.nullable Decode.int) (Just 1)



encoder : Agent -> Encode.Value
encoder model =
    Encode.object
        [ ( "name", Maybe.withDefault Encode.null (Maybe.map nameEncoder model.name) )
        , ( "version", Maybe.withDefault Encode.null (Maybe.map Encode.int model.version) )

        ]



nameDecoder : Decoder Name
nameDecoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                case str of
                    "Minecraft" ->
                        Decode.succeed Minecraft

                    "Scrolls" ->
                        Decode.succeed Scrolls

                    other ->
                        Decode.fail <| "Unknown type: " ++ other
            )



nameEncoder : Name -> Encode.Value
nameEncoder model =
    case model of
        Minecraft ->
            Encode.string "Minecraft"

        Scrolls ->
            Encode.string "Scrolls"



