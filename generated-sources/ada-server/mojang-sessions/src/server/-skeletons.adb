--  Mojang Session API
--  No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
--
--  OpenAPI spec version: 2020_06_05
--  
--
--  NOTE: This package is auto generated by the swagger code generator 3.3.4.
--  https://openapi-generator.tech
--  Do not edit the class manually.
with Swagger.Streams;
with Swagger.Servers.Operation;
package body .Skeletons is

   package body Skeleton is


      package API_Get_Blocked_Server_Hashes is
         new Swagger.Servers.Operation (Handler => Get_Blocked_Server_Hashes,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/blockedservers");

      --  A list of SHA1 hashes of banned servers
      procedure Get_Blocked_Server_Hashes
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Result : Swagger.UString;
      begin
         Impl.Get_Blocked_Server_Hashes (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Blocked_Server_Hashes;

      package API_Get_Player_Profile is
         new Swagger.Servers.Operation (Handler => Get_Player_Profile,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/session/minecraft/profile/{stripped_uuid}");

      --  Gets the player's game profile
      procedure Get_Player_Profile
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Stripped_Uuid : Swagger.UString;
         Unsigned : Swagger.Nullable_Boolean;
         Result : .Models.PlayerProfile_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "unsigned", Unsigned);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Stripped_Uuid);
         Impl.Get_Player_Profile
            (Stripped_Uuid,
             Unsigned, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Player_Profile;

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Get_Blocked_Server_Hashes.Definition);
         Swagger.Servers.Register (Server, API_Get_Player_Profile.Definition);
      end Register;

   end Skeleton;

   package body Shared_Instance is


      --  A list of SHA1 hashes of banned servers
      procedure Get_Blocked_Server_Hashes
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Result : Swagger.UString;
      begin
         Server.Get_Blocked_Server_Hashes (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            Swagger.Streams.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Blocked_Server_Hashes;

      package API_Get_Blocked_Server_Hashes is
         new Swagger.Servers.Operation (Handler => Get_Blocked_Server_Hashes,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/blockedservers");

      --  Gets the player's game profile
      procedure Get_Player_Profile
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Stripped_Uuid : Swagger.UString;
         Unsigned : Swagger.Nullable_Boolean;
         Result : .Models.PlayerProfile_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "unsigned", Unsigned);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Stripped_Uuid);
         Server.Get_Player_Profile
            (Stripped_Uuid,
             Unsigned, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Player_Profile;

      package API_Get_Player_Profile is
         new Swagger.Servers.Operation (Handler => Get_Player_Profile,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/session/minecraft/profile/{stripped_uuid}");

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Get_Blocked_Server_Hashes.Definition);
         Swagger.Servers.Register (Server, API_Get_Player_Profile.Definition);
      end Register;

      protected body Server is
         --  A list of SHA1 hashes of banned servers
         procedure Get_Blocked_Server_Hashes (Result : out Swagger.UString;
         Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Blocked_Server_Hashes (Result, Context);
         end Get_Blocked_Server_Hashes;

         --  Gets the player's game profile
         procedure Get_Player_Profile
            (Stripped_Uuid : in Swagger.UString;
             Unsigned : in Swagger.Nullable_Boolean;
             Result : out .Models.PlayerProfile_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Player_Profile
               (Stripped_Uuid,
                Unsigned,
                Result,
                Context);
         end Get_Player_Profile;

      end Server;

   end Shared_Instance;

end .Skeletons;
