--  Mojang API
--  No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
--
--  OpenAPI spec version: 2020_06_05
--  
--
--  NOTE: This package is auto generated by the swagger code generator 3.3.4.
--  https://openapi-generator.tech
--  Do not edit the class manually.
with Swagger.Streams;
with Swagger.Servers.Operation;
package body .Skeletons is

   package body Skeleton is


      package API_Get_Orders_Statistics is
         new Swagger.Servers.Operation (Handler => Get_Orders_Statistics,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/orders/statistics");

      --  Get statistics on the sales of Minecraft.
      procedure Get_Orders_Statistics
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Order_Statistics_Request_Type : OrderStatisticsRequest_Type;
         Result : .Models.OrderStatisticsResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "OrderStatisticsRequest_Type", Order_Statistics_Request_Type);
         Impl.Get_Orders_Statistics
            (Order_Statistics_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Orders_Statistics;

      package API_Find_Unique_Ids_By_Name is
         new Swagger.Servers.Operation (Handler => Find_Unique_Ids_By_Name,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/profiles/minecraft");

      --  Find the current UUID of multiple players at once
      procedure Find_Unique_Ids_By_Name
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         String : Swagger.UString_Vectors.Vector;
         Result : .Models.CurrentPlayerIDs_Type_Vectors.Vector;
      begin
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "string", String);
         Impl.Find_Unique_Ids_By_Name
            (String, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Find_Unique_Ids_By_Name;

      package API_Get_Name_History is
         new Swagger.Servers.Operation (Handler => Get_Name_History,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/user/profiles/{stripped_uuid}/names");

      --  Gets the full player's name history
      procedure Get_Name_History
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Stripped_Uuid : Swagger.UString;
         Result : .Models.NameChange_Type_Vectors.Vector;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Stripped_Uuid);
         Impl.Get_Name_History
            (Stripped_Uuid, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Name_History;

      package API_Get_Unique_Id_By_Name is
         new Swagger.Servers.Operation (Handler => Get_Unique_Id_By_Name,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/users/profiles/minecraft/{username}");

      --  Find the UUID by name
      procedure Get_Unique_Id_By_Name
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Username : Swagger.UString;
         P_At : Swagger.Nullable_Long;
         Result : .Models.CurrentPlayerIDs_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "at", P_At);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Username);
         Impl.Get_Unique_Id_By_Name
            (Username,
             P_At, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Unique_Id_By_Name;

      package API_Check_Security_Status is
         new Swagger.Servers.Operation (Handler => Check_Security_Status,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/user/security/location");

      --  Check if security questions are needed
      procedure Check_Security_Status
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         Impl.Check_Security_Status (Context);

      end Check_Security_Status;

      package API_List_Pending_Security_Questions is
         new Swagger.Servers.Operation (Handler => List_Pending_Security_Questions,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/user/security/challenges");

      --  Get list of questions
      procedure List_Pending_Security_Questions
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Result : .Models.SecurityChallenge_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         Impl.List_Pending_Security_Questions (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end List_Pending_Security_Questions;

      package API_Send_Security_Question_Answers is
         new Swagger.Servers.Operation (Handler => Send_Security_Question_Answers,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/user/security/location");

      --  Send back the answers
      procedure Send_Security_Question_Answers
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Security_Answer : .Models.SecurityAnswer_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "SecurityAnswer", Security_Answer);
         Impl.Send_Security_Question_Answers
            (Security_Answer, Context);

      end Send_Security_Question_Answers;

      package API_Change_Player_Skin is
         new Swagger.Servers.Operation (Handler => Change_Player_Skin,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/user/profile/{stripped_uuid}/skin");

      --  Changes the player skin by URL
      procedure Change_Player_Skin
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Stripped_Uuid : Swagger.UString;
         Url : Swagger.UString;
         Model : .Models.SkinModel_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Stripped_Uuid);
         Swagger.Servers.Get_Parameter (Context, "model", Model);
         Swagger.Servers.Get_Parameter (Context, "url", Url);
         Impl.Change_Player_Skin
            (Stripped_Uuid,
             Url,
             Model, Context);

      end Change_Player_Skin;

      package API_Reset_Player_Skin is
         new Swagger.Servers.Operation (Handler => Reset_Player_Skin,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/user/profile/{stripped_uuid}/skin");

      --  Resets the player skin to default
      procedure Reset_Player_Skin
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Stripped_Uuid : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Stripped_Uuid);
         Impl.Reset_Player_Skin
            (Stripped_Uuid, Context);

      end Reset_Player_Skin;

      package API_Upload_Player_Skin is
         new Swagger.Servers.Operation (Handler => Upload_Player_Skin,
                                        Method  => Swagger.Servers.PUT,
                                        URI     => URI_Prefix & "/user/profile/{stripped_uuid}/skin");

      --  Changes the player skin by upload
      procedure Upload_Player_Skin
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Stripped_Uuid : Swagger.UString;
         File : Swagger.File_Part_Type;
         Model : .Models.SkinModel_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Stripped_Uuid);
         Swagger.Servers.Get_Parameter (Context, "model", Model);
         Swagger.Servers.Get_Parameter (Context, "file", File);
         Impl.Upload_Player_Skin
            (Stripped_Uuid,
             File,
             Model, Context);

      end Upload_Player_Skin;

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Get_Orders_Statistics.Definition);
         Swagger.Servers.Register (Server, API_Find_Unique_Ids_By_Name.Definition);
         Swagger.Servers.Register (Server, API_Get_Name_History.Definition);
         Swagger.Servers.Register (Server, API_Get_Unique_Id_By_Name.Definition);
         Swagger.Servers.Register (Server, API_Check_Security_Status.Definition);
         Swagger.Servers.Register (Server, API_List_Pending_Security_Questions.Definition);
         Swagger.Servers.Register (Server, API_Send_Security_Question_Answers.Definition);
         Swagger.Servers.Register (Server, API_Change_Player_Skin.Definition);
         Swagger.Servers.Register (Server, API_Reset_Player_Skin.Definition);
         Swagger.Servers.Register (Server, API_Upload_Player_Skin.Definition);
      end Register;

   end Skeleton;

   package body Shared_Instance is


      --  Get statistics on the sales of Minecraft.
      procedure Get_Orders_Statistics
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Order_Statistics_Request_Type : OrderStatisticsRequest_Type;
         Result : .Models.OrderStatisticsResponse_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "OrderStatisticsRequest_Type", Order_Statistics_Request_Type);
         Server.Get_Orders_Statistics
            (Order_Statistics_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Orders_Statistics;

      package API_Get_Orders_Statistics is
         new Swagger.Servers.Operation (Handler => Get_Orders_Statistics,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/orders/statistics");

      --  Find the current UUID of multiple players at once
      procedure Find_Unique_Ids_By_Name
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         String : Swagger.UString_Vectors.Vector;
         Result : .Models.CurrentPlayerIDs_Type_Vectors.Vector;
      begin
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "string", String);
         Server.Find_Unique_Ids_By_Name
            (String, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Find_Unique_Ids_By_Name;

      package API_Find_Unique_Ids_By_Name is
         new Swagger.Servers.Operation (Handler => Find_Unique_Ids_By_Name,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/profiles/minecraft");

      --  Gets the full player's name history
      procedure Get_Name_History
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Stripped_Uuid : Swagger.UString;
         Result : .Models.NameChange_Type_Vectors.Vector;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Stripped_Uuid);
         Server.Get_Name_History
            (Stripped_Uuid, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Name_History;

      package API_Get_Name_History is
         new Swagger.Servers.Operation (Handler => Get_Name_History,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/user/profiles/{stripped_uuid}/names");

      --  Find the UUID by name
      procedure Get_Unique_Id_By_Name
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Username : Swagger.UString;
         P_At : Swagger.Nullable_Long;
         Result : .Models.CurrentPlayerIDs_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "at", P_At);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Username);
         Server.Get_Unique_Id_By_Name
            (Username,
             P_At, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Unique_Id_By_Name;

      package API_Get_Unique_Id_By_Name is
         new Swagger.Servers.Operation (Handler => Get_Unique_Id_By_Name,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/users/profiles/minecraft/{username}");

      --  Check if security questions are needed
      procedure Check_Security_Status
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         Server.Check_Security_Status (Context);

      end Check_Security_Status;

      package API_Check_Security_Status is
         new Swagger.Servers.Operation (Handler => Check_Security_Status,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/user/security/location");

      --  Get list of questions
      procedure List_Pending_Security_Questions
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Result : .Models.SecurityChallenge_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         Server.List_Pending_Security_Questions (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end List_Pending_Security_Questions;

      package API_List_Pending_Security_Questions is
         new Swagger.Servers.Operation (Handler => List_Pending_Security_Questions,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/user/security/challenges");

      --  Send back the answers
      procedure Send_Security_Question_Answers
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Security_Answer : .Models.SecurityAnswer_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         Swagger.Servers.Read (Req, Input);
         
         .Models.Deserialize (Input, "SecurityAnswer", Security_Answer);
         Server.Send_Security_Question_Answers
            (Security_Answer, Context);

      end Send_Security_Question_Answers;

      package API_Send_Security_Question_Answers is
         new Swagger.Servers.Operation (Handler => Send_Security_Question_Answers,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/user/security/location");

      --  Changes the player skin by URL
      procedure Change_Player_Skin
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Stripped_Uuid : Swagger.UString;
         Url : Swagger.UString;
         Model : .Models.SkinModel_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Stripped_Uuid);
         Swagger.Servers.Get_Parameter (Context, "model", Model);
         Swagger.Servers.Get_Parameter (Context, "url", Url);
         Server.Change_Player_Skin
            (Stripped_Uuid,
             Url,
             Model, Context);

      end Change_Player_Skin;

      package API_Change_Player_Skin is
         new Swagger.Servers.Operation (Handler => Change_Player_Skin,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/user/profile/{stripped_uuid}/skin");

      --  Resets the player skin to default
      procedure Reset_Player_Skin
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Stripped_Uuid : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Stripped_Uuid);
         Server.Reset_Player_Skin
            (Stripped_Uuid, Context);

      end Reset_Player_Skin;

      package API_Reset_Player_Skin is
         new Swagger.Servers.Operation (Handler => Reset_Player_Skin,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/user/profile/{stripped_uuid}/skin");

      --  Changes the player skin by upload
      procedure Upload_Player_Skin
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Stripped_Uuid : Swagger.UString;
         File : Swagger.File_Part_Type;
         Model : .Models.SkinModel_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         Swagger.Servers.Get_Path_Parameter (Req, 1, Stripped_Uuid);
         Swagger.Servers.Get_Parameter (Context, "model", Model);
         Swagger.Servers.Get_Parameter (Context, "file", File);
         Server.Upload_Player_Skin
            (Stripped_Uuid,
             File,
             Model, Context);

      end Upload_Player_Skin;

      package API_Upload_Player_Skin is
         new Swagger.Servers.Operation (Handler => Upload_Player_Skin,
                                        Method  => Swagger.Servers.PUT,
                                        URI     => URI_Prefix & "/user/profile/{stripped_uuid}/skin");

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Get_Orders_Statistics.Definition);
         Swagger.Servers.Register (Server, API_Find_Unique_Ids_By_Name.Definition);
         Swagger.Servers.Register (Server, API_Get_Name_History.Definition);
         Swagger.Servers.Register (Server, API_Get_Unique_Id_By_Name.Definition);
         Swagger.Servers.Register (Server, API_Check_Security_Status.Definition);
         Swagger.Servers.Register (Server, API_List_Pending_Security_Questions.Definition);
         Swagger.Servers.Register (Server, API_Send_Security_Question_Answers.Definition);
         Swagger.Servers.Register (Server, API_Change_Player_Skin.Definition);
         Swagger.Servers.Register (Server, API_Reset_Player_Skin.Definition);
         Swagger.Servers.Register (Server, API_Upload_Player_Skin.Definition);
      end Register;

      protected body Server is
         --  Get statistics on the sales of Minecraft.
         procedure Get_Orders_Statistics
            (Order_Statistics_Request_Type : in OrderStatisticsRequest_Type;
             Result : out .Models.OrderStatisticsResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Orders_Statistics
               (Order_Statistics_Request_Type,
                Result,
                Context);
         end Get_Orders_Statistics;

         --  Find the current UUID of multiple players at once
         procedure Find_Unique_Ids_By_Name
            (String : in Swagger.UString_Vectors.Vector;
             Result : out .Models.CurrentPlayerIDs_Type_Vectors.Vector;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Find_Unique_Ids_By_Name
               (String,
                Result,
                Context);
         end Find_Unique_Ids_By_Name;

         --  Gets the full player's name history
         procedure Get_Name_History
            (Stripped_Uuid : in Swagger.UString;
             Result : out .Models.NameChange_Type_Vectors.Vector;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Name_History
               (Stripped_Uuid,
                Result,
                Context);
         end Get_Name_History;

         --  Find the UUID by name
         procedure Get_Unique_Id_By_Name
            (Username : in Swagger.UString;
             P_At : in Swagger.Nullable_Long;
             Result : out .Models.CurrentPlayerIDs_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Unique_Id_By_Name
               (Username,
                P_At,
                Result,
                Context);
         end Get_Unique_Id_By_Name;

         --  Check if security questions are needed
         procedure Check_Security_Status (Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Check_Security_Status (Context);
         end Check_Security_Status;

         --  Get list of questions
         procedure List_Pending_Security_Questions (Result : out .Models.SecurityChallenge_Type_Vectors.Vector;
         Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.List_Pending_Security_Questions (Result, Context);
         end List_Pending_Security_Questions;

         --  Send back the answers
         procedure Send_Security_Question_Answers
            (Security_Answer : in .Models.SecurityAnswer_Type_Vectors.Vector;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Send_Security_Question_Answers
               (Security_Answer,
                Context);
         end Send_Security_Question_Answers;

         --  Changes the player skin by URL
         procedure Change_Player_Skin
            (Stripped_Uuid : in Swagger.UString;
             Url : in Swagger.UString;
             Model : in .Models.SkinModel_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Change_Player_Skin
               (Stripped_Uuid,
                Url,
                Model,
                Context);
         end Change_Player_Skin;

         --  Resets the player skin to default
         procedure Reset_Player_Skin
            (Stripped_Uuid : in Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Reset_Player_Skin
               (Stripped_Uuid,
                Context);
         end Reset_Player_Skin;

         --  Changes the player skin by upload
         procedure Upload_Player_Skin
            (Stripped_Uuid : in Swagger.UString;
             File : in Swagger.File_Part_Type;
             Model : in .Models.SkinModel_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Upload_Player_Skin
               (Stripped_Uuid,
                File,
                Model,
                Context);
         end Upload_Player_Skin;

      end Server;

   end Shared_Instance;

end .Skeletons;
