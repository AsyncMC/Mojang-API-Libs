--  Mojang Authentication API
--  No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
--
--  OpenAPI spec version: 2020_06_05
--  
--
--  NOTE: This package is auto generated by the swagger code generator 3.3.4.
--  https://openapi-generator.tech
--  Do not edit the class manually.
with Swagger.Streams;
with Swagger.Servers.Operation;
package body com.github.asyncmc.mojang.authentication.ada.server.model.Skeletons is

   package body Skeleton is


      package API_Authenticate is
         new Swagger.Servers.Operation (Handler => Authenticate,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/authenticate");

      --  
      procedure Authenticate
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Authentication_Request_Type : AuthenticationRequest_Type;
         Result : com.github.asyncmc.mojang.authentication.ada.server.model.Models.Authentication_Type;
      begin
         Swagger.Servers.Read (Req, Input);
         
         com.github.asyncmc.mojang.authentication.ada.server.model.Models.Deserialize (Input, "AuthenticationRequest_Type", Authentication_Request_Type);
         Impl.Authenticate
            (Authentication_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            com.github.asyncmc.mojang.authentication.ada.server.model.Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Authenticate;

      package API_Invalidate is
         new Swagger.Servers.Operation (Handler => Invalidate,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/invalidate");

      --  
      procedure Invalidate
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Access_Keys_Type : AccessKeys_Type;
      begin
         Swagger.Servers.Read (Req, Input);
         
         com.github.asyncmc.mojang.authentication.ada.server.model.Models.Deserialize (Input, "AccessKeys_Type", Access_Keys_Type);
         Impl.Invalidate
            (Access_Keys_Type, Context);

      end Invalidate;

      package API_Refresh is
         new Swagger.Servers.Operation (Handler => Refresh,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/refresh");

      --  
      procedure Refresh
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Refresh_Request_Type : RefreshRequest_Type;
         Result : com.github.asyncmc.mojang.authentication.ada.server.model.Models.RefreshResponse_Type;
      begin
         Swagger.Servers.Read (Req, Input);
         
         com.github.asyncmc.mojang.authentication.ada.server.model.Models.Deserialize (Input, "RefreshRequest_Type", Refresh_Request_Type);
         Impl.Refresh
            (Refresh_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            com.github.asyncmc.mojang.authentication.ada.server.model.Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Refresh;

      package API_Siginout is
         new Swagger.Servers.Operation (Handler => Siginout,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/signout");

      --  
      procedure Siginout
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Username_Password_Type : UsernamePassword_Type;
      begin
         Swagger.Servers.Read (Req, Input);
         
         com.github.asyncmc.mojang.authentication.ada.server.model.Models.Deserialize (Input, "UsernamePassword_Type", Username_Password_Type);
         Impl.Siginout
            (Username_Password_Type, Context);

      end Siginout;

      package API_Validate is
         new Swagger.Servers.Operation (Handler => Validate,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/validate");

      --  
      procedure Validate
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Access_Keys_Type : AccessKeys_Type;
      begin
         Swagger.Servers.Read (Req, Input);
         
         com.github.asyncmc.mojang.authentication.ada.server.model.Models.Deserialize (Input, "AccessKeys_Type", Access_Keys_Type);
         Impl.Validate
            (Access_Keys_Type, Context);

      end Validate;

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Authenticate.Definition);
         Swagger.Servers.Register (Server, API_Invalidate.Definition);
         Swagger.Servers.Register (Server, API_Refresh.Definition);
         Swagger.Servers.Register (Server, API_Siginout.Definition);
         Swagger.Servers.Register (Server, API_Validate.Definition);
      end Register;

   end Skeleton;

   package body Shared_Instance is


      --  
      procedure Authenticate
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Authentication_Request_Type : AuthenticationRequest_Type;
         Result : com.github.asyncmc.mojang.authentication.ada.server.model.Models.Authentication_Type;
      begin
         Swagger.Servers.Read (Req, Input);
         
         com.github.asyncmc.mojang.authentication.ada.server.model.Models.Deserialize (Input, "AuthenticationRequest_Type", Authentication_Request_Type);
         Server.Authenticate
            (Authentication_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            com.github.asyncmc.mojang.authentication.ada.server.model.Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Authenticate;

      package API_Authenticate is
         new Swagger.Servers.Operation (Handler => Authenticate,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/authenticate");

      --  
      procedure Invalidate
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Access_Keys_Type : AccessKeys_Type;
      begin
         Swagger.Servers.Read (Req, Input);
         
         com.github.asyncmc.mojang.authentication.ada.server.model.Models.Deserialize (Input, "AccessKeys_Type", Access_Keys_Type);
         Server.Invalidate
            (Access_Keys_Type, Context);

      end Invalidate;

      package API_Invalidate is
         new Swagger.Servers.Operation (Handler => Invalidate,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/invalidate");

      --  
      procedure Refresh
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Refresh_Request_Type : RefreshRequest_Type;
         Result : com.github.asyncmc.mojang.authentication.ada.server.model.Models.RefreshResponse_Type;
      begin
         Swagger.Servers.Read (Req, Input);
         
         com.github.asyncmc.mojang.authentication.ada.server.model.Models.Deserialize (Input, "RefreshRequest_Type", Refresh_Request_Type);
         Server.Refresh
            (Refresh_Request_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            com.github.asyncmc.mojang.authentication.ada.server.model.Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Refresh;

      package API_Refresh is
         new Swagger.Servers.Operation (Handler => Refresh,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/refresh");

      --  
      procedure Siginout
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Username_Password_Type : UsernamePassword_Type;
      begin
         Swagger.Servers.Read (Req, Input);
         
         com.github.asyncmc.mojang.authentication.ada.server.model.Models.Deserialize (Input, "UsernamePassword_Type", Username_Password_Type);
         Server.Siginout
            (Username_Password_Type, Context);

      end Siginout;

      package API_Siginout is
         new Swagger.Servers.Operation (Handler => Siginout,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/signout");

      --  
      procedure Validate
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Access_Keys_Type : AccessKeys_Type;
      begin
         Swagger.Servers.Read (Req, Input);
         
         com.github.asyncmc.mojang.authentication.ada.server.model.Models.Deserialize (Input, "AccessKeys_Type", Access_Keys_Type);
         Server.Validate
            (Access_Keys_Type, Context);

      end Validate;

      package API_Validate is
         new Swagger.Servers.Operation (Handler => Validate,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/validate");

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Authenticate.Definition);
         Swagger.Servers.Register (Server, API_Invalidate.Definition);
         Swagger.Servers.Register (Server, API_Refresh.Definition);
         Swagger.Servers.Register (Server, API_Siginout.Definition);
         Swagger.Servers.Register (Server, API_Validate.Definition);
      end Register;

      protected body Server is
         --  
         procedure Authenticate
            (Authentication_Request_Type : in AuthenticationRequest_Type;
             Result : out com.github.asyncmc.mojang.authentication.ada.server.model.Models.Authentication_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Authenticate
               (Authentication_Request_Type,
                Result,
                Context);
         end Authenticate;

         --  
         procedure Invalidate
            (Access_Keys_Type : in AccessKeys_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Invalidate
               (Access_Keys_Type,
                Context);
         end Invalidate;

         --  
         procedure Refresh
            (Refresh_Request_Type : in RefreshRequest_Type;
             Result : out com.github.asyncmc.mojang.authentication.ada.server.model.Models.RefreshResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Refresh
               (Refresh_Request_Type,
                Result,
                Context);
         end Refresh;

         --  
         procedure Siginout
            (Username_Password_Type : in UsernamePassword_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Siginout
               (Username_Password_Type,
                Context);
         end Siginout;

         --  
         procedure Validate
            (Access_Keys_Type : in AccessKeys_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Validate
               (Access_Keys_Type,
                Context);
         end Validate;

      end Server;

   end Shared_Instance;

end com.github.asyncmc.mojang.authentication.ada.server.model.Skeletons;
