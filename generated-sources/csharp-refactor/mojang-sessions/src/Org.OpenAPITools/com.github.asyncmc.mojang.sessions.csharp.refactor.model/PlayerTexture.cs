/* 
 * Mojang Session API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.com.github.asyncmc.mojang.sessions.csharp.refactor.model
{
    /// <summary>
    /// Provide links to the player&#39;s skin and cape
    /// </summary>
    [DataContract]
    public partial class PlayerTexture :  IEquatable<PlayerTexture>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerTexture" /> class.
        /// </summary>
        /// <param name="sKIN">sKIN.</param>
        /// <param name="cAPE">cAPE.</param>
        public PlayerTexture(PlayerSkinURL sKIN = default(PlayerSkinURL), PlayerTextureURL cAPE = default(PlayerTextureURL))
        {
            this.SKIN = sKIN;
            this.CAPE = cAPE;
        }
        
        /// <summary>
        /// Gets or Sets SKIN
        /// </summary>
        [DataMember(Name="SKIN", EmitDefaultValue=false)]
        public PlayerSkinURL SKIN { get; set; }

        /// <summary>
        /// Gets or Sets CAPE
        /// </summary>
        [DataMember(Name="CAPE", EmitDefaultValue=false)]
        public PlayerTextureURL CAPE { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlayerTexture {\n");
            sb.Append("  SKIN: ").Append(SKIN).Append("\n");
            sb.Append("  CAPE: ").Append(CAPE).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlayerTexture);
        }

        /// <summary>
        /// Returns true if PlayerTexture instances are equal
        /// </summary>
        /// <param name="input">Instance of PlayerTexture to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlayerTexture input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SKIN == input.SKIN ||
                    (this.SKIN != null &&
                    this.SKIN.Equals(input.SKIN))
                ) && 
                (
                    this.CAPE == input.CAPE ||
                    (this.CAPE != null &&
                    this.CAPE.Equals(input.CAPE))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SKIN != null)
                    hashCode = hashCode * 59 + this.SKIN.GetHashCode();
                if (this.CAPE != null)
                    hashCode = hashCode * 59 + this.CAPE.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
