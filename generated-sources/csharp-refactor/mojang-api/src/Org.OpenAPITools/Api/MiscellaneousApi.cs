/* 
 * Mojang API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMiscellaneousApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get statistics on the sales of Minecraft.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatisticsRequest">The payload is a json list of options under the metricKeys key. You will receive a single object corresponding to the sum of sales of the requested type(s). You must request at least one type of sale. Below is the default list used by https://minecraft.net/en/stats/</param>
        /// <returns>OrderStatisticsResponse</returns>
        OrderStatisticsResponse GetOrdersStatistics (OrderStatisticsRequest orderStatisticsRequest);

        /// <summary>
        /// Get statistics on the sales of Minecraft.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatisticsRequest">The payload is a json list of options under the metricKeys key. You will receive a single object corresponding to the sum of sales of the requested type(s). You must request at least one type of sale. Below is the default list used by https://minecraft.net/en/stats/</param>
        /// <returns>ApiResponse of OrderStatisticsResponse</returns>
        ApiResponse<OrderStatisticsResponse> GetOrdersStatisticsWithHttpInfo (OrderStatisticsRequest orderStatisticsRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMiscellaneousApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get statistics on the sales of Minecraft.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatisticsRequest">The payload is a json list of options under the metricKeys key. You will receive a single object corresponding to the sum of sales of the requested type(s). You must request at least one type of sale. Below is the default list used by https://minecraft.net/en/stats/</param>
        /// <returns>Task of OrderStatisticsResponse</returns>
        System.Threading.Tasks.Task<OrderStatisticsResponse> GetOrdersStatisticsAsync (OrderStatisticsRequest orderStatisticsRequest);

        /// <summary>
        /// Get statistics on the sales of Minecraft.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatisticsRequest">The payload is a json list of options under the metricKeys key. You will receive a single object corresponding to the sum of sales of the requested type(s). You must request at least one type of sale. Below is the default list used by https://minecraft.net/en/stats/</param>
        /// <returns>Task of ApiResponse (OrderStatisticsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderStatisticsResponse>> GetOrdersStatisticsAsyncWithHttpInfo (OrderStatisticsRequest orderStatisticsRequest);
        #endregion Asynchronous Operations
    }

    public interface IMiscellaneousApi : IMiscellaneousApiSync, IMiscellaneousApiAsync
    {
        
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MiscellaneousApi : IMiscellaneousApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MiscellaneousApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MiscellaneousApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MiscellaneousApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MiscellaneousApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MiscellaneousApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MiscellaneousApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MiscellaneousApi(Org.OpenAPITools.Client.ISynchronousClient client,Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");
            
            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get statistics on the sales of Minecraft. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatisticsRequest">The payload is a json list of options under the metricKeys key. You will receive a single object corresponding to the sum of sales of the requested type(s). You must request at least one type of sale. Below is the default list used by https://minecraft.net/en/stats/</param>
        /// <returns>OrderStatisticsResponse</returns>
        public OrderStatisticsResponse GetOrdersStatistics (OrderStatisticsRequest orderStatisticsRequest)
        {
             Org.OpenAPITools.Client.ApiResponse<OrderStatisticsResponse> localVarResponse = GetOrdersStatisticsWithHttpInfo(orderStatisticsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get statistics on the sales of Minecraft. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatisticsRequest">The payload is a json list of options under the metricKeys key. You will receive a single object corresponding to the sum of sales of the requested type(s). You must request at least one type of sale. Below is the default list used by https://minecraft.net/en/stats/</param>
        /// <returns>ApiResponse of OrderStatisticsResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse< OrderStatisticsResponse > GetOrdersStatisticsWithHttpInfo (OrderStatisticsRequest orderStatisticsRequest)
        {
            // verify the required parameter 'orderStatisticsRequest' is set
            if (orderStatisticsRequest == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'orderStatisticsRequest' when calling MiscellaneousApi->GetOrdersStatistics");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = orderStatisticsRequest;

            // authentication (MojangStatisticsToken) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = this.Client.Post< OrderStatisticsResponse >("/orders/statistics", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetOrdersStatistics", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get statistics on the sales of Minecraft. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatisticsRequest">The payload is a json list of options under the metricKeys key. You will receive a single object corresponding to the sum of sales of the requested type(s). You must request at least one type of sale. Below is the default list used by https://minecraft.net/en/stats/</param>
        /// <returns>Task of OrderStatisticsResponse</returns>
        public async System.Threading.Tasks.Task<OrderStatisticsResponse> GetOrdersStatisticsAsync (OrderStatisticsRequest orderStatisticsRequest)
        {
             Org.OpenAPITools.Client.ApiResponse<OrderStatisticsResponse> localVarResponse = await GetOrdersStatisticsAsyncWithHttpInfo(orderStatisticsRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get statistics on the sales of Minecraft. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatisticsRequest">The payload is a json list of options under the metricKeys key. You will receive a single object corresponding to the sum of sales of the requested type(s). You must request at least one type of sale. Below is the default list used by https://minecraft.net/en/stats/</param>
        /// <returns>Task of ApiResponse (OrderStatisticsResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OrderStatisticsResponse>> GetOrdersStatisticsAsyncWithHttpInfo (OrderStatisticsRequest orderStatisticsRequest)
        {
            // verify the required parameter 'orderStatisticsRequest' is set
            if (orderStatisticsRequest == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'orderStatisticsRequest' when calling MiscellaneousApi->GetOrdersStatistics");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = orderStatisticsRequest;

            // authentication (MojangStatisticsToken) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Org.OpenAPITools.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<OrderStatisticsResponse>("/orders/statistics", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetOrdersStatistics", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
