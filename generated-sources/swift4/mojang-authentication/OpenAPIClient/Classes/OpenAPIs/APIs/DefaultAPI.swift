//
// DefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class DefaultAPI {
    /**

     - parameter authenticationRequest: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authenticate(authenticationRequest: AuthenticationRequest, completion: @escaping ((_ data: Authentication?,_ error: Error?) -> Void)) {
        authenticateWithRequestBuilder(authenticationRequest: authenticationRequest).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /authenticate
     - parameter authenticationRequest: (body)  
     - returns: RequestBuilder<Authentication> 
     */
    open class func authenticateWithRequestBuilder(authenticationRequest: AuthenticationRequest) -> RequestBuilder<Authentication> {
        let path = "/authenticate"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticationRequest)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Authentication>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter accessKeys: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func invalidate(accessKeys: AccessKeys, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        invalidateWithRequestBuilder(accessKeys: accessKeys).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /invalidate
     - parameter accessKeys: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func invalidateWithRequestBuilder(accessKeys: AccessKeys) -> RequestBuilder<Void> {
        let path = "/invalidate"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: accessKeys)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter refreshRequest: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func refresh(refreshRequest: RefreshRequest, completion: @escaping ((_ data: RefreshResponse?,_ error: Error?) -> Void)) {
        refreshWithRequestBuilder(refreshRequest: refreshRequest).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /refresh
     - parameter refreshRequest: (body)  
     - returns: RequestBuilder<RefreshResponse> 
     */
    open class func refreshWithRequestBuilder(refreshRequest: RefreshRequest) -> RequestBuilder<RefreshResponse> {
        let path = "/refresh"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: refreshRequest)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RefreshResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter usernamePassword: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func siginout(usernamePassword: UsernamePassword, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        siginoutWithRequestBuilder(usernamePassword: usernamePassword).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /signout
     - parameter usernamePassword: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func siginoutWithRequestBuilder(usernamePassword: UsernamePassword) -> RequestBuilder<Void> {
        let path = "/signout"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: usernamePassword)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter accessKeys: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func validate(accessKeys: AccessKeys, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        validateWithRequestBuilder(accessKeys: accessKeys).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /validate
     - parameter accessKeys: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func validateWithRequestBuilder(accessKeys: AccessKeys) -> RequestBuilder<Void> {
        let path = "/validate"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: accessKeys)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
