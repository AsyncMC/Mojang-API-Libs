# coding: utf-8

"""
    Mojang API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 2020-06-05
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class OrderStatisticsResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'total': 'int',
        'last24h': 'int',
        'sale_velocity_per_seconds': 'float'
    }

    attribute_map = {
        'total': 'total',
        'last24h': 'last24h',
        'sale_velocity_per_seconds': 'saleVelocityPerSeconds'
    }

    def __init__(self, total=None, last24h=None, sale_velocity_per_seconds=None):  # noqa: E501
        """OrderStatisticsResponse - a model defined in OpenAPI"""  # noqa: E501

        self._total = None
        self._last24h = None
        self._sale_velocity_per_seconds = None
        self.discriminator = None

        self.total = total
        self.last24h = last24h
        self.sale_velocity_per_seconds = sale_velocity_per_seconds

    @property
    def total(self):
        """Gets the total of this OrderStatisticsResponse.  # noqa: E501

        total amount sold  # noqa: E501

        :return: The total of this OrderStatisticsResponse.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this OrderStatisticsResponse.

        total amount sold  # noqa: E501

        :param total: The total of this OrderStatisticsResponse.  # noqa: E501
        :type: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501

        self._total = total

    @property
    def last24h(self):
        """Gets the last24h of this OrderStatisticsResponse.  # noqa: E501

        total sold in last 24 hours  # noqa: E501

        :return: The last24h of this OrderStatisticsResponse.  # noqa: E501
        :rtype: int
        """
        return self._last24h

    @last24h.setter
    def last24h(self, last24h):
        """Sets the last24h of this OrderStatisticsResponse.

        total sold in last 24 hours  # noqa: E501

        :param last24h: The last24h of this OrderStatisticsResponse.  # noqa: E501
        :type: int
        """
        if last24h is None:
            raise ValueError("Invalid value for `last24h`, must not be `None`")  # noqa: E501

        self._last24h = last24h

    @property
    def sale_velocity_per_seconds(self):
        """Gets the sale_velocity_per_seconds of this OrderStatisticsResponse.  # noqa: E501

        decimal average sales per second  # noqa: E501

        :return: The sale_velocity_per_seconds of this OrderStatisticsResponse.  # noqa: E501
        :rtype: float
        """
        return self._sale_velocity_per_seconds

    @sale_velocity_per_seconds.setter
    def sale_velocity_per_seconds(self, sale_velocity_per_seconds):
        """Sets the sale_velocity_per_seconds of this OrderStatisticsResponse.

        decimal average sales per second  # noqa: E501

        :param sale_velocity_per_seconds: The sale_velocity_per_seconds of this OrderStatisticsResponse.  # noqa: E501
        :type: float
        """
        if sale_velocity_per_seconds is None:
            raise ValueError("Invalid value for `sale_velocity_per_seconds`, must not be `None`")  # noqa: E501

        self._sale_velocity_per_seconds = sale_velocity_per_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderStatisticsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
