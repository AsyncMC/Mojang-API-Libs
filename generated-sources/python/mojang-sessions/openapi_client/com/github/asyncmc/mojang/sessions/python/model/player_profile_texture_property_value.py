# coding: utf-8

"""
    Mojang Session API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 2020-06-05
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PlayerProfileTexturePropertyValue(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'timestamp': 'int',
        'profile_id': 'str',
        'profile_name': 'str',
        'signature_required': 'bool',
        'textures': 'PlayerTexture'
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'profile_id': 'profileId',
        'profile_name': 'profileName',
        'signature_required': 'signatureRequired',
        'textures': 'textures'
    }

    def __init__(self, timestamp=None, profile_id=None, profile_name=None, signature_required=False, textures=None):  # noqa: E501
        """PlayerProfileTexturePropertyValue - a model defined in OpenAPI"""  # noqa: E501

        self._timestamp = None
        self._profile_id = None
        self._profile_name = None
        self._signature_required = None
        self._textures = None
        self.discriminator = None

        self.timestamp = timestamp
        self.profile_id = profile_id
        self.profile_name = profile_name
        if signature_required is not None:
            self.signature_required = signature_required
        if textures is not None:
            self.textures = textures

    @property
    def timestamp(self):
        """Gets the timestamp of this PlayerProfileTexturePropertyValue.  # noqa: E501

        UNIX timestamp in milliseconds  # noqa: E501

        :return: The timestamp of this PlayerProfileTexturePropertyValue.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this PlayerProfileTexturePropertyValue.

        UNIX timestamp in milliseconds  # noqa: E501

        :param timestamp: The timestamp of this PlayerProfileTexturePropertyValue.  # noqa: E501
        :type: int
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def profile_id(self):
        """Gets the profile_id of this PlayerProfileTexturePropertyValue.  # noqa: E501

        The player UUID without hyphens  # noqa: E501

        :return: The profile_id of this PlayerProfileTexturePropertyValue.  # noqa: E501
        :rtype: str
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this PlayerProfileTexturePropertyValue.

        The player UUID without hyphens  # noqa: E501

        :param profile_id: The profile_id of this PlayerProfileTexturePropertyValue.  # noqa: E501
        :type: str
        """
        if profile_id is None:
            raise ValueError("Invalid value for `profile_id`, must not be `None`")  # noqa: E501

        self._profile_id = profile_id

    @property
    def profile_name(self):
        """Gets the profile_name of this PlayerProfileTexturePropertyValue.  # noqa: E501

        The player's name  # noqa: E501

        :return: The profile_name of this PlayerProfileTexturePropertyValue.  # noqa: E501
        :rtype: str
        """
        return self._profile_name

    @profile_name.setter
    def profile_name(self, profile_name):
        """Sets the profile_name of this PlayerProfileTexturePropertyValue.

        The player's name  # noqa: E501

        :param profile_name: The profile_name of this PlayerProfileTexturePropertyValue.  # noqa: E501
        :type: str
        """
        if profile_name is None:
            raise ValueError("Invalid value for `profile_name`, must not be `None`")  # noqa: E501

        self._profile_name = profile_name

    @property
    def signature_required(self):
        """Gets the signature_required of this PlayerProfileTexturePropertyValue.  # noqa: E501

        Only present if unsigned was set to false in the request  # noqa: E501

        :return: The signature_required of this PlayerProfileTexturePropertyValue.  # noqa: E501
        :rtype: bool
        """
        return self._signature_required

    @signature_required.setter
    def signature_required(self, signature_required):
        """Sets the signature_required of this PlayerProfileTexturePropertyValue.

        Only present if unsigned was set to false in the request  # noqa: E501

        :param signature_required: The signature_required of this PlayerProfileTexturePropertyValue.  # noqa: E501
        :type: bool
        """

        self._signature_required = signature_required

    @property
    def textures(self):
        """Gets the textures of this PlayerProfileTexturePropertyValue.  # noqa: E501


        :return: The textures of this PlayerProfileTexturePropertyValue.  # noqa: E501
        :rtype: PlayerTexture
        """
        return self._textures

    @textures.setter
    def textures(self, textures):
        """Sets the textures of this PlayerProfileTexturePropertyValue.


        :param textures: The textures of this PlayerProfileTexturePropertyValue.  # noqa: E501
        :type: PlayerTexture
        """

        self._textures = textures

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlayerProfileTexturePropertyValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
