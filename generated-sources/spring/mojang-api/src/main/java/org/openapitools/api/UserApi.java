/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Error;
import java.util.List;
import org.openapitools.model.NameChange;
import org.springframework.core.io.Resource;
import org.openapitools.model.SecurityAnswer;
import org.openapitools.model.SecurityChallenge;
import org.openapitools.model.SkinModel;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-06-05T23:36:11.663568600-03:00[America/Sao_Paulo]")

@Validated
@Api(value = "user", description = "the user API")
public interface UserApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "Changes the player skin by URL", nickname = "changePlayerSkin", notes = "This will set the skin for the selected profile, but Mojang's servers will fetch the skin from a URL. This will also work for legacy accounts.", authorizations = {
        @Authorization(value = "PlayerAccessToken")
    }, tags={ "Skin Operations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The skin has been changed. The response has no body"),
        @ApiResponse(code = 400, message = "Upon error the server will send back a JSON with the error. (Success is a blank payload)", response = Error.class) })
    @RequestMapping(value = "/user/profile/{stripped_uuid}/skin",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> changePlayerSkin(@ApiParam(value = "The player UUID without hyphens",required=true) @PathVariable("stripped_uuid") String strippedUuid,@ApiParam(value = "The URL which Mojang servers will download and apply the skin", required=true) @RequestParam(value="url", required=true)  String url,@ApiParam(value = "", defaultValue="null") @RequestParam(value="model", required=false)  SkinModel model) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Check if security questions are needed", nickname = "checkSecurityStatus", notes = "", authorizations = {
        @Authorization(value = "PlayerAccessToken")
    }, tags={ "Security question-answer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No check is needed."),
        @ApiResponse(code = 400, message = "A security check is needed or there is an other issue", response = Error.class) })
    @RequestMapping(value = "/user/security/location",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Void> checkSecurityStatus() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Gets the full player's name history", nickname = "getNameHistory", notes = "", response = NameChange.class, responseContainer = "List", tags={ "Name History", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of name changes, the first entry usually don't have a change time", response = NameChange.class, responseContainer = "List"),
        @ApiResponse(code = 204, message = "Username not found at the given time") })
    @RequestMapping(value = "/user/profiles/{stripped_uuid}/names",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<NameChange>> getNameHistory(@ApiParam(value = "The player UUID without hyphens",required=true) @PathVariable("stripped_uuid") String strippedUuid) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Get list of questions", nickname = "listPendingSecurityQuestions", notes = "", response = SecurityChallenge.class, responseContainer = "List", authorizations = {
        @Authorization(value = "PlayerAccessToken")
    }, tags={ "Security question-answer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of security questions to be answered", response = SecurityChallenge.class, responseContainer = "List") })
    @RequestMapping(value = "/user/security/challenges",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<SecurityChallenge>> listPendingSecurityQuestions() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"question\" : {    \"question\" : \"What is your dream job?\",    \"id\" : 37  },  \"answer\" : {    \"id\" : 593  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Resets the player skin to default", nickname = "resetPlayerSkin", notes = "", authorizations = {
        @Authorization(value = "PlayerAccessToken")
    }, tags={ "Skin Operations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The skin has been changed. The response has no body"),
        @ApiResponse(code = 400, message = "Upon error the server will send back a JSON with the error. (Success is a blank payload)", response = Error.class) })
    @RequestMapping(value = "/user/profile/{stripped_uuid}/skin",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> resetPlayerSkin(@ApiParam(value = "The player UUID without hyphens",required=true) @PathVariable("stripped_uuid") String strippedUuid) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Send back the answers", nickname = "sendSecurityQuestionAnswers", notes = "", authorizations = {
        @Authorization(value = "PlayerAccessToken")
    }, tags={ "Security question-answer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The answers were accepted"),
        @ApiResponse(code = 400, message = "At least one answer we not accepted", response = Error.class) })
    @RequestMapping(value = "/user/security/location",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> sendSecurityQuestionAnswers(@ApiParam(value = "An array with all the answers" ,required=true )  @Valid @RequestBody List<SecurityAnswer> securityAnswer) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Changes the player skin by upload", nickname = "uploadPlayerSkin", notes = "This uploads a skin to Mojang's servers. It also sets the users skin. This works on legacy counts as well.", authorizations = {
        @Authorization(value = "PlayerAccessToken")
    }, tags={ "Skin Operations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The skin has been changed. The response has no body"),
        @ApiResponse(code = 400, message = "Upon error the server will send back a JSON with the error. (Success is a blank payload)", response = Error.class) })
    @RequestMapping(value = "/user/profile/{stripped_uuid}/skin",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> uploadPlayerSkin(@ApiParam(value = "The player UUID without hyphens",required=true) @PathVariable("stripped_uuid") String strippedUuid,@ApiParam(value = "file detail") @Valid @RequestPart("file") MultipartFile file,@ApiParam(value = "", defaultValue="null") @RequestParam(value="model", required=false)  SkinModel model) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
