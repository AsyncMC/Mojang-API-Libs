/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.github.asyncmc.mojang.sessions.spring.api;

import com.github.asyncmc.mojang.sessions.spring.model.PlayerProfile;
import com.github.asyncmc.mojang.sessions.spring.model.SessionApiError;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-06-06T02:35:21.224447500-03:00[America/Sao_Paulo]")

@Validated
@Api(value = "session", description = "the session API")
public interface SessionApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "Gets the player's game profile", nickname = "getPlayerProfile", notes = "This will return the player's username plus any additional information about them (e.g. skins). This has a much stricter rate limit: You can request the same profile once per minute, however you can send as many unique requests as you like.", response = PlayerProfile.class, tags={ "Login", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The player profile and all properties", response = PlayerProfile.class),
        @ApiResponse(code = 400, message = "UUID is invalid", response = SessionApiError.class) })
    @RequestMapping(value = "/session/minecraft/profile/{stripped_uuid}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<PlayerProfile> getPlayerProfile(@ApiParam(value = "The player UUID without hyphens",required=true) @PathVariable("stripped_uuid") String strippedUuid,@ApiParam(value = "When set to false, the signature data are sent") @Valid @RequestParam(value = "unsigned", required = false) Boolean unsigned) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"legacy\" : false,  \"name\" : \"jeb_\",  \"id\" : \"853c80ef3c3749fdaa49938b674adae6\",  \"properties\" : [ {    \"signature\" : \"signature\",    \"name\" : \"textures\",    \"value\" : \"value\"  }, {    \"signature\" : \"signature\",    \"name\" : \"textures\",    \"value\" : \"value\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
