<?php

/**
 * SecurityQuestionAnswerController
 * PHP version 5
 *
 * @category Class
 * @package  com.github.asyncmc.mojang.api.php.symfony.server\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Mojang API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace com.github.asyncmc.mojang.api.php.symfony.server\Controller;

use \Exception;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\Validator\Constraints as Assert;
use com.github.asyncmc.mojang.api.php.symfony.server\com.github.asyncmc.mojang.api.php.symfony.api\SecurityQuestionAnswerApiInterface;
use com.github.asyncmc.mojang.api.php.symfony.server\com.github.asyncmc.mojang.api.php.symfony.model\Error;
use com.github.asyncmc.mojang.api.php.symfony.server\com.github.asyncmc.mojang.api.php.symfony.model\SecurityAnswer;
use com.github.asyncmc.mojang.api.php.symfony.server\com.github.asyncmc.mojang.api.php.symfony.model\SecurityChallenge;

/**
 * SecurityQuestionAnswerController Class Doc Comment
 *
 * @category Class
 * @package  com.github.asyncmc.mojang.api.php.symfony.server\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
class SecurityQuestionAnswerController extends Controller
{

    /**
     * Operation checkSecurityStatus
     *
     * Check if security questions are needed
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function checkSecurityStatusAction(Request $request)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'PlayerAccessToken' required
        // HTTP basic authentication required
        $securityPlayerAccessToken = $request->headers->get('authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it

        // Validate the input values


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'PlayerAccessToken'
            $handler->setPlayerAccessToken($securityPlayerAccessToken);
            
            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];
            $result = $handler->checkSecurityStatus($responseCode, $responseHeaders);

            // Find default response message
            $message = 'No check is needed.';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'No check is needed.';
                    break;
                case 400:
                    $message = 'A security check is needed or there is an other issue';
                    break;
            }

            return new Response(
                $result?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation listPendingSecurityQuestions
     *
     * Get list of questions
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function listPendingSecurityQuestionsAction(Request $request)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'PlayerAccessToken' required
        // HTTP basic authentication required
        $securityPlayerAccessToken = $request->headers->get('authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it

        // Validate the input values


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'PlayerAccessToken'
            $handler->setPlayerAccessToken($securityPlayerAccessToken);
            
            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];
            $result = $handler->listPendingSecurityQuestions($responseCode, $responseHeaders);

            // Find default response message
            $message = 'A list of security questions to be answered';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = 'A list of security questions to be answered';
                    break;
            }

            return new Response(
                $result?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation sendSecurityQuestionAnswers
     *
     * Send back the answers
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function sendSecurityQuestionAnswersAction(Request $request)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        $inputFormat = $request->headers->has('Content-Type')?$request->headers->get('Content-Type'):$consumes[0];
        if (!in_array($inputFormat, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'PlayerAccessToken' required
        // HTTP basic authentication required
        $securityPlayerAccessToken = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $securityAnswer = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        $securityAnswer = $this->deserialize($securityAnswer, 'array<com.github.asyncmc.mojang.api.php.symfony.server\com.github.asyncmc.mojang.api.php.symfony.model\SecurityAnswer>', $inputFormat);

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\All([
            new Assert\Type("com.github.asyncmc.mojang.api.php.symfony.server\com.github.asyncmc.mojang.api.php.symfony.model\SecurityAnswer")
        ]);
        $response = $this->validate($securityAnswer, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'PlayerAccessToken'
            $handler->setPlayerAccessToken($securityPlayerAccessToken);
            
            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];
            $result = $handler->sendSecurityQuestionAnswers($securityAnswer, $responseCode, $responseHeaders);

            // Find default response message
            $message = 'The answers were accepted';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'The answers were accepted';
                    break;
                case 400:
                    $message = 'At least one answer we not accepted';
                    break;
            }

            return new Response(
                $result?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Returns the handler for this API controller.
     * @return SecurityQuestionAnswerApiInterface
     */
    public function getApiHandler()
    {
        return $this->apiServer->getApiHandler('securityQuestionAnswer');
    }
}
