// Models.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> Any
}

public enum ErrorResponse : Error {
    case HttpError(statusCode: Int, data: Data?, error: Error)
    case DecodeError(response: Data?, decodeError: DecodeError)
}

open class Response<T> {
    open let statusCode: Int
    open let header: [String: String]
    open let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: HTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for case let (key, value) as (String, String) in rawHeader {
            header[key] = value
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

public enum Decoded<ValueType> {
    case success(ValueType)
    case failure(DecodeError)
}

public extension Decoded {
    var value: ValueType? {
        switch self {
        case let .success(value):
            return value
        case .failure:
            return nil
        }
    }
}

public enum DecodeError {
    case typeMismatch(expected: String, actual: String)
    case missingKey(key: String)
    case parseError(message: String)
}

private var once = Int()
class Decoders {
    static fileprivate var decoders = Dictionary<String, ((AnyObject, AnyObject?) -> AnyObject)>()

    static func addDecoder<T>(clazz: T.Type, decoder: @escaping ((AnyObject, AnyObject?) -> Decoded<T>)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0, $1) as AnyObject }
    }

    static func decode<T>(clazz: T.Type, discriminator: String, source: AnyObject) -> Decoded<T> {
        let key = discriminator
        if let decoder = decoders[key], let value = decoder(source, nil) as? Decoded<T> {
            return value
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decode<T>(clazz: [T].Type, source: AnyObject) -> Decoded<[T]> {
        if let sourceArray = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in sourceArray {
                switch Decoders.decode(clazz: T.self, source: sourceValue, instance: nil) {
                case let .success(value):
                    values.append(value)
                case let .failure(error):
                    return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decode<T>(clazz: T.Type, source: AnyObject) -> Decoded<T> {
        switch Decoders.decode(clazz: T.self, source: source, instance: nil) {
    	    case let .success(value):
                return .success(value)
            case let .failure(error):
                return .failure(error)
        }
    }

    static open func decode<T: RawRepresentable>(clazz: T.Type, source: AnyObject) -> Decoded<T> {
        if let value = source as? T.RawValue {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "\(T.RawValue.self) matching a case from the enumeration \(T.self)", actual: String(describing: type(of: source))))
        }
    }

    static func decode<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject) -> Decoded<[Key:T]> {
        if let sourceDictionary = source as? [Key: AnyObject] {
            var dictionary = [Key:T]()
            for (key, value) in sourceDictionary {
                switch Decoders.decode(clazz: T.self, source: value, instance: nil) {
                case let .success(value):
                    dictionary[key] = value
                case let .failure(error):
                    return .failure(error)
                }
            }
            return .success(dictionary)
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decodeOptional<T: RawRepresentable>(clazz: T.Type, source: AnyObject?) -> Decoded<T?> {
        guard !(source is NSNull), source != nil else { return .success(nil) }
        if let value = source as? T.RawValue {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "\(T.RawValue.self) matching a case from the enumeration \(T.self)", actual: String(describing: type(of: source))))
        }
    }

    static func decode<T>(clazz: T.Type, source: AnyObject, instance: AnyObject?) -> Decoded<T> {
        initialize()
        if let sourceNumber = source as? NSNumber, let value = sourceNumber.int32Value as? T, T.self is Int32.Type {
            return .success(value)
        }
        if let sourceNumber = source as? NSNumber, let value = sourceNumber.int32Value as? T, T.self is Int64.Type {
     	    return .success(value)
        }
        if let intermediate = source as? String, let value = UUID(uuidString: intermediate) as? T, source is String, T.self is UUID.Type {
            return .success(value)
        }
        if let value = source as? T {
            return .success(value)
        }
        if let intermediate = source as? String, let value = Data(base64Encoded: intermediate) as? T {
            return .success(value)
        }

        let key = "\(T.self)"
        if let decoder = decoders[key], let value = decoder(source, instance) as? Decoded<T> {
           return value
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    //Convert a Decoded so that its value is optional. DO WE STILL NEED THIS?
    static func toOptional<T>(decoded: Decoded<T>) -> Decoded<T?> {
        return .success(decoded.value)
    }

    static func decodeOptional<T>(clazz: T.Type, source: AnyObject?) -> Decoded<T?> {
        if let source = source, !(source is NSNull) {
            switch Decoders.decode(clazz: clazz, source: source, instance: nil) {
            case let .success(value): return .success(value)
            case let .failure(error): return .failure(error)
            }
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> Decoded<[T]?> where T: RawRepresentable {
        if let source = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in source {
                switch Decoders.decodeOptional(clazz: T.self, source: sourceValue) {
                case let .success(value): if let value = value { values.append(value) }
                case let .failure(error): return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> Decoded<[T]?> {
        if let source = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in source {
                switch Decoders.decode(clazz: T.self, source: sourceValue, instance: nil) {
                case let .success(value): values.append(value)
                case let .failure(error): return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject?) -> Decoded<[Key:T]?> {
        if let sourceDictionary = source as? [Key: AnyObject] {
            var dictionary = [Key:T]()
            for (key, value) in sourceDictionary {
                switch Decoders.decode(clazz: T.self, source: value, instance: nil) {
                case let .success(value): dictionary[key] = value
                case let .failure(error): return .failure(error)
                }
            }
            return .success(dictionary)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T: RawRepresentable, U: AnyObject>(clazz: T, source: AnyObject) -> Decoded<T?> where T.RawValue == U {
        if let value = source as? U {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "String", actual: String(describing: type(of: source))))
        }
    }


    private static var __once: () = {
        let formatters = [
            "yyyy-MM-dd",
            "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss'Z'",
            "yyyy-MM-dd'T'HH:mm:ss.SSS",
            "yyyy-MM-dd HH:mm:ss"
        ].map { (format: String) -> DateFormatter in
            let formatter = DateFormatter()
            formatter.locale = Locale(identifier: "en_US_POSIX")
            formatter.dateFormat = format
            return formatter
        }
        // Decoder for Date
        Decoders.addDecoder(clazz: Date.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Date> in
           if let sourceString = source as? String {
                for formatter in formatters {
                    if let date = formatter.date(from: sourceString) {
                        return .success(date)
                    }
                }
            }
            if let sourceInt = source as? Int {
                // treat as a java date
                return .success(Date(timeIntervalSince1970: Double(sourceInt / 1000) ))
            }
            if source is String || source is Int {
                return .failure(.parseError(message: "Could not decode date"))
            } else {
                return .failure(.typeMismatch(expected: "String or Int", actual: "\(source)"))
            }
        }

        // Decoder for ISOFullDate
        Decoders.addDecoder(clazz: ISOFullDate.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ISOFullDate> in
            if let string = source as? String,
               let isoDate = ISOFullDate.from(string: string) {
                return .success(isoDate)
            } else {
            	return .failure(.typeMismatch(expected: "ISO date", actual: "\(source)"))
            }
        }

        // Decoder for [ChangeSkinRequest]
        Decoders.addDecoder(clazz: [ChangeSkinRequest].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ChangeSkinRequest]> in
            return Decoders.decode(clazz: [ChangeSkinRequest].self, source: source)
        }

        // Decoder for ChangeSkinRequest
        Decoders.addDecoder(clazz: ChangeSkinRequest.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ChangeSkinRequest> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ChangeSkinRequest() : instance as! ChangeSkinRequest
                switch Decoders.decodeOptional(clazz: SkinModel.self, source: sourceDictionary["model"] as AnyObject?) {
                
                case let .success(value): _result.model = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"] as AnyObject?) {
                
                case let .success(value): _result.url = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ChangeSkinRequest", actual: "\(source)"))
            }
        }
        // Decoder for [CurrentPlayerIDs]
        Decoders.addDecoder(clazz: [CurrentPlayerIDs].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[CurrentPlayerIDs]> in
            return Decoders.decode(clazz: [CurrentPlayerIDs].self, source: source)
        }

        // Decoder for CurrentPlayerIDs
        Decoders.addDecoder(clazz: CurrentPlayerIDs.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<CurrentPlayerIDs> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? CurrentPlayerIDs() : instance as! CurrentPlayerIDs
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): _result.id = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["legacy"] as AnyObject?) {
                
                case let .success(value): _result.legacy = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["demo"] as AnyObject?) {
                
                case let .success(value): _result.demo = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "CurrentPlayerIDs", actual: "\(source)"))
            }
        }
        // Decoder for [ModelError]
        Decoders.addDecoder(clazz: [ModelError].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ModelError]> in
            return Decoders.decode(clazz: [ModelError].self, source: source)
        }

        // Decoder for ModelError
        Decoders.addDecoder(clazz: ModelError.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ModelError> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ModelError() : instance as! ModelError
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"] as AnyObject?) {
                
                case let .success(value): _result.error = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["errorMessage"] as AnyObject?) {
                
                case let .success(value): _result.errorMessage = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ModelError", actual: "\(source)"))
            }
        }
        // Decoder for [NameChange]
        Decoders.addDecoder(clazz: [NameChange].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[NameChange]> in
            return Decoders.decode(clazz: [NameChange].self, source: source)
        }

        // Decoder for NameChange
        Decoders.addDecoder(clazz: NameChange.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<NameChange> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? NameChange() : instance as! NameChange
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): _result.name = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["changedToAt"] as AnyObject?) {
                
                case let .success(value): _result.changedToAt = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "NameChange", actual: "\(source)"))
            }
        }
        // Decoder for [OrderStatistic]
        Decoders.addDecoder(clazz: [OrderStatistic].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrderStatistic]> in
            return Decoders.decode(clazz: [OrderStatistic].self, source: source)
        }

        // Decoder for OrderStatistic
        Decoders.addDecoder(clazz: OrderStatistic.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrderStatistic> in
            //TODO: I don't think we need this anymore
            return Decoders.decode(clazz: OrderStatistic.self, source: source, instance: instance)
        }
        // Decoder for [OrderStatisticsRequest]
        Decoders.addDecoder(clazz: [OrderStatisticsRequest].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrderStatisticsRequest]> in
            return Decoders.decode(clazz: [OrderStatisticsRequest].self, source: source)
        }

        // Decoder for OrderStatisticsRequest
        Decoders.addDecoder(clazz: OrderStatisticsRequest.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrderStatisticsRequest> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrderStatisticsRequest() : instance as! OrderStatisticsRequest
                switch Decoders.decodeOptional(clazz: [OrderStatistic].self, source: sourceDictionary["metricKeys"] as AnyObject?) {
                
                case let .success(value): _result.metricKeys = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrderStatisticsRequest", actual: "\(source)"))
            }
        }
        // Decoder for [OrderStatisticsResponse]
        Decoders.addDecoder(clazz: [OrderStatisticsResponse].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OrderStatisticsResponse]> in
            return Decoders.decode(clazz: [OrderStatisticsResponse].self, source: source)
        }

        // Decoder for OrderStatisticsResponse
        Decoders.addDecoder(clazz: OrderStatisticsResponse.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OrderStatisticsResponse> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OrderStatisticsResponse() : instance as! OrderStatisticsResponse
                switch Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"] as AnyObject?) {
                
                case let .success(value): _result.total = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["last24h"] as AnyObject?) {
                
                case let .success(value): _result.last24h = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["saleVelocityPerSeconds"] as AnyObject?) {
                
                case let .success(value): _result.saleVelocityPerSeconds = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OrderStatisticsResponse", actual: "\(source)"))
            }
        }
        // Decoder for [SecurityAnswer]
        Decoders.addDecoder(clazz: [SecurityAnswer].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[SecurityAnswer]> in
            return Decoders.decode(clazz: [SecurityAnswer].self, source: source)
        }

        // Decoder for SecurityAnswer
        Decoders.addDecoder(clazz: SecurityAnswer.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<SecurityAnswer> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? SecurityAnswer() : instance as! SecurityAnswer
                if decoders["\(SecurityAnswerId.self)"] != nil {
                  _ = Decoders.decode(clazz: SecurityAnswerId.self, source: source, instance: _result)
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): _result.id = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "SecurityAnswer", actual: "\(source)"))
            }
        }
        // Decoder for [SecurityAnswerId]
        Decoders.addDecoder(clazz: [SecurityAnswerId].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[SecurityAnswerId]> in
            return Decoders.decode(clazz: [SecurityAnswerId].self, source: source)
        }

        // Decoder for SecurityAnswerId
        Decoders.addDecoder(clazz: SecurityAnswerId.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<SecurityAnswerId> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? SecurityAnswerId() : instance as! SecurityAnswerId
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): _result.id = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "SecurityAnswerId", actual: "\(source)"))
            }
        }
        // Decoder for [SecurityChallenge]
        Decoders.addDecoder(clazz: [SecurityChallenge].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[SecurityChallenge]> in
            return Decoders.decode(clazz: [SecurityChallenge].self, source: source)
        }

        // Decoder for SecurityChallenge
        Decoders.addDecoder(clazz: SecurityChallenge.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<SecurityChallenge> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? SecurityChallenge() : instance as! SecurityChallenge
                switch Decoders.decodeOptional(clazz: SecurityQuestion.self, source: sourceDictionary["question"] as AnyObject?) {
                
                case let .success(value): _result.question = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: SecurityAnswerId.self, source: sourceDictionary["answer"] as AnyObject?) {
                
                case let .success(value): _result.answer = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "SecurityChallenge", actual: "\(source)"))
            }
        }
        // Decoder for [SecurityQuestion]
        Decoders.addDecoder(clazz: [SecurityQuestion].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[SecurityQuestion]> in
            return Decoders.decode(clazz: [SecurityQuestion].self, source: source)
        }

        // Decoder for SecurityQuestion
        Decoders.addDecoder(clazz: SecurityQuestion.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<SecurityQuestion> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? SecurityQuestion() : instance as! SecurityQuestion
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): _result.id = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["question"] as AnyObject?) {
                
                case let .success(value): _result.question = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "SecurityQuestion", actual: "\(source)"))
            }
        }
        // Decoder for [SkinModel]
        Decoders.addDecoder(clazz: [SkinModel].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[SkinModel]> in
            return Decoders.decode(clazz: [SkinModel].self, source: source)
        }

        // Decoder for SkinModel
        Decoders.addDecoder(clazz: SkinModel.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<SkinModel> in
            //TODO: I don't think we need this anymore
            return Decoders.decode(clazz: SkinModel.self, source: source, instance: instance)
        }
        // Decoder for [UploadSkinRequest]
        Decoders.addDecoder(clazz: [UploadSkinRequest].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[UploadSkinRequest]> in
            return Decoders.decode(clazz: [UploadSkinRequest].self, source: source)
        }

        // Decoder for UploadSkinRequest
        Decoders.addDecoder(clazz: UploadSkinRequest.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<UploadSkinRequest> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? UploadSkinRequest() : instance as! UploadSkinRequest
                switch Decoders.decodeOptional(clazz: SkinModel.self, source: sourceDictionary["model"] as AnyObject?) {
                
                case let .success(value): _result.model = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: URL.self, source: sourceDictionary["file"] as AnyObject?) {
                
                case let .success(value): _result.file = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "UploadSkinRequest", actual: "\(source)"))
            }
        }
    }()

    static fileprivate func initialize() {
        _ = Decoders.__once
    }
}
