//
// SkinOperationsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire


open class SkinOperationsAPI: APIBase {
    /**
     Changes the player skin by URL
     - parameter strippedUuid: (path) The player UUID without hyphens 
     - parameter url: (form) The URL which Mojang servers will download and apply the skin 
     - parameter model: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func changePlayerSkin(strippedUuid: String, url: String, model: SkinModel? = nil, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        changePlayerSkinWithRequestBuilder(strippedUuid: strippedUuid, url: url, model: model).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Changes the player skin by URL
     - POST /user/profile/{stripped_uuid}/skin
     - This will set the skin for the selected profile, but Mojang's servers will fetch the skin from a URL. This will also work for legacy accounts.
     - BASIC:
       - type: http
       - name: PlayerAccessToken
     - parameter strippedUuid: (path) The player UUID without hyphens 
     - parameter url: (form) The URL which Mojang servers will download and apply the skin 
     - parameter model: (form)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func changePlayerSkinWithRequestBuilder(strippedUuid: String, url: String, model: SkinModel? = nil) -> RequestBuilder<Void> {
        var path = "/user/profile/{stripped_uuid}/skin"
        let strippedUuidPreEscape = "\(strippedUuid)"
        let strippedUuidPostEscape = strippedUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{stripped_uuid}", with: strippedUuidPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "model": model,
            "url": url
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Resets the player skin to default
     - parameter strippedUuid: (path) The player UUID without hyphens 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func resetPlayerSkin(strippedUuid: String, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        resetPlayerSkinWithRequestBuilder(strippedUuid: strippedUuid).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Resets the player skin to default
     - DELETE /user/profile/{stripped_uuid}/skin
     - BASIC:
       - type: http
       - name: PlayerAccessToken
     - parameter strippedUuid: (path) The player UUID without hyphens 
     - returns: RequestBuilder<Void> 
     */
    open class func resetPlayerSkinWithRequestBuilder(strippedUuid: String) -> RequestBuilder<Void> {
        var path = "/user/profile/{stripped_uuid}/skin"
        let strippedUuidPreEscape = "\(strippedUuid)"
        let strippedUuidPostEscape = strippedUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{stripped_uuid}", with: strippedUuidPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Changes the player skin by upload
     - parameter strippedUuid: (path) The player UUID without hyphens 
     - parameter file: (form) The skin image in PNG format 
     - parameter model: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func uploadPlayerSkin(strippedUuid: String, file: URL, model: SkinModel? = nil, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        uploadPlayerSkinWithRequestBuilder(strippedUuid: strippedUuid, file: file, model: model).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Changes the player skin by upload
     - PUT /user/profile/{stripped_uuid}/skin
     - This uploads a skin to Mojang's servers. It also sets the users skin. This works on legacy counts as well.
     - BASIC:
       - type: http
       - name: PlayerAccessToken
     - parameter strippedUuid: (path) The player UUID without hyphens 
     - parameter file: (form) The skin image in PNG format 
     - parameter model: (form)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func uploadPlayerSkinWithRequestBuilder(strippedUuid: String, file: URL, model: SkinModel? = nil) -> RequestBuilder<Void> {
        var path = "/user/profile/{stripped_uuid}/skin"
        let strippedUuidPreEscape = "\(strippedUuid)"
        let strippedUuidPostEscape = strippedUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{stripped_uuid}", with: strippedUuidPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "model": model,
            "file": file
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
