/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.NameHistoryApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 * Version: 2020-06-05
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.NameHistoryApi');

goog.require('API.Client.CurrentPlayerIDs');
goog.require('API.Client.Error');
goog.require('API.Client.NameChange');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.NameHistoryApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('NameHistoryApiBasePath') ?
                   /** @type {!string} */ ($injector.get('NameHistoryApiBasePath')) :
                   'https://api.mojang.com';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('NameHistoryApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('NameHistoryApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.NameHistoryApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Find the current UUID of multiple players at once
 * Find the current players name, UUID, demo status and migration flag by the current players name. The \&quot;at\&quot; parameter is not supported. Players not found are not returned. If no players are found, an empty array is returned.
 * @param {!Array<!string>} requestBody Array with the player names
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.CurrentPlayerIDs>>}
 */
API.Client.NameHistoryApi.prototype.findUniqueIdsByName = function(requestBody, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/profiles/minecraft';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'requestBody' is set
  if (!requestBody) {
    throw new Error('Missing required parameter requestBody when calling findUniqueIdsByName');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: requestBody,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Gets the full player&#39;s name history
 * 
 * @param {!string} strippedUuid The player UUID without hyphens
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.NameChange>>}
 */
API.Client.NameHistoryApi.prototype.getNameHistory = function(strippedUuid, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/user/profiles/{stripped_uuid}/names'
      .replace('{' + 'stripped_uuid' + '}', String(strippedUuid));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'strippedUuid' is set
  if (!strippedUuid) {
    throw new Error('Missing required parameter strippedUuid when calling getNameHistory');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Find the UUID by name
 * Find the current player name, UUID, demo status and migration flag by the current player name or at a given time.
 * @param {!string} username The username in a given time, or in present if \&quot;at\&quot; is not sent
 * @param {!number=} opt_at Find the username in a given time, when 0 selects the original name however, it only works if the name was changed at least once, or if the account is legacy. The time is an UNIX timestamp (without milliseconds)
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.CurrentPlayerIDs>}
 */
API.Client.NameHistoryApi.prototype.getUniqueIdByName = function(username, opt_at, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/users/profiles/minecraft/{username}'
      .replace('{' + 'username' + '}', String(username));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'username' is set
  if (!username) {
    throw new Error('Missing required parameter username when calling getUniqueIdByName');
  }
  if (opt_at !== undefined) {
    queryParameters['at'] = opt_at;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
