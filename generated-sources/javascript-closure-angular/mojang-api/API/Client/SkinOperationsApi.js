/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.SkinOperationsApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 * Version: 2020-06-05
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.SkinOperationsApi');

goog.require('API.Client.Error');
goog.require('API.Client.SkinModel');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.SkinOperationsApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('SkinOperationsApiBasePath') ?
                   /** @type {!string} */ ($injector.get('SkinOperationsApiBasePath')) :
                   'https://api.mojang.com';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('SkinOperationsApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('SkinOperationsApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.SkinOperationsApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Changes the player skin by URL
 * This will set the skin for the selected profile, but Mojang&#39;s servers will fetch the skin from a URL. This will also work for legacy accounts.
 * @param {!string} strippedUuid The player UUID without hyphens
 * @param {!string} url The URL which Mojang servers will download and apply the skin
 * @param {!API.Client.SkinModel=} opt_model 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.SkinOperationsApi.prototype.changePlayerSkin = function(strippedUuid, url, opt_model, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/user/profile/{stripped_uuid}/skin'
      .replace('{' + 'stripped_uuid' + '}', String(strippedUuid));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'strippedUuid' is set
  if (!strippedUuid) {
    throw new Error('Missing required parameter strippedUuid when calling changePlayerSkin');
  }
  // verify required parameter 'url' is set
  if (!url) {
    throw new Error('Missing required parameter url when calling changePlayerSkin');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['model'] = opt_model;

  formParams['url'] = url;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Resets the player skin to default
 * 
 * @param {!string} strippedUuid The player UUID without hyphens
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.SkinOperationsApi.prototype.resetPlayerSkin = function(strippedUuid, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/user/profile/{stripped_uuid}/skin'
      .replace('{' + 'stripped_uuid' + '}', String(strippedUuid));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'strippedUuid' is set
  if (!strippedUuid) {
    throw new Error('Missing required parameter strippedUuid when calling resetPlayerSkin');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Changes the player skin by upload
 * This uploads a skin to Mojang&#39;s servers. It also sets the users skin. This works on legacy counts as well.
 * @param {!string} strippedUuid The player UUID without hyphens
 * @param {!Object} file The skin image in PNG format
 * @param {!API.Client.SkinModel=} opt_model 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.SkinOperationsApi.prototype.uploadPlayerSkin = function(strippedUuid, file, opt_model, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/user/profile/{stripped_uuid}/skin'
      .replace('{' + 'stripped_uuid' + '}', String(strippedUuid));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'strippedUuid' is set
  if (!strippedUuid) {
    throw new Error('Missing required parameter strippedUuid when calling uploadPlayerSkin');
  }
  // verify required parameter 'file' is set
  if (!file) {
    throw new Error('Missing required parameter file when calling uploadPlayerSkin');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['model'] = opt_model;

  formParams['file'] = file;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
