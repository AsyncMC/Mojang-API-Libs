/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.SecurityQuestionAnswerApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 * Version: 2020-06-05
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.SecurityQuestionAnswerApi');

goog.require('API.Client.Error');
goog.require('API.Client.SecurityAnswer');
goog.require('API.Client.SecurityChallenge');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.SecurityQuestionAnswerApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('SecurityQuestionAnswerApiBasePath') ?
                   /** @type {!string} */ ($injector.get('SecurityQuestionAnswerApiBasePath')) :
                   'https://api.mojang.com';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('SecurityQuestionAnswerApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('SecurityQuestionAnswerApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.SecurityQuestionAnswerApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Check if security questions are needed
 * 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.SecurityQuestionAnswerApi.prototype.checkSecurityStatus = function(opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/user/security/location';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get list of questions
 * 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.SecurityChallenge>>}
 */
API.Client.SecurityQuestionAnswerApi.prototype.listPendingSecurityQuestions = function(opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/user/security/challenges';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Send back the answers
 * 
 * @param {!Array<!API.Client.SecurityAnswer>} securityAnswer An array with all the answers
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.SecurityQuestionAnswerApi.prototype.sendSecurityQuestionAnswers = function(securityAnswer, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/user/security/location';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'securityAnswer' is set
  if (!securityAnswer) {
    throw new Error('Missing required parameter securityAnswer when calling sendSecurityQuestionAnswers');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: securityAnswer,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
