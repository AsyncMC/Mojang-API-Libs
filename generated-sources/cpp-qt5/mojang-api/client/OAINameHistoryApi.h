/**
 * Mojang API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef _OAI_OAINameHistoryApi_H_
#define _OAI_OAINameHistoryApi_H_

#include "OAIHttpRequest.h"

#include "OAICurrentPlayerIDs.h"
#include "OAIError.h"
#include "OAINameChange.h"
#include <QList>
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAINameHistoryApi: public QObject {
    Q_OBJECT

public:
    OAINameHistoryApi();
    OAINameHistoryApi(QString host, QString basePath);
    ~OAINameHistoryApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void findUniqueIdsByName(QList<QString*>*& q_string);
    void getNameHistory(QString* stripped_uuid);
    void getUniqueIdByName(QString* username, qint64 at);
    
private:
    void findUniqueIdsByNameCallback (OAIHttpRequestWorker * worker);
    void getNameHistoryCallback (OAIHttpRequestWorker * worker);
    void getUniqueIdByNameCallback (OAIHttpRequestWorker * worker);
    
signals:
    void findUniqueIdsByNameSignal(QList<OAICurrentPlayerIDs*>* summary);
    void getNameHistorySignal(QList<OAINameChange*>* summary);
    void getUniqueIdByNameSignal(OAICurrentPlayerIDs* summary);
    
    void findUniqueIdsByNameSignalE(QList<OAICurrentPlayerIDs*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getNameHistorySignalE(QList<OAINameChange*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getUniqueIdByNameSignalE(OAICurrentPlayerIDs* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void findUniqueIdsByNameSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getNameHistorySignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getUniqueIdByNameSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
