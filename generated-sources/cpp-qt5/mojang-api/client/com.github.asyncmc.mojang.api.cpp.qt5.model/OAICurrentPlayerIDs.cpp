/**
 * Mojang API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAICurrentPlayerIDs.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAICurrentPlayerIDs::OAICurrentPlayerIDs(QString json) {
    init();
    this->fromJson(json);
}

OAICurrentPlayerIDs::OAICurrentPlayerIDs() {
    init();
}

OAICurrentPlayerIDs::~OAICurrentPlayerIDs() {
    this->cleanup();
}

void
OAICurrentPlayerIDs::init() {
    id = new QString("");
    m_id_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    legacy = false;
    m_legacy_isSet = false;
    demo = false;
    m_demo_isSet = false;
}

void
OAICurrentPlayerIDs::cleanup() {
    if(id != nullptr) { 
        delete id;
    }
    if(name != nullptr) { 
        delete name;
    }


}

OAICurrentPlayerIDs*
OAICurrentPlayerIDs::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAICurrentPlayerIDs::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&legacy, pJson["legacy"], "bool", "");
    
    ::OpenAPI::setValue(&demo, pJson["demo"], "bool", "");
    
}

QString
OAICurrentPlayerIDs::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAICurrentPlayerIDs::asJsonObject() {
    QJsonObject obj;
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(m_legacy_isSet){
        obj.insert("legacy", QJsonValue(legacy));
    }
    if(m_demo_isSet){
        obj.insert("demo", QJsonValue(demo));
    }

    return obj;
}

QString*
OAICurrentPlayerIDs::getId() {
    return id;
}
void
OAICurrentPlayerIDs::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString*
OAICurrentPlayerIDs::getName() {
    return name;
}
void
OAICurrentPlayerIDs::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool
OAICurrentPlayerIDs::isLegacy() {
    return legacy;
}
void
OAICurrentPlayerIDs::setLegacy(bool legacy) {
    this->legacy = legacy;
    this->m_legacy_isSet = true;
}

bool
OAICurrentPlayerIDs::isDemo() {
    return demo;
}
void
OAICurrentPlayerIDs::setDemo(bool demo) {
    this->demo = demo;
    this->m_demo_isSet = true;
}


bool
OAICurrentPlayerIDs::isSet(){
    bool isObjectUpdated = false;
    do{
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(m_legacy_isSet){ isObjectUpdated = true; break;}
        if(m_demo_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

