/**
 * Mojang API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINameHistoryApi.h"
#include "OAIHelpers.h"
#include "OAIModelFactory.h"
#include "OAIQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAINameHistoryApi::OAINameHistoryApi() {}

OAINameHistoryApi::~OAINameHistoryApi() {}

OAINameHistoryApi::OAINameHistoryApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAINameHistoryApi::findUniqueIdsByName(QList<QString*>*& q_string) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/profiles/minecraft");



    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    QJsonObject q_string_jobj;
    toJsonArray((QList<void*>*)q_string, q_string_jobj, QString("body"), QString("OAIUser*"));

    QJsonDocument doc(q_string_jobj);
    QByteArray bytes = doc.toJson();

    input.request_body.append(bytes);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAINameHistoryApi::findUniqueIdsByNameCallback);

    worker->execute(&input);
}

void
OAINameHistoryApi::findUniqueIdsByNameCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<OAICurrentPlayerIDs*>* output = new QList<OAICurrentPlayerIDs*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    auto wrapper = new OAIQObjectWrapper<QList<OAICurrentPlayerIDs*>*> (output);
    wrapper->deleteLater();
    foreach(QJsonValue obj, jsonArray) {
        OAICurrentPlayerIDs* o = new OAICurrentPlayerIDs();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        auto objwrapper = new OAIQObjectWrapper<OAICurrentPlayerIDs*> (o);
        objwrapper->deleteLater();
        output->append(o);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit findUniqueIdsByNameSignal(output);
    } else {
        emit findUniqueIdsByNameSignalE(output, error_type, error_str);
        emit findUniqueIdsByNameSignalEFull(worker, error_type, error_str);
    }
}

void
OAINameHistoryApi::getNameHistory(QString* stripped_uuid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/user/profiles/{stripped_uuid}/names");

    QString stripped_uuidPathParam("{"); stripped_uuidPathParam.append("stripped_uuid").append("}");
    fullPath.replace(stripped_uuidPathParam, stringValue(stripped_uuid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAINameHistoryApi::getNameHistoryCallback);

    worker->execute(&input);
}

void
OAINameHistoryApi::getNameHistoryCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<OAINameChange*>* output = new QList<OAINameChange*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    auto wrapper = new OAIQObjectWrapper<QList<OAINameChange*>*> (output);
    wrapper->deleteLater();
    foreach(QJsonValue obj, jsonArray) {
        OAINameChange* o = new OAINameChange();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        auto objwrapper = new OAIQObjectWrapper<OAINameChange*> (o);
        objwrapper->deleteLater();
        output->append(o);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getNameHistorySignal(output);
    } else {
        emit getNameHistorySignalE(output, error_type, error_str);
        emit getNameHistorySignalEFull(worker, error_type, error_str);
    }
}

void
OAINameHistoryApi::getUniqueIdByName(QString* username, qint64 at) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/users/profiles/minecraft/{username}");

    QString usernamePathParam("{"); usernamePathParam.append("username").append("}");
    fullPath.replace(usernamePathParam, stringValue(username));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("at"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(at)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAINameHistoryApi::getUniqueIdByNameCallback);

    worker->execute(&input);
}

void
OAINameHistoryApi::getUniqueIdByNameCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAICurrentPlayerIDs* output = static_cast<OAICurrentPlayerIDs*>(create(json, QString("OAICurrentPlayerIDs")));
    auto wrapper = new OAIQObjectWrapper<OAICurrentPlayerIDs*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getUniqueIdByNameSignal(output);
    } else {
        emit getUniqueIdByNameSignalE(output, error_type, error_str);
        emit getUniqueIdByNameSignalEFull(worker, error_type, error_str);
    }
}


}
