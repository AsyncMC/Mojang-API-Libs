/**
 * Mojang API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISkinOperationsApi.h"
#include "OAIHelpers.h"
#include "OAIModelFactory.h"
#include "OAIQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAISkinOperationsApi::OAISkinOperationsApi() {}

OAISkinOperationsApi::~OAISkinOperationsApi() {}

OAISkinOperationsApi::OAISkinOperationsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAISkinOperationsApi::changePlayerSkin(QString* stripped_uuid, QString* url, OAISkinModel* model) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/user/profile/{stripped_uuid}/skin");

    QString stripped_uuidPathParam("{"); stripped_uuidPathParam.append("stripped_uuid").append("}");
    fullPath.replace(stripped_uuidPathParam, stringValue(stripped_uuid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");

    if (model != nullptr) {
        input.add_var("model", *model);
    }
    if (url != nullptr) {
        input.add_var("url", *url);
    }




    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAISkinOperationsApi::changePlayerSkinCallback);

    worker->execute(&input);
}

void
OAISkinOperationsApi::changePlayerSkinCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit changePlayerSkinSignal();
    } else {
        emit changePlayerSkinSignalE(error_type, error_str);
        emit changePlayerSkinSignalEFull(worker, error_type, error_str);
    }
}

void
OAISkinOperationsApi::resetPlayerSkin(QString* stripped_uuid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/user/profile/{stripped_uuid}/skin");

    QString stripped_uuidPathParam("{"); stripped_uuidPathParam.append("stripped_uuid").append("}");
    fullPath.replace(stripped_uuidPathParam, stringValue(stripped_uuid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "DELETE");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAISkinOperationsApi::resetPlayerSkinCallback);

    worker->execute(&input);
}

void
OAISkinOperationsApi::resetPlayerSkinCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit resetPlayerSkinSignal();
    } else {
        emit resetPlayerSkinSignalE(error_type, error_str);
        emit resetPlayerSkinSignalEFull(worker, error_type, error_str);
    }
}

void
OAISkinOperationsApi::uploadPlayerSkin(QString* stripped_uuid, OAIHttpRequestInputFileElement* file, OAISkinModel* model) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/user/profile/{stripped_uuid}/skin");

    QString stripped_uuidPathParam("{"); stripped_uuidPathParam.append("stripped_uuid").append("}");
    fullPath.replace(stripped_uuidPathParam, stringValue(stripped_uuid));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "PUT");

    if (model != nullptr) {
        input.add_var("model", *model);
    }
    if (file != nullptr) {
        input.add_file("file", (*file).local_filename, (*file).request_filename, (*file).mime_type);
    }




    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAISkinOperationsApi::uploadPlayerSkinCallback);

    worker->execute(&input);
}

void
OAISkinOperationsApi::uploadPlayerSkinCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit uploadPlayerSkinSignal();
    } else {
        emit uploadPlayerSkinSignalE(error_type, error_str);
        emit uploadPlayerSkinSignalEFull(worker, error_type, error_str);
    }
}


}
