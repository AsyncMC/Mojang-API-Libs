/**
 * Mojang Session API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIPlayerTexture.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIPlayerTexture::OAIPlayerTexture(QString json) {
    init();
    this->fromJson(json);
}

OAIPlayerTexture::OAIPlayerTexture() {
    init();
}

OAIPlayerTexture::~OAIPlayerTexture() {
    this->cleanup();
}

void
OAIPlayerTexture::init() {
    skin = new OAIPlayerSkinURL();
    m_skin_isSet = false;
    cape = new OAIPlayerTextureURL();
    m_cape_isSet = false;
}

void
OAIPlayerTexture::cleanup() {
    if(skin != nullptr) { 
        delete skin;
    }
    if(cape != nullptr) { 
        delete cape;
    }
}

OAIPlayerTexture*
OAIPlayerTexture::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIPlayerTexture::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&skin, pJson["SKIN"], "OAIPlayerSkinURL", "OAIPlayerSkinURL");
    
    ::OpenAPI::setValue(&cape, pJson["CAPE"], "OAIPlayerTextureURL", "OAIPlayerTextureURL");
    
}

QString
OAIPlayerTexture::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIPlayerTexture::asJsonObject() {
    QJsonObject obj;
    if((skin != nullptr) && (skin->isSet())){
        toJsonValue(QString("SKIN"), skin, obj, QString("OAIPlayerSkinURL"));
    }
    if((cape != nullptr) && (cape->isSet())){
        toJsonValue(QString("CAPE"), cape, obj, QString("OAIPlayerTextureURL"));
    }

    return obj;
}

OAIPlayerSkinURL*
OAIPlayerTexture::getSkin() {
    return skin;
}
void
OAIPlayerTexture::setSkin(OAIPlayerSkinURL* skin) {
    this->skin = skin;
    this->m_skin_isSet = true;
}

OAIPlayerTextureURL*
OAIPlayerTexture::getCape() {
    return cape;
}
void
OAIPlayerTexture::setCape(OAIPlayerTextureURL* cape) {
    this->cape = cape;
    this->m_cape_isSet = true;
}


bool
OAIPlayerTexture::isSet(){
    bool isObjectUpdated = false;
    do{
        if(skin != nullptr && skin->isSet()){ isObjectUpdated = true; break;}
        if(cape != nullptr && cape->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

