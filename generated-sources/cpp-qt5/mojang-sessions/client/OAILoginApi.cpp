/**
 * Mojang Session API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoginApi.h"
#include "OAIHelpers.h"
#include "OAIModelFactory.h"
#include "OAIQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAILoginApi::OAILoginApi() {}

OAILoginApi::~OAILoginApi() {}

OAILoginApi::OAILoginApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAILoginApi::getPlayerProfile(QString* stripped_uuid, bool _unsigned) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/session/minecraft/profile/{stripped_uuid}");

    QString stripped_uuidPathParam("{"); stripped_uuidPathParam.append("stripped_uuid").append("}");
    fullPath.replace(stripped_uuidPathParam, stringValue(stripped_uuid));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("unsigned"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(_unsigned)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAILoginApi::getPlayerProfileCallback);

    worker->execute(&input);
}

void
OAILoginApi::getPlayerProfileCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIPlayerProfile* output = static_cast<OAIPlayerProfile*>(create(json, QString("OAIPlayerProfile")));
    auto wrapper = new OAIQObjectWrapper<OAIPlayerProfile*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPlayerProfileSignal(output);
    } else {
        emit getPlayerProfileSignalE(output, error_type, error_str);
        emit getPlayerProfileSignalEFull(worker, error_type, error_str);
    }
}


}
