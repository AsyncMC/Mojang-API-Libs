/**
 * Mojang Authentication API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef ModelFactory_H_
#define ModelFactory_H_

#include "OAIObject.h"

#include "OAIAccessKeys.h"
#include "OAIAgent.h"
#include "OAIAuthentication.h"
#include "OAIAuthenticationRequest.h"
#include "OAIError.h"
#include "OAIGameProfile.h"
#include "OAIGameProfileProperty.h"
#include "OAIPrivateUserData.h"
#include "OAIProfileId.h"
#include "OAIReducedUserData.h"
#include "OAIRefreshRequest.h"
#include "OAIRefreshResponse.h"
#include "OAIUsernamePassword.h"

namespace OpenAPI {

  inline void* create(QString type) {
    if(QString("OAIAccessKeys").compare(type) == 0) {
      return new OAIAccessKeys();
    }
    if(QString("OAIAgent").compare(type) == 0) {
      return new OAIAgent();
    }
    if(QString("OAIAuthentication").compare(type) == 0) {
      return new OAIAuthentication();
    }
    if(QString("OAIAuthenticationRequest").compare(type) == 0) {
      return new OAIAuthenticationRequest();
    }
    if(QString("OAIError").compare(type) == 0) {
      return new OAIError();
    }
    if(QString("OAIGameProfile").compare(type) == 0) {
      return new OAIGameProfile();
    }
    if(QString("OAIGameProfileProperty").compare(type) == 0) {
      return new OAIGameProfileProperty();
    }
    if(QString("OAIPrivateUserData").compare(type) == 0) {
      return new OAIPrivateUserData();
    }
    if(QString("OAIProfileId").compare(type) == 0) {
      return new OAIProfileId();
    }
    if(QString("OAIReducedUserData").compare(type) == 0) {
      return new OAIReducedUserData();
    }
    if(QString("OAIRefreshRequest").compare(type) == 0) {
      return new OAIRefreshRequest();
    }
    if(QString("OAIRefreshResponse").compare(type) == 0) {
      return new OAIRefreshResponse();
    }
    if(QString("OAIUsernamePassword").compare(type) == 0) {
      return new OAIUsernamePassword();
    }
    
    return nullptr;
  }

  inline void* create(QString json, QString type) {
    if(type.startsWith("QString")) {
      return new QString();
    }    
    auto val = static_cast<OAIObject*>(create(type));
    if(val != nullptr) {
      return val->fromJson(json);
    }
    return nullptr;
  }

}

#endif /* ModelFactory_H_ */
