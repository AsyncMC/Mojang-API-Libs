/**
 * Mojang Authentication API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIGameProfile.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIGameProfile::OAIGameProfile(QString json) {
    init();
    this->fromJson(json);
}

OAIGameProfile::OAIGameProfile() {
    init();
}

OAIGameProfile::~OAIGameProfile() {
    this->cleanup();
}

void
OAIGameProfile::init() {
    agent = new QString("");
    m_agent_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    user_id = new QString("");
    m_user_id_isSet = false;
    created_at = 0L;
    m_created_at_isSet = false;
    legacy_profile = false;
    m_legacy_profile_isSet = false;
    suspended = false;
    m_suspended_isSet = false;
    paid = false;
    m_paid_isSet = false;
    migrated = false;
    m_migrated_isSet = false;
    legacy = false;
    m_legacy_isSet = false;
}

void
OAIGameProfile::cleanup() {
    if(agent != nullptr) { 
        delete agent;
    }
    if(id != nullptr) { 
        delete id;
    }
    if(name != nullptr) { 
        delete name;
    }
    if(user_id != nullptr) { 
        delete user_id;
    }






}

OAIGameProfile*
OAIGameProfile::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIGameProfile::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&agent, pJson["agent"], "QString", "QString");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&user_id, pJson["userId"], "OAIHttpRequestInputFileElement", "OAIHttpRequestInputFileElement");
    
    ::OpenAPI::setValue(&created_at, pJson["createdAt"], "qint64", "");
    
    ::OpenAPI::setValue(&legacy_profile, pJson["legacyProfile"], "bool", "");
    
    ::OpenAPI::setValue(&suspended, pJson["suspended"], "bool", "");
    
    ::OpenAPI::setValue(&paid, pJson["paid"], "bool", "");
    
    ::OpenAPI::setValue(&migrated, pJson["migrated"], "bool", "");
    
    ::OpenAPI::setValue(&legacy, pJson["legacy"], "bool", "");
    
}

QString
OAIGameProfile::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIGameProfile::asJsonObject() {
    QJsonObject obj;
    if(agent != nullptr && *agent != QString("")){
        toJsonValue(QString("agent"), agent, obj, QString("QString"));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if((user_id != nullptr) && (user_id->isSet())){
        toJsonValue(QString("userId"), user_id, obj, QString("OAIHttpRequestInputFileElement"));
    }
    if(m_created_at_isSet){
        obj.insert("createdAt", QJsonValue(created_at));
    }
    if(m_legacy_profile_isSet){
        obj.insert("legacyProfile", QJsonValue(legacy_profile));
    }
    if(m_suspended_isSet){
        obj.insert("suspended", QJsonValue(suspended));
    }
    if(m_paid_isSet){
        obj.insert("paid", QJsonValue(paid));
    }
    if(m_migrated_isSet){
        obj.insert("migrated", QJsonValue(migrated));
    }
    if(m_legacy_isSet){
        obj.insert("legacy", QJsonValue(legacy));
    }

    return obj;
}

QString*
OAIGameProfile::getAgent() {
    return agent;
}
void
OAIGameProfile::setAgent(QString* agent) {
    this->agent = agent;
    this->m_agent_isSet = true;
}

QString*
OAIGameProfile::getId() {
    return id;
}
void
OAIGameProfile::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString*
OAIGameProfile::getName() {
    return name;
}
void
OAIGameProfile::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

OAIHttpRequestInputFileElement*
OAIGameProfile::getUserId() {
    return user_id;
}
void
OAIGameProfile::setUserId(OAIHttpRequestInputFileElement* user_id) {
    this->user_id = user_id;
    this->m_user_id_isSet = true;
}

qint64
OAIGameProfile::getCreatedAt() {
    return created_at;
}
void
OAIGameProfile::setCreatedAt(qint64 created_at) {
    this->created_at = created_at;
    this->m_created_at_isSet = true;
}

bool
OAIGameProfile::isLegacyProfile() {
    return legacy_profile;
}
void
OAIGameProfile::setLegacyProfile(bool legacy_profile) {
    this->legacy_profile = legacy_profile;
    this->m_legacy_profile_isSet = true;
}

bool
OAIGameProfile::isSuspended() {
    return suspended;
}
void
OAIGameProfile::setSuspended(bool suspended) {
    this->suspended = suspended;
    this->m_suspended_isSet = true;
}

bool
OAIGameProfile::isPaid() {
    return paid;
}
void
OAIGameProfile::setPaid(bool paid) {
    this->paid = paid;
    this->m_paid_isSet = true;
}

bool
OAIGameProfile::isMigrated() {
    return migrated;
}
void
OAIGameProfile::setMigrated(bool migrated) {
    this->migrated = migrated;
    this->m_migrated_isSet = true;
}

bool
OAIGameProfile::isLegacy() {
    return legacy;
}
void
OAIGameProfile::setLegacy(bool legacy) {
    this->legacy = legacy;
    this->m_legacy_isSet = true;
}


bool
OAIGameProfile::isSet(){
    bool isObjectUpdated = false;
    do{
        if(agent != nullptr && *agent != QString("")){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(user_id != nullptr && user_id->isSet()){ isObjectUpdated = true; break;}
        if(m_created_at_isSet){ isObjectUpdated = true; break;}
        if(m_legacy_profile_isSet){ isObjectUpdated = true; break;}
        if(m_suspended_isSet){ isObjectUpdated = true; break;}
        if(m_paid_isSet){ isObjectUpdated = true; break;}
        if(m_migrated_isSet){ isObjectUpdated = true; break;}
        if(m_legacy_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

