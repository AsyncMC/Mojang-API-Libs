/**
 * Mojang Authentication API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefaultApi.h"
#include "OAIHelpers.h"
#include "OAIModelFactory.h"
#include "OAIQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIDefaultApi::OAIDefaultApi() {}

OAIDefaultApi::~OAIDefaultApi() {}

OAIDefaultApi::OAIDefaultApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAIDefaultApi::authenticate(OAIAuthenticationRequest& oai_authentication_request) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/authenticate");



    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oai_authentication_request.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::authenticateCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::authenticateCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIAuthentication* output = static_cast<OAIAuthentication*>(create(json, QString("OAIAuthentication")));
    auto wrapper = new OAIQObjectWrapper<OAIAuthentication*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit authenticateSignal(output);
    } else {
        emit authenticateSignalE(output, error_type, error_str);
        emit authenticateSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::invalidate(OAIAccessKeys& oai_access_keys) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/invalidate");



    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oai_access_keys.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::invalidateCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::invalidateCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit invalidateSignal();
    } else {
        emit invalidateSignalE(error_type, error_str);
        emit invalidateSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::refresh(OAIRefreshRequest& oai_refresh_request) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/refresh");



    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oai_refresh_request.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::refreshCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::refreshCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIRefreshResponse* output = static_cast<OAIRefreshResponse*>(create(json, QString("OAIRefreshResponse")));
    auto wrapper = new OAIQObjectWrapper<OAIRefreshResponse*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit refreshSignal(output);
    } else {
        emit refreshSignalE(output, error_type, error_str);
        emit refreshSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::siginout(OAIUsernamePassword& oai_username_password) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/signout");



    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oai_username_password.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::siginoutCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::siginoutCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit siginoutSignal();
    } else {
        emit siginoutSignalE(error_type, error_str);
        emit siginoutSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::validate(OAIAccessKeys& oai_access_keys) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/validate");



    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oai_access_keys.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::validateCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::validateCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit validateSignal();
    } else {
        emit validateSignalE(error_type, error_str);
        emit validateSignalEFull(worker, error_type, error_str);
    }
}


}
