/**
 * Mojang Authentication API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef _OAI_OAIDefaultApi_H_
#define _OAI_OAIDefaultApi_H_

#include "OAIHttpRequest.h"

#include "com.github.asyncmc.mojang.authentication.cpp.qt5.model\OAIAccessKeys.h"
#include "com.github.asyncmc.mojang.authentication.cpp.qt5.model\OAIAuthentication.h"
#include "com.github.asyncmc.mojang.authentication.cpp.qt5.model\OAIAuthenticationRequest.h"
#include "com.github.asyncmc.mojang.authentication.cpp.qt5.model\OAIError.h"
#include "com.github.asyncmc.mojang.authentication.cpp.qt5.model\OAIRefreshRequest.h"
#include "com.github.asyncmc.mojang.authentication.cpp.qt5.model\OAIRefreshResponse.h"
#include "com.github.asyncmc.mojang.authentication.cpp.qt5.model\OAIUsernamePassword.h"

#include <QObject>

namespace OpenAPI {

class OAIDefaultApi: public QObject {
    Q_OBJECT

public:
    OAIDefaultApi();
    OAIDefaultApi(QString host, QString basePath);
    ~OAIDefaultApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void authenticate(OAIAuthenticationRequest& oai_authentication_request);
    void invalidate(OAIAccessKeys& oai_access_keys);
    void refresh(OAIRefreshRequest& oai_refresh_request);
    void siginout(OAIUsernamePassword& oai_username_password);
    void validate(OAIAccessKeys& oai_access_keys);
    
private:
    void authenticateCallback (OAIHttpRequestWorker * worker);
    void invalidateCallback (OAIHttpRequestWorker * worker);
    void refreshCallback (OAIHttpRequestWorker * worker);
    void siginoutCallback (OAIHttpRequestWorker * worker);
    void validateCallback (OAIHttpRequestWorker * worker);
    
signals:
    void authenticateSignal(OAIAuthentication* summary);
    void invalidateSignal();
    void refreshSignal(OAIRefreshResponse* summary);
    void siginoutSignal();
    void validateSignal();
    
    void authenticateSignalE(OAIAuthentication* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void invalidateSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void refreshSignalE(OAIRefreshResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void siginoutSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void validateSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    
    void authenticateSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void invalidateSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void refreshSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void siginoutSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void validateSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
