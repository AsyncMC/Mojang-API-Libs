note
 description:"[
		Mojang API
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		OpenAPI spec version: 2020-06-05
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	SKINOPERATIONS_API

inherit

    API_I


feature -- API Access


	change_player_skin (stripped_uuid: STRING_32; url: STRING_32; model: detachable SKIN_MODEL)
			-- Changes the player skin by URL
			-- This will set the skin for the selected profile, but Mojang&#39;s servers will fetch the skin from a URL. This will also work for legacy accounts.
			-- 
			-- argument: stripped_uuid The player UUID without hyphens (required)
			-- 
			-- argument: url The URL which Mojang servers will download and apply the skin (required)
			-- 
			-- argument: model  (optional, default to null)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/user/profile/{stripped_uuid}/skin"
			l_path.replace_substring_all ("{"+"stripped_uuid"+"}", api_client.url_encode (stripped_uuid.out))

			if attached model as l_model then
				l_request.add_form(l_model,"model");
			end
			if attached url as l_url then
				l_request.add_form(l_url,"url");
			end

			if attached {STRING} api_client.select_header_accept (<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<"application/x-www-form-urlencoded">>),"Content-Type")
			l_request.set_auth_names (<<"PlayerAccessToken">>)
			l_response := api_client.call_api (l_path, "Post", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end	

	reset_player_skin (stripped_uuid: STRING_32)
			-- Resets the player skin to default
			-- 
			-- 
			-- argument: stripped_uuid The player UUID without hyphens (required)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/user/profile/{stripped_uuid}/skin"
			l_path.replace_substring_all ("{"+"stripped_uuid"+"}", api_client.url_encode (stripped_uuid.out))


			if attached {STRING} api_client.select_header_accept (<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"PlayerAccessToken">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end	

	upload_player_skin (stripped_uuid: STRING_32; file: FILE; model: detachable SKIN_MODEL)
			-- Changes the player skin by upload
			-- This uploads a skin to Mojang&#39;s servers. It also sets the users skin. This works on legacy counts as well.
			-- 
			-- argument: stripped_uuid The player UUID without hyphens (required)
			-- 
			-- argument: file The skin image in PNG format (required)
			-- 
			-- argument: model  (optional, default to null)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/user/profile/{stripped_uuid}/skin"
			l_path.replace_substring_all ("{"+"stripped_uuid"+"}", api_client.url_encode (stripped_uuid.out))

			if attached model as l_model then
				l_request.add_form(l_model,"model");
			end
			if attached file as l_file then
				l_request.add_form(l_file,"file");
			end

			if attached {STRING} api_client.select_header_accept (<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<"multipart/form-data">>),"Content-Type")
			l_request.set_auth_names (<<"PlayerAccessToken">>)
			l_response := api_client.call_api (l_path, "Put", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end	


end
