note
 description:"[
		Mojang API
 		No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  		OpenAPI spec version: 2020-06-05
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	NAMEHISTORY_API

inherit

    API_I


feature -- API Access


	find_unique_ids_by_name (s_tr_in_g_32: LIST [STRING_32]): detachable LIST [CURRENT_PLAYER_I_DS]
			-- Find the current UUID of multiple players at once
			-- Find the current players name, UUID, demo status and migration flag by the current players name. The \&quot;at\&quot; parameter is not supported. Players not found are not returned. If no players are found, an empty array is returned.
			-- 
			-- argument: s_tr_in_g_32 Array with the player names (required)
			-- 
			-- 
			-- Result LIST [CURRENT_PLAYER_I_DS]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(s_tr_in_g_32)
			l_path := "/profiles/minecraft"


			if attached {STRING} api_client.select_header_accept (<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<"application/json">>),"Content-Type")
			l_request.set_auth_names (<<>>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [CURRENT_PLAYER_I_DS] } l_response.data ({ LIST [CURRENT_PLAYER_I_DS] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	name_history (stripped_uuid: STRING_32): detachable LIST [NAME_CHANGE]
			-- Gets the full player&#39;s name history
			-- 
			-- 
			-- argument: stripped_uuid The player UUID without hyphens (required)
			-- 
			-- 
			-- Result LIST [NAME_CHANGE]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/user/profiles/{stripped_uuid}/names"
			l_path.replace_substring_all ("{"+"stripped_uuid"+"}", api_client.url_encode (stripped_uuid.out))


			if attached {STRING} api_client.select_header_accept (<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [NAME_CHANGE] } l_response.data ({ LIST [NAME_CHANGE] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	unique_id_by_name (username: STRING_32; at: INTEGER_64): detachable CURRENT_PLAYER_I_DS
			-- Find the UUID by name
			-- Find the current player name, UUID, demo status and migration flag by the current player name or at a given time.
			-- 
			-- argument: username The username in a given time, or in present if \&quot;at\&quot; is not sent (required)
			-- 
			-- argument: at Find the username in a given time, when 0 selects the original name however, it only works if the name was changed at least once, or if the account is legacy. The time is an UNIX timestamp (without milliseconds) (optional, default to null)
			-- 
			-- 
			-- Result CURRENT_PLAYER_I_DS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/users/profiles/minecraft/{username}"
			l_path.replace_substring_all ("{"+"username"+"}", api_client.url_encode (username.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "at", at));


			if attached {STRING} api_client.select_header_accept (<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { CURRENT_PLAYER_I_DS } l_response.data ({ CURRENT_PLAYER_I_DS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	


end
