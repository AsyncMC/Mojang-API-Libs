/**
 * Mojang API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api

import java.text.SimpleDateFormat

import org.openapitools.client.model.OrderStatisticsRequest
import org.openapitools.client.model.OrderStatisticsResponse
import org.openapitools.client.{ApiInvoker, ApiException}

import collection.mutable
import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart
import com.wordnik.swagger.client._
import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import java.net.URI
import java.io.File
import java.util.Date
import java.util.TimeZone
import javax.ws.rs.core.MediaType

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.collection.mutable.HashMap
import scala.util.{Failure, Success, Try}

import org.json4s._

class MiscellaneousApi(
  val defBasePath: String = "https://api.mojang.com",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new MiscellaneousApiAsyncHelper(client, config)

  /**
   * Get statistics on the sales of Minecraft.
   * 
   *
   * @param orderStatisticsRequest The payload is a json list of options under the metricKeys key. You will receive a single object corresponding to the sum of sales of the requested type(s). You must request at least one type of sale. Below is the default list used by https://minecraft.net/en/stats/ 
   * @return OrderStatisticsResponse
   */
  def getOrdersStatistics(orderStatisticsRequest: OrderStatisticsRequest): Option[OrderStatisticsResponse] = {
    val await = Try(Await.result(getOrdersStatisticsAsync(orderStatisticsRequest), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get statistics on the sales of Minecraft. asynchronously
   * 
   *
   * @param orderStatisticsRequest The payload is a json list of options under the metricKeys key. You will receive a single object corresponding to the sum of sales of the requested type(s). You must request at least one type of sale. Below is the default list used by https://minecraft.net/en/stats/ 
   * @return Future(OrderStatisticsResponse)
   */
  def getOrdersStatisticsAsync(orderStatisticsRequest: OrderStatisticsRequest): Future[OrderStatisticsResponse] = {
      helper.getOrdersStatistics(orderStatisticsRequest)
  }

}

class MiscellaneousApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def getOrdersStatistics(orderStatisticsRequest: OrderStatisticsRequest)(implicit reader: ClientResponseReader[OrderStatisticsResponse], writer: RequestWriter[OrderStatisticsRequest]): Future[OrderStatisticsResponse] = {
    // create path and map variables
    val path = (addFmt("/orders/statistics"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (orderStatisticsRequest == null) throw new Exception("Missing required parameter 'orderStatisticsRequest' when calling MiscellaneousApi->getOrdersStatistics")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(orderStatisticsRequest))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
