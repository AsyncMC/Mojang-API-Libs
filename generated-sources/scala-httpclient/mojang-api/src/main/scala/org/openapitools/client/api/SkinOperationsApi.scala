/**
 * Mojang API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api

import java.text.SimpleDateFormat

import org.openapitools.client.model.Error
import java.io.File
import org.openapitools.client.model.SkinModel
import org.openapitools.client.{ApiInvoker, ApiException}

import collection.mutable
import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart
import com.wordnik.swagger.client._
import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import java.net.URI
import java.io.File
import java.util.Date
import java.util.TimeZone
import javax.ws.rs.core.MediaType

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.collection.mutable.HashMap
import scala.util.{Failure, Success, Try}

import org.json4s._

class SkinOperationsApi(
  val defBasePath: String = "https://api.mojang.com",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new SkinOperationsApiAsyncHelper(client, config)

  /**
   * Changes the player skin by URL
   * This will set the skin for the selected profile, but Mojang&#39;s servers will fetch the skin from a URL. This will also work for legacy accounts.
   *
   * @param strippedUuid The player UUID without hyphens 
   * @param url The URL which Mojang servers will download and apply the skin 
   * @param model  (optional)
   * @return void
   */
  def changePlayerSkin(strippedUuid: String, url: String, model: Option[SkinModel] = None) = {
    val await = Try(Await.result(changePlayerSkinAsync(strippedUuid, url, model), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Changes the player skin by URL asynchronously
   * This will set the skin for the selected profile, but Mojang&#39;s servers will fetch the skin from a URL. This will also work for legacy accounts.
   *
   * @param strippedUuid The player UUID without hyphens 
   * @param url The URL which Mojang servers will download and apply the skin 
   * @param model  (optional)
   * @return Future(void)
   */
  def changePlayerSkinAsync(strippedUuid: String, url: String, model: Option[SkinModel] = None) = {
      helper.changePlayerSkin(strippedUuid, url, model)
  }

  /**
   * Resets the player skin to default
   * 
   *
   * @param strippedUuid The player UUID without hyphens 
   * @return void
   */
  def resetPlayerSkin(strippedUuid: String) = {
    val await = Try(Await.result(resetPlayerSkinAsync(strippedUuid), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Resets the player skin to default asynchronously
   * 
   *
   * @param strippedUuid The player UUID without hyphens 
   * @return Future(void)
   */
  def resetPlayerSkinAsync(strippedUuid: String) = {
      helper.resetPlayerSkin(strippedUuid)
  }

  /**
   * Changes the player skin by upload
   * This uploads a skin to Mojang&#39;s servers. It also sets the users skin. This works on legacy counts as well.
   *
   * @param strippedUuid The player UUID without hyphens 
   * @param file The skin image in PNG format 
   * @param model  (optional)
   * @return void
   */
  def uploadPlayerSkin(strippedUuid: String, file: File, model: Option[SkinModel] = None) = {
    val await = Try(Await.result(uploadPlayerSkinAsync(strippedUuid, file, model), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Changes the player skin by upload asynchronously
   * This uploads a skin to Mojang&#39;s servers. It also sets the users skin. This works on legacy counts as well.
   *
   * @param strippedUuid The player UUID without hyphens 
   * @param file The skin image in PNG format 
   * @param model  (optional)
   * @return Future(void)
   */
  def uploadPlayerSkinAsync(strippedUuid: String, file: File, model: Option[SkinModel] = None) = {
      helper.uploadPlayerSkin(strippedUuid, file, model)
  }

}

class SkinOperationsApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def changePlayerSkin(strippedUuid: String,
    url: String,
    model: Option[SkinModel] = None
    )(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/user/profile/{stripped_uuid}/skin")
      replaceAll("\\{" + "stripped_uuid" + "\\}", strippedUuid.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (strippedUuid == null) throw new Exception("Missing required parameter 'strippedUuid' when calling SkinOperationsApi->changePlayerSkin")

    if (url == null) throw new Exception("Missing required parameter 'url' when calling SkinOperationsApi->changePlayerSkin")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def resetPlayerSkin(strippedUuid: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/user/profile/{stripped_uuid}/skin")
      replaceAll("\\{" + "stripped_uuid" + "\\}", strippedUuid.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (strippedUuid == null) throw new Exception("Missing required parameter 'strippedUuid' when calling SkinOperationsApi->resetPlayerSkin")


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def uploadPlayerSkin(strippedUuid: String,
    file: File,
    model: Option[SkinModel] = None
    )(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/user/profile/{stripped_uuid}/skin")
      replaceAll("\\{" + "stripped_uuid" + "\\}", strippedUuid.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (strippedUuid == null) throw new Exception("Missing required parameter 'strippedUuid' when calling SkinOperationsApi->uploadPlayerSkin")


    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
