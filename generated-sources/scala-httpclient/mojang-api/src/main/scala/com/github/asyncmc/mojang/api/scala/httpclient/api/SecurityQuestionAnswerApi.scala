/**
 * Mojang API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.github.asyncmc.mojang.api.scala.httpclient.api

import java.text.SimpleDateFormat

import com.github.asyncmc.mojang.api.scala.httpclient.model.Error
import com.github.asyncmc.mojang.api.scala.httpclient.model.SecurityAnswer
import com.github.asyncmc.mojang.api.scala.httpclient.model.SecurityChallenge
import com.github.asyncmc.mojang.api.scala.httpclient.server.{ApiInvoker, ApiException}

import collection.mutable
import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart
import com.wordnik.swagger.client._
import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import java.net.URI
import java.io.File
import java.util.Date
import java.util.TimeZone
import javax.ws.rs.core.MediaType

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.collection.mutable.HashMap
import scala.util.{Failure, Success, Try}

import org.json4s._

class SecurityQuestionAnswerApi(
  val defBasePath: String = "https://api.mojang.com",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new SecurityQuestionAnswerApiAsyncHelper(client, config)

  /**
   * Check if security questions are needed
   * 
   *
   * @return void
   */
  def checkSecurityStatus() = {
    val await = Try(Await.result(checkSecurityStatusAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Check if security questions are needed asynchronously
   * 
   *
   * @return Future(void)
   */
  def checkSecurityStatusAsync() = {
      helper.checkSecurityStatus()
  }

  /**
   * Get list of questions
   * 
   *
   * @return List[SecurityChallenge]
   */
  def listPendingSecurityQuestions(): Option[List[SecurityChallenge]] = {
    val await = Try(Await.result(listPendingSecurityQuestionsAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get list of questions asynchronously
   * 
   *
   * @return Future(List[SecurityChallenge])
   */
  def listPendingSecurityQuestionsAsync(): Future[List[SecurityChallenge]] = {
      helper.listPendingSecurityQuestions()
  }

  /**
   * Send back the answers
   * 
   *
   * @param securityAnswer An array with all the answers 
   * @return void
   */
  def sendSecurityQuestionAnswers(securityAnswer: List[SecurityAnswer]) = {
    val await = Try(Await.result(sendSecurityQuestionAnswersAsync(securityAnswer), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Send back the answers asynchronously
   * 
   *
   * @param securityAnswer An array with all the answers 
   * @return Future(void)
   */
  def sendSecurityQuestionAnswersAsync(securityAnswer: List[SecurityAnswer]) = {
      helper.sendSecurityQuestionAnswers(securityAnswer)
  }

}

class SecurityQuestionAnswerApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def checkSecurityStatus()(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/user/security/location"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def listPendingSecurityQuestions()(implicit reader: ClientResponseReader[List[SecurityChallenge]]): Future[List[SecurityChallenge]] = {
    // create path and map variables
    val path = (addFmt("/user/security/challenges"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def sendSecurityQuestionAnswers(securityAnswer: List[SecurityAnswer])(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[List[SecurityAnswer]]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/user/security/location"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (securityAnswer == null) throw new Exception("Missing required parameter 'securityAnswer' when calling SecurityQuestionAnswerApi->sendSecurityQuestionAnswers")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(securityAnswer))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
