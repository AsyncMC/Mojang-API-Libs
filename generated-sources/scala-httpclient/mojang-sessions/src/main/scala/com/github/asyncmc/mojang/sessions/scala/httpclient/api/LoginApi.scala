/**
 * Mojang Session API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.github.asyncmc.mojang.sessions.scala.httpclient.api

import java.text.SimpleDateFormat

import com.github.asyncmc.mojang.sessions.scala.httpclient.model.PlayerProfile
import com.github.asyncmc.mojang.sessions.scala.httpclient.model.SessionApiError
import com.github.asyncmc.mojang.sessions.scala.httpclient.server.{ApiInvoker, ApiException}

import collection.mutable
import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart
import com.wordnik.swagger.client._
import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import java.net.URI
import java.io.File
import java.util.Date
import java.util.TimeZone
import javax.ws.rs.core.MediaType

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.collection.mutable.HashMap
import scala.util.{Failure, Success, Try}

import org.json4s._

class LoginApi(
  val defBasePath: String = "https://sessionserver.mojang.com",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new LoginApiAsyncHelper(client, config)

  /**
   * Gets the player&#39;s game profile
   * This will return the player&#39;s username plus any additional information about them (e.g. skins). This has a much stricter rate limit: You can request the same profile once per minute, however you can send as many unique requests as you like.
   *
   * @param strippedUuid The player UUID without hyphens 
   * @param unsigned When set to false, the signature data are sent (optional)
   * @return PlayerProfile
   */
  def getPlayerProfile(strippedUuid: String, unsigned: Option[Boolean] = None): Option[PlayerProfile] = {
    val await = Try(Await.result(getPlayerProfileAsync(strippedUuid, unsigned), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Gets the player&#39;s game profile asynchronously
   * This will return the player&#39;s username plus any additional information about them (e.g. skins). This has a much stricter rate limit: You can request the same profile once per minute, however you can send as many unique requests as you like.
   *
   * @param strippedUuid The player UUID without hyphens 
   * @param unsigned When set to false, the signature data are sent (optional)
   * @return Future(PlayerProfile)
   */
  def getPlayerProfileAsync(strippedUuid: String, unsigned: Option[Boolean] = None): Future[PlayerProfile] = {
      helper.getPlayerProfile(strippedUuid, unsigned)
  }

}

class LoginApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def getPlayerProfile(strippedUuid: String,
    unsigned: Option[Boolean] = None
    )(implicit reader: ClientResponseReader[PlayerProfile]): Future[PlayerProfile] = {
    // create path and map variables
    val path = (addFmt("/session/minecraft/profile/{stripped_uuid}")
      replaceAll("\\{" + "stripped_uuid" + "\\}", strippedUuid.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (strippedUuid == null) throw new Exception("Missing required parameter 'strippedUuid' when calling LoginApi->getPlayerProfile")

    unsigned match {
      case Some(param) => queryParams += "unsigned" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
