/**
 * Mojang API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.github.asyncmc.mojang.api.scala.lagom.server.api

import akka.{Done, NotUsed}
import com.lightbend.lagom.scaladsl.api.transport.Method
import com.lightbend.lagom.scaladsl.api.{Service, ServiceCall}
import play.api.libs.json._
import com.lightbend.lagom.scaladsl.api.deser.PathParamSerializer

import com.github.asyncmc.mojang.api.scala.lagom.server.model.CurrentPlayerIDs
import com.github.asyncmc.mojang.api.scala.lagom.server.model.Error
import com.github.asyncmc.mojang.api.scala.lagom.server.model.NameChange

trait NameHistoryApi extends Service {


  final override def descriptor = {
    import Service._
    named("NameHistoryApi").withCalls(
      restCall(Method.POST, "/profiles/minecraft", findUniqueIdsByName _), 
      restCall(Method.GET, "/user/profiles/:stripped_uuid/names", getNameHistory _), 
      restCall(Method.GET, "/users/profiles/minecraft/:username?at", getUniqueIdByName _)
    ).withAutoAcl(true)
  }


  /**
    * Find the current UUID of multiple players at once
    * Find the current players name, UUID, demo status and migration flag by the current players name. The \&quot;at\&quot; parameter is not supported. Players not found are not returned. If no players are found, an empty array is returned.
    *  
    * @return Seq[CurrentPlayerIDs] Body Parameter  Array with the player names 
    */
  def findUniqueIdsByName(): ServiceCall[Seq[String] ,Seq[CurrentPlayerIDs]]
  
  /**
    * Gets the full player&#39;s name history
    * 
    *  
    * @param strippedUuid The player UUID without hyphens 
    * @return Seq[NameChange]
    */
  def getNameHistory(strippedUuid: String): ServiceCall[NotUsed ,Seq[NameChange]]
        
  /**
    * Find the UUID by name
    * Find the current player name, UUID, demo status and migration flag by the current player name or at a given time.
    *  
    * @param username The username in a given time, or in present if \&quot;at\&quot; is not sent  
    * @param at Find the username in a given time, when 0 selects the original name however, it only works if the name was changed at least once, or if the account is legacy. The time is an UNIX timestamp (without milliseconds) (optional)
    * @return CurrentPlayerIDs
    */
  def getUniqueIdByName(at:           Option[Long] = Noneusername: String): ServiceCall[NotUsed ,CurrentPlayerIDs]
  

  }

