/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.github.asyncmc.mojang.api.java.pkmst.api;

import com.github.asyncmc.mojang.api.java.pkmst.model.Error;
import java.util.List;
import com.github.asyncmc.mojang.api.java.pkmst.model.SecurityAnswer;
import com.github.asyncmc.mojang.api.java.pkmst.model.SecurityChallenge;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;

import java.util.List;
/**
 * Provides the info about api methods
 * @author pkmst
 *
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaPKMSTServerCodegen", date = "2020-06-06T04:59:25.087174700-03:00[America/Sao_Paulo]")

@Api(value = "SecurityQuestionAnswer", description = "the SecurityQuestionAnswer API")
public interface SecurityQuestionAnswerApi {

    @ApiOperation(value = "Check if security questions are needed", notes = "", response = Void.class, authorizations = {
        @Authorization(value = "PlayerAccessToken")
    }, tags={ "Security question-answer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No check is needed."),
        @ApiResponse(code = 400, message = "A security check is needed or there is an other issue", response = Error.class) })
    @RequestMapping(value = "/user/security/location",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Void> checkSecurityStatus( @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Get list of questions", notes = "", response = SecurityChallenge.class, responseContainer = "List", authorizations = {
        @Authorization(value = "PlayerAccessToken")
    }, tags={ "Security question-answer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of security questions to be answered", response = SecurityChallenge.class, responseContainer = "List") })
    @RequestMapping(value = "/user/security/challenges",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<SecurityChallenge>> listPendingSecurityQuestions( @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Send back the answers", notes = "", response = Void.class, authorizations = {
        @Authorization(value = "PlayerAccessToken")
    }, tags={ "Security question-answer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The answers were accepted"),
        @ApiResponse(code = 400, message = "At least one answer we not accepted", response = Error.class) })
    @RequestMapping(value = "/user/security/location",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> sendSecurityQuestionAnswers(@ApiParam(value = "An array with all the answers" ,required=true )   @RequestBody List<SecurityAnswer> securityAnswer, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;

}
