/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.github.asyncmc.mojang.api.java.pkmst.api;

import com.github.asyncmc.mojang.api.java.pkmst.model.CurrentPlayerIDs;
import com.github.asyncmc.mojang.api.java.pkmst.model.Error;
import java.util.List;
import com.github.asyncmc.mojang.api.java.pkmst.model.NameChange;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;

import java.util.List;
/**
 * Provides the info about api methods
 * @author pkmst
 *
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaPKMSTServerCodegen", date = "2020-06-06T02:32:33.503412200-03:00[America/Sao_Paulo]")

@Api(value = "NameHistory", description = "the NameHistory API")
public interface NameHistoryApi {

    @ApiOperation(value = "Find the current UUID of multiple players at once", notes = "Find the current players name, UUID, demo status and migration flag by the current players name. The \"at\" parameter is not supported. Players not found are not returned. If no players are found, an empty array is returned.", response = CurrentPlayerIDs.class, responseContainer = "List", tags={ "Name History", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "An array containing all players found", response = CurrentPlayerIDs.class, responseContainer = "List") })
    @RequestMapping(value = "/profiles/minecraft",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<List<CurrentPlayerIDs>> findUniqueIdsByName(@ApiParam(value = "Array with the player names" ,required=true )   @RequestBody List<String> requestBody, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Gets the full player's name history", notes = "", response = NameChange.class, responseContainer = "List", tags={ "Name History", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of name changes, the first entry usually don't have a change time", response = NameChange.class, responseContainer = "List"),
        @ApiResponse(code = 204, message = "Username not found at the given time") })
    @RequestMapping(value = "/user/profiles/{stripped_uuid}/names",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<NameChange>> getNameHistory(@ApiParam(value = "The player UUID without hyphens",required=true ) @PathVariable("stripped_uuid") String strippedUuid, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Find the UUID by name", notes = "Find the current player name, UUID, demo status and migration flag by the current player name or at a given time.", response = CurrentPlayerIDs.class, tags={ "Name History", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The user was found", response = CurrentPlayerIDs.class),
        @ApiResponse(code = 204, message = "User not found"),
        @ApiResponse(code = 400, message = "If the timestamp is invalid", response = Error.class) })
    @RequestMapping(value = "/users/profiles/minecraft/{username}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CurrentPlayerIDs> getUniqueIdByName(@ApiParam(value = "The username in a given time, or in present if \"at\" is not sent",required=true ) @PathVariable("username") String username,@ApiParam(value = "Find the username in a given time, when 0 selects the original name however, it only works if the name was changed at least once, or if the account is legacy. The time is an UNIX timestamp (without milliseconds)")  @RequestParam(value = "at", required = false) Long at, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;

}
