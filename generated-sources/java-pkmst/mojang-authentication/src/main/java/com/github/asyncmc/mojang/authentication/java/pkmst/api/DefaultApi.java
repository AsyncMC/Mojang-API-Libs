/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.github.asyncmc.mojang.authentication.java.pkmst.api;

import com.github.asyncmc.mojang.authentication.java.pkmst.model.AccessKeys;
import com.github.asyncmc.mojang.authentication.java.pkmst.model.Authentication;
import com.github.asyncmc.mojang.authentication.java.pkmst.model.AuthenticationRequest;
import com.github.asyncmc.mojang.authentication.java.pkmst.model.Error;
import com.github.asyncmc.mojang.authentication.java.pkmst.model.RefreshRequest;
import com.github.asyncmc.mojang.authentication.java.pkmst.model.RefreshResponse;
import com.github.asyncmc.mojang.authentication.java.pkmst.model.UsernamePassword;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;

import java.util.List;
/**
 * Provides the info about api methods
 * @author pkmst
 *
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaPKMSTServerCodegen", date = "2020-06-06T04:59:26.160317300-03:00[America/Sao_Paulo]")

@Api(value = "Default", description = "the Default API")
public interface DefaultApi {

    @ApiOperation(value = "", notes = "", response = Authentication.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully authenticated", response = Authentication.class),
        @ApiResponse(code = 400, message = "Could not authenticate", response = Error.class) })
    @RequestMapping(value = "/authenticate",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Authentication> authenticate(@ApiParam(value = "" ,required=true )   @RequestBody AuthenticationRequest authenticationRequest, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "", response = Void.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The token have been invalidated"),
        @ApiResponse(code = 400, message = "Could not invalidate the token", response = Error.class) })
    @RequestMapping(value = "/invalidate",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> invalidate(@ApiParam(value = "" ,required=true )   @RequestBody AccessKeys accessKeys, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "", response = RefreshResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Session refreshed successfully. Note: The old access token gets invalidated.", response = RefreshResponse.class),
        @ApiResponse(code = 400, message = "Could not refresh the session", response = Error.class) })
    @RequestMapping(value = "/refresh",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<RefreshResponse> refresh(@ApiParam(value = "" ,required=true )   @RequestBody RefreshRequest refreshRequest, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "", response = Void.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "All tokens have been invalidated"),
        @ApiResponse(code = 400, message = "Invalid username/password", response = Error.class) })
    @RequestMapping(value = "/signout",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> siginout(@ApiParam(value = "" ,required=true )   @RequestBody UsernamePassword usernamePassword, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "", response = Void.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The token is valid"),
        @ApiResponse(code = 403, message = "The token is not valid", response = Error.class) })
    @RequestMapping(value = "/validate",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> validate(@ApiParam(value = "" ,required=true )   @RequestBody AccessKeys accessKeys, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;

}
