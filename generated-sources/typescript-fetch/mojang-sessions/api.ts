/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Mojang Session API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://sessionserver.mojang.com".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError" = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface PlayerProfile
 */
export interface PlayerProfile {
    /**
     * The player UUID without hyphens
     * @type {string}
     * @memberof PlayerProfile
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof PlayerProfile
     */
    name: string;
    /**
     * Will appear in the response if the user has not migrated their minecraft.net account to Mojang.
     * @type {boolean}
     * @memberof PlayerProfile
     */
    legacy?: boolean;
    /**
     * An array with all player properties, like skin and cape
     * @type {Array<PlayerProfileProperty>}
     * @memberof PlayerProfile
     */
    properties: Array<PlayerProfileProperty>;
}

/**
 * A profile property, may be signed. The values are encoded by base64 and usually contains a json. The schema for the textures are described at PlayerProfileTexturePropertyValue
 * @export
 * @interface PlayerProfileProperty
 */
export interface PlayerProfileProperty {
    /**
     * The property name
     * @type {string}
     * @memberof PlayerProfileProperty
     */
    name: string;
    /**
     * The serialized property value in base64.
     * @type {string}
     * @memberof PlayerProfileProperty
     */
    value: string;
    /**
     * signed data using Yggdrasil's private key
     * @type {string}
     * @memberof PlayerProfileProperty
     */
    signature?: string;
}

/**
 * This is obtained by decoding the \"textures\" property
 * @export
 * @interface PlayerProfileTexturePropertyValue
 */
export interface PlayerProfileTexturePropertyValue {
    /**
     * UNIX timestamp in milliseconds
     * @type {number}
     * @memberof PlayerProfileTexturePropertyValue
     */
    timestamp: number;
    /**
     * The player UUID without hyphens
     * @type {string}
     * @memberof PlayerProfileTexturePropertyValue
     */
    profileId: string;
    /**
     * The player's name
     * @type {string}
     * @memberof PlayerProfileTexturePropertyValue
     */
    profileName: string;
    /**
     * Only present if unsigned was set to false in the request
     * @type {boolean}
     * @memberof PlayerProfileTexturePropertyValue
     */
    signatureRequired?: boolean;
    /**
     * 
     * @type {PlayerTexture}
     * @memberof PlayerProfileTexturePropertyValue
     */
    textures?: PlayerTexture;
}

/**
 * Contains details about the skin
 * @export
 * @interface PlayerSkinMetadata
 */
export interface PlayerSkinMetadata {
    /**
     * The player model, currently only \"slim\" (Alex) is valid, for Steve's model this property must be absent.
     * @type {string}
     * @memberof PlayerSkinMetadata
     */
    model?: PlayerSkinMetadata.ModelEnum;
}

/**
 * @export
 * @namespace PlayerSkinMetadata
 */
export namespace PlayerSkinMetadata {
    /**
     * @export
     * @enum {string}
     */
    export enum ModelEnum {
        Slim = 'slim'
    }
}

/**
 * Wraps the URL to the texture and configures the player's model
 * @export
 * @interface PlayerSkinURL
 */
export interface PlayerSkinURL extends PlayerTextureURL {
}

/**
 * Provide links to the player's skin and cape
 * @export
 * @interface PlayerTexture
 */
export interface PlayerTexture {
    /**
     * 
     * @type {PlayerSkinURL}
     * @memberof PlayerTexture
     */
    SKIN?: PlayerSkinURL;
    /**
     * 
     * @type {PlayerTextureURL}
     * @memberof PlayerTexture
     */
    CAPE?: PlayerTextureURL;
}

/**
 * Wraps the URL to the texture
 * @export
 * @interface PlayerTextureURL
 */
export interface PlayerTextureURL {
    /**
     * The URL to the texture, must be in Mojang's domains.
     * @type {string}
     * @memberof PlayerTextureURL
     */
    url: string;
}

/**
 * An object describing giving a bit of information about the error
 * @export
 * @interface SessionApiError
 */
export interface SessionApiError {
    /**
     * A message describing the error
     * @type {string}
     * @memberof SessionApiError
     */
    error?: string;
    /**
     * The request path
     * @type {string}
     * @memberof SessionApiError
     */
    path?: string;
}


/**
 * BansApi - fetch parameter creator
 * @export
 */
export const BansApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a list of SHA1 hashes used to check server addresses against when the client tries to connect. Clients check the lowercase name, using the ISO-8859-1 charset, against this list. They will also attempt to check subdomains, replacing each level with a *. Specifically, it splits based off of the . in the domain, goes through each section removing one at a time. For instance, for mc.example.com, it would try mc.example.com, *.example.com, and *.com. With IP addresses (verified by having 4 split sections, with each section being a valid integer between 0 and 255, inclusive) substitution starts from the end, so for 192.168.0.1, it would try 192.168.0.1, 192.168.0.*, 192.168.*, and 192.*. This check is done by the bootstrap class in netty. The default netty class is overridden by one in the com.mojang:netty dependency loaded by the launcher. This allows it to affect any version that used netty (1.7+)
         * @summary A list of SHA1 hashes of banned servers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockedServerHashes(options: any = {}): FetchArgs {
            const localVarPath = `/blockedservers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BansApi - functional programming interface
 * @export
 */
export const BansApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns a list of SHA1 hashes used to check server addresses against when the client tries to connect. Clients check the lowercase name, using the ISO-8859-1 charset, against this list. They will also attempt to check subdomains, replacing each level with a *. Specifically, it splits based off of the . in the domain, goes through each section removing one at a time. For instance, for mc.example.com, it would try mc.example.com, *.example.com, and *.com. With IP addresses (verified by having 4 split sections, with each section being a valid integer between 0 and 255, inclusive) substitution starts from the end, so for 192.168.0.1, it would try 192.168.0.1, 192.168.0.*, 192.168.*, and 192.*. This check is done by the bootstrap class in netty. The default netty class is overridden by one in the com.mojang:netty dependency loaded by the launcher. This allows it to affect any version that used netty (1.7+)
         * @summary A list of SHA1 hashes of banned servers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockedServerHashes(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = BansApiFetchParamCreator(configuration).getBlockedServerHashes(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * BansApi - factory interface
 * @export
 */
export const BansApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Returns a list of SHA1 hashes used to check server addresses against when the client tries to connect. Clients check the lowercase name, using the ISO-8859-1 charset, against this list. They will also attempt to check subdomains, replacing each level with a *. Specifically, it splits based off of the . in the domain, goes through each section removing one at a time. For instance, for mc.example.com, it would try mc.example.com, *.example.com, and *.com. With IP addresses (verified by having 4 split sections, with each section being a valid integer between 0 and 255, inclusive) substitution starts from the end, so for 192.168.0.1, it would try 192.168.0.1, 192.168.0.*, 192.168.*, and 192.*. This check is done by the bootstrap class in netty. The default netty class is overridden by one in the com.mojang:netty dependency loaded by the launcher. This allows it to affect any version that used netty (1.7+)
         * @summary A list of SHA1 hashes of banned servers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockedServerHashes(options?: any) {
            return BansApiFp(configuration).getBlockedServerHashes(options)(fetch, basePath);
        },
    };
};

/**
 * BansApi - object-oriented interface
 * @export
 * @class BansApi
 * @extends {BaseAPI}
 */
export class BansApi extends BaseAPI {
    /**
     * Returns a list of SHA1 hashes used to check server addresses against when the client tries to connect. Clients check the lowercase name, using the ISO-8859-1 charset, against this list. They will also attempt to check subdomains, replacing each level with a *. Specifically, it splits based off of the . in the domain, goes through each section removing one at a time. For instance, for mc.example.com, it would try mc.example.com, *.example.com, and *.com. With IP addresses (verified by having 4 split sections, with each section being a valid integer between 0 and 255, inclusive) substitution starts from the end, so for 192.168.0.1, it would try 192.168.0.1, 192.168.0.*, 192.168.*, and 192.*. This check is done by the bootstrap class in netty. The default netty class is overridden by one in the com.mojang:netty dependency loaded by the launcher. This allows it to affect any version that used netty (1.7+)
     * @summary A list of SHA1 hashes of banned servers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BansApi
     */
    public getBlockedServerHashes(options?: any) {
        return BansApiFp(this.configuration).getBlockedServerHashes(options)(this.fetch, this.basePath);
    }

}

/**
 * LoginApi - fetch parameter creator
 * @export
 */
export const LoginApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This will return the player's username plus any additional information about them (e.g. skins). This has a much stricter rate limit: You can request the same profile once per minute, however you can send as many unique requests as you like.
         * @summary Gets the player's game profile
         * @param {string} strippedUuid The player UUID without hyphens
         * @param {boolean} [unsigned] When set to false, the signature data are sent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerProfile(strippedUuid: string, unsigned?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'strippedUuid' is not null or undefined
            if (strippedUuid === null || strippedUuid === undefined) {
                throw new RequiredError('strippedUuid','Required parameter strippedUuid was null or undefined when calling getPlayerProfile.');
            }
            const localVarPath = `/session/minecraft/profile/{stripped_uuid}`
                .replace(`{${"stripped_uuid"}}`, encodeURIComponent(String(strippedUuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (unsigned !== undefined) {
                localVarQueryParameter['unsigned'] = unsigned;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginApi - functional programming interface
 * @export
 */
export const LoginApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This will return the player's username plus any additional information about them (e.g. skins). This has a much stricter rate limit: You can request the same profile once per minute, however you can send as many unique requests as you like.
         * @summary Gets the player's game profile
         * @param {string} strippedUuid The player UUID without hyphens
         * @param {boolean} [unsigned] When set to false, the signature data are sent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerProfile(strippedUuid: string, unsigned?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PlayerProfile> {
            const localVarFetchArgs = LoginApiFetchParamCreator(configuration).getPlayerProfile(strippedUuid, unsigned, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * LoginApi - factory interface
 * @export
 */
export const LoginApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * This will return the player's username plus any additional information about them (e.g. skins). This has a much stricter rate limit: You can request the same profile once per minute, however you can send as many unique requests as you like.
         * @summary Gets the player's game profile
         * @param {string} strippedUuid The player UUID without hyphens
         * @param {boolean} [unsigned] When set to false, the signature data are sent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerProfile(strippedUuid: string, unsigned?: boolean, options?: any) {
            return LoginApiFp(configuration).getPlayerProfile(strippedUuid, unsigned, options)(fetch, basePath);
        },
    };
};

/**
 * LoginApi - object-oriented interface
 * @export
 * @class LoginApi
 * @extends {BaseAPI}
 */
export class LoginApi extends BaseAPI {
    /**
     * This will return the player's username plus any additional information about them (e.g. skins). This has a much stricter rate limit: You can request the same profile once per minute, however you can send as many unique requests as you like.
     * @summary Gets the player's game profile
     * @param {string} strippedUuid The player UUID without hyphens
     * @param {boolean} [unsigned] When set to false, the signature data are sent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public getPlayerProfile(strippedUuid: string, unsigned?: boolean, options?: any) {
        return LoginApiFp(this.configuration).getPlayerProfile(strippedUuid, unsigned, options)(this.fetch, this.basePath);
    }

}

