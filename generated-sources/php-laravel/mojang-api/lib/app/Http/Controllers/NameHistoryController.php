<?php

/**
 * Mojang API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > swagger-codegen/modules/swagger-codegen/src/main/resources/php-laravel/
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;

class NameHistoryController extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation findUniqueIdsByName
     *
     * Find the current UUID of multiple players at once.
     *
     *
     * @return Http response
     */
    public function findUniqueIdsByName()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['requestBody'])) {
            throw new \InvalidArgumentException('Missing the required parameter $requestBody when calling findUniqueIdsByName');
        }
        $requestBody = $input['requestBody'];


        return response('How about implementing findUniqueIdsByName as a post method ?');
    }
    /**
     * Operation getNameHistory
     *
     * Gets the full player's name history.
     *
     * @param string $strippedUuid The player UUID without hyphens (required)
     *
     * @return Http response
     */
    public function getNameHistory($strippedUuid)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getNameHistory as a get method ?');
    }
    /**
     * Operation getUniqueIdByName
     *
     * Find the UUID by name.
     *
     * @param string $username The username in a given time, or in present if \&quot;at\&quot; is not sent (required)
     *
     * @return Http response
     */
    public function getUniqueIdByName($username)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getUniqueIdByName as a get method ?');
    }
}
