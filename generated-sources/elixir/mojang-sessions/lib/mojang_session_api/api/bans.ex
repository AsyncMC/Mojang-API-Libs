# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule MojangSessionAPI.Api.Bans do
  @moduledoc """
  API calls for all endpoints tagged `Bans`.
  """

  alias MojangSessionAPI.Connection
  import MojangSessionAPI.RequestBuilder


  @doc """
  A list of SHA1 hashes of banned servers
  Returns a list of SHA1 hashes used to check server addresses against when the client tries to connect. Clients check the lowercase name, using the ISO-8859-1 charset, against this list. They will also attempt to check subdomains, replacing each level with a *. Specifically, it splits based off of the . in the domain, goes through each section removing one at a time. For instance, for mc.example.com, it would try mc.example.com, *.example.com, and *.com. With IP addresses (verified by having 4 split sections, with each section being a valid integer between 0 and 255, inclusive) substitution starts from the end, so for 192.168.0.1, it would try 192.168.0.1, 192.168.0.*, 192.168.*, and 192.*. This check is done by the bootstrap class in netty. The default netty class is overridden by one in the com.mojang:netty dependency loaded by the launcher. This allows it to affect any version that used netty (1.7+)

  ## Parameters

  - connection (MojangSessionAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %MojangSessionAPI.Model.String.t{}} on success
  {:error, info} on failure
  """
  @spec get_blocked_server_hashes(Tesla.Env.client, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def get_blocked_server_hashes(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/blockedservers")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end
end
