# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule com.github.asyncmc.mojang.authentication.elixir.server.Api.Default do
  @moduledoc """
  API calls for all endpoints tagged `Default`.
  """

  alias com.github.asyncmc.mojang.authentication.elixir.server.Connection
  import com.github.asyncmc.mojang.authentication.elixir.server.RequestBuilder


  @doc """

  ## Parameters

  - connection (com.github.asyncmc.mojang.authentication.elixir.server.Connection): Connection to server
  - authentication_request (AuthenticationRequest): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.github.asyncmc.mojang.authentication.elixir.server.Model.Authentication{}} on success
  {:error, info} on failure
  """
  @spec authenticate(Tesla.Env.client, com.github.asyncmc.mojang.authentication.elixir.server.Model.AuthenticationRequest.t, keyword()) :: {:ok, com.github.asyncmc.mojang.authentication.elixir.server.Model.Authentication.t} | {:error, Tesla.Env.t}
  def authenticate(connection, authentication_request, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/authenticate")
    |> add_param(:body, :body, authentication_request)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%com.github.asyncmc.mojang.authentication.elixir.server.Model.Authentication{})
  end

  @doc """

  ## Parameters

  - connection (com.github.asyncmc.mojang.authentication.elixir.server.Connection): Connection to server
  - access_keys (AccessKeys): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec invalidate(Tesla.Env.client, com.github.asyncmc.mojang.authentication.elixir.server.Model.AccessKeys.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def invalidate(connection, access_keys, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/invalidate")
    |> add_param(:body, :body, access_keys)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """

  ## Parameters

  - connection (com.github.asyncmc.mojang.authentication.elixir.server.Connection): Connection to server
  - refresh_request (RefreshRequest): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %com.github.asyncmc.mojang.authentication.elixir.server.Model.RefreshResponse{}} on success
  {:error, info} on failure
  """
  @spec refresh(Tesla.Env.client, com.github.asyncmc.mojang.authentication.elixir.server.Model.RefreshRequest.t, keyword()) :: {:ok, com.github.asyncmc.mojang.authentication.elixir.server.Model.RefreshResponse.t} | {:error, Tesla.Env.t}
  def refresh(connection, refresh_request, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/refresh")
    |> add_param(:body, :body, refresh_request)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%com.github.asyncmc.mojang.authentication.elixir.server.Model.RefreshResponse{})
  end

  @doc """

  ## Parameters

  - connection (com.github.asyncmc.mojang.authentication.elixir.server.Connection): Connection to server
  - username_password (UsernamePassword): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec siginout(Tesla.Env.client, com.github.asyncmc.mojang.authentication.elixir.server.Model.UsernamePassword.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def siginout(connection, username_password, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/signout")
    |> add_param(:body, :body, username_password)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """

  ## Parameters

  - connection (com.github.asyncmc.mojang.authentication.elixir.server.Connection): Connection to server
  - access_keys (AccessKeys): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec validate(Tesla.Env.client, com.github.asyncmc.mojang.authentication.elixir.server.Model.AccessKeys.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def validate(connection, access_keys, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/validate")
    |> add_param(:body, :body, access_keys)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end
end
