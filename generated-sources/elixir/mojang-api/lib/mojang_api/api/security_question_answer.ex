# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule MojangAPI.Api.SecurityQuestionAnswer do
  @moduledoc """
  API calls for all endpoints tagged `SecurityQuestionAnswer`.
  """

  alias MojangAPI.Connection
  import MojangAPI.RequestBuilder


  @doc """
  Check if security questions are needed

  ## Parameters

  - connection (MojangAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec check_security_status(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def check_security_status(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/user/security/location")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Get list of questions

  ## Parameters

  - connection (MojangAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%SecurityChallenge{}, ...]} on success
  {:error, info} on failure
  """
  @spec list_pending_security_questions(Tesla.Env.client, keyword()) :: {:ok, list(MojangAPI.Model.SecurityChallenge.t)} | {:error, Tesla.Env.t}
  def list_pending_security_questions(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/user/security/challenges")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%MojangAPI.Model.SecurityChallenge{}])
  end

  @doc """
  Send back the answers

  ## Parameters

  - connection (MojangAPI.Connection): Connection to server
  - security_answer ([SecurityAnswer]): An array with all the answers
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec send_security_question_answers(Tesla.Env.client, list(MojangAPI.Model.SecurityAnswer.t), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def send_security_question_answers(connection, security_answer, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/user/security/location")
    |> add_param(:body, :body, security_answer)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end
end
