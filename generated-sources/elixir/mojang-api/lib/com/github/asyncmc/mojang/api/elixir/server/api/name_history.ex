# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule com.github.asyncmc.mojang.api.elixir.server.Api.NameHistory do
  @moduledoc """
  API calls for all endpoints tagged `NameHistory`.
  """

  alias com.github.asyncmc.mojang.api.elixir.server.Connection
  import com.github.asyncmc.mojang.api.elixir.server.RequestBuilder


  @doc """
  Find the current UUID of multiple players at once
  Find the current players name, UUID, demo status and migration flag by the current players name. The \&quot;at\&quot; parameter is not supported. Players not found are not returned. If no players are found, an empty array is returned.

  ## Parameters

  - connection (com.github.asyncmc.mojang.api.elixir.server.Connection): Connection to server
  - request_body ([String.t]): Array with the player names
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%CurrentPlayerIDs{}, ...]} on success
  {:error, info} on failure
  """
  @spec find_unique_ids_by_name(Tesla.Env.client, list(String.t), keyword()) :: {:ok, list(com.github.asyncmc.mojang.api.elixir.server.Model.CurrentPlayerIDs.t)} | {:error, Tesla.Env.t}
  def find_unique_ids_by_name(connection, request_body, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/profiles/minecraft")
    |> add_param(:body, :body, request_body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%com.github.asyncmc.mojang.api.elixir.server.Model.CurrentPlayerIDs{}])
  end

  @doc """
  Gets the full player&#39;s name history

  ## Parameters

  - connection (com.github.asyncmc.mojang.api.elixir.server.Connection): Connection to server
  - stripped_uuid (String.t): The player UUID without hyphens
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%NameChange{}, ...]} on success
  {:error, info} on failure
  """
  @spec get_name_history(Tesla.Env.client, String.t, keyword()) :: {:ok, list(com.github.asyncmc.mojang.api.elixir.server.Model.NameChange.t)} | {:error, Tesla.Env.t}
  def get_name_history(connection, stripped_uuid, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/user/profiles/#{stripped_uuid}/names")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%com.github.asyncmc.mojang.api.elixir.server.Model.NameChange{}])
  end

  @doc """
  Find the UUID by name
  Find the current player name, UUID, demo status and migration flag by the current player name or at a given time.

  ## Parameters

  - connection (com.github.asyncmc.mojang.api.elixir.server.Connection): Connection to server
  - username (String.t): The username in a given time, or in present if \&quot;at\&quot; is not sent
  - opts (KeywordList): [optional] Optional parameters
    - :at (integer()): Find the username in a given time, when 0 selects the original name however, it only works if the name was changed at least once, or if the account is legacy. The time is an UNIX timestamp (without milliseconds)
  ## Returns

  {:ok, %com.github.asyncmc.mojang.api.elixir.server.Model.CurrentPlayerIDs{}} on success
  {:error, info} on failure
  """
  @spec get_unique_id_by_name(Tesla.Env.client, String.t, keyword()) :: {:ok, com.github.asyncmc.mojang.api.elixir.server.Model.CurrentPlayerIDs.t} | {:error, Tesla.Env.t}
  def get_unique_id_by_name(connection, username, opts \\ []) do
    optional_params = %{
      :"at" => :query
    }
    %{}
    |> method(:get)
    |> url("/users/profiles/minecraft/#{username}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%com.github.asyncmc.mojang.api.elixir.server.Model.CurrentPlayerIDs{})
  end
end
