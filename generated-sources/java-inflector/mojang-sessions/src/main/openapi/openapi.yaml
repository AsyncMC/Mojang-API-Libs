openapi: 3.0.1
info:
  title: Mojang Session API
  version: 2020-06-05
servers:
- url: https://sessionserver.mojang.com
tags:
- name: Login
- name: Bans
paths:
  /blockedservers:
    get:
      description: |-
        Returns a list of SHA1 hashes used to check server addresses against when the client tries to connect.
        Clients check the lowercase name, using the ISO-8859-1 charset, against this list. They will also attempt to check subdomains, replacing each level with a *. Specifically, it splits based off of the . in the domain, goes through each section removing one at a time. For instance, for mc.example.com, it would try mc.example.com, *.example.com, and *.com. With IP addresses (verified by having 4 split sections, with each section being a valid integer between 0 and 255, inclusive) substitution starts from the end, so for 192.168.0.1, it would try 192.168.0.1, 192.168.0.*, 192.168.*, and 192.*.
        This check is done by the bootstrap class in netty. The default netty class is overridden by one in the com.mojang:netty dependency loaded by the launcher. This allows it to affect any version that used netty (1.7+)
      operationId: getBlockedServerHashes
      responses:
        200:
          content:
            text/plain:
              schema:
                example: 6f2520f8bd70a718c568ab5274c56bdbbfc14ef4 7ea72de5f8e70a2ac45f1aa17d43f0ca3cddeedd c005ad34245a8f2105658da2d6d6e8545ef0f0de c645d6c6430db3069abd291ec13afebdb320714b 8bf58811e6ebca16a01b842ff0c012db1171d7d6 8789800277882d1989d384e7941b6ad3dadab430 e40c3456fb05687b8eeb17213a47b263d566f179 278b24ffff7f9f46cf71212a4c0948d07fb3bc35 c78697e385bfa58d6bd2a013f543cdfbdc297c4f b13009db1e2fbe05465716f67c8d58b9c0503520 3e560742576af9413fca72e70f75d7ddc9416020 986204c70d368d50ffead9031e86f2b9e70bb6d0
                type: string
          description: A list of SHA1 hashes, one hash per line
      summary: A list of SHA1 hashes of banned servers
      tags:
      - Bans
      x-accepts: text/plain
  /session/minecraft/profile/{stripped_uuid}:
    get:
      description: |-
        This will return the player's username plus any additional information about them (e.g. skins).
        This has a much stricter rate limit: You can request the same profile once per minute, however you can send as many unique requests as you like.
      operationId: getPlayerProfile
      parameters:
      - description: The player UUID without hyphens
        example: 853c80ef3c3749fdaa49938b674adae6
        explode: false
        in: path
        name: stripped_uuid
        required: true
        schema:
          format: stripped-uuid
          type: string
        style: simple
      - description: When set to false, the signature data are sent
        explode: true
        in: query
        name: unsigned
        required: false
        schema:
          type: boolean
        style: form
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerProfile'
          description: The player profile and all properties
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionApiError'
          description: UUID is invalid
      summary: Gets the player's game profile
      tags:
      - Login
      x-accepts: application/json
components:
  schemas:
    PlayerProfile:
      example:
        legacy: false
        name: jeb_
        id: 853c80ef3c3749fdaa49938b674adae6
        properties:
        - signature: signature
          name: textures
          value: value
        - signature: signature
          name: textures
          value: value
      properties:
        id:
          description: The player UUID without hyphens
          example: 853c80ef3c3749fdaa49938b674adae6
          format: stripped-uuid
          type: string
        name:
          example: jeb_
          format: username
          type: string
        legacy:
          default: false
          description: Will appear in the response if the user has not migrated their minecraft.net account to Mojang.
          type: boolean
        properties:
          description: An array with all player properties, like skin and cape
          items:
            $ref: '#/components/schemas/PlayerProfileProperty'
          type: array
      required:
      - id
      - name
      - properties
      type: object
    PlayerProfileProperty:
      description: A profile property, may be signed. The values are encoded by base64 and usually contains a json. The schema for the textures are described at PlayerProfileTexturePropertyValue
      example:
        signature: signature
        name: textures
        value: value
      properties:
        name:
          description: The property name
          example: textures
          type: string
        value:
          description: The serialized property value in base64.
          format: byte
          type: string
        signature:
          description: signed data using Yggdrasil's private key
          format: byte
          type: string
      required:
      - name
      - value
      type: object
    PlayerProfileTexturePropertyValue:
      description: This is obtained by decoding the "textures" property
      properties:
        timestamp:
          description: UNIX timestamp in milliseconds
          example: 1591397469867
          format: int64
          type: integer
        profileId:
          description: The player UUID without hyphens
          example: 853c80ef3c3749fdaa49938b674adae6
          format: stripped-uuid
          type: string
        profileName:
          description: The player's name
          example: jeb_
          format: username
          type: string
        signatureRequired:
          default: false
          description: Only present if unsigned was set to false in the request
          type: boolean
        textures:
          $ref: '#/components/schemas/PlayerTexture'
      required:
      - profileId
      - profileName
      - timestamp
      type: object
    PlayerTexture:
      description: Provide links to the player's skin and cape
      properties:
        SKIN:
          $ref: '#/components/schemas/PlayerSkinURL'
        CAPE:
          $ref: '#/components/schemas/PlayerTextureURL'
      type: object
    PlayerTextureURL:
      description: Wraps the URL to the texture
      properties:
        url:
          description: The URL to the texture, must be in Mojang's domains.
          example: http://textures.minecraft.net/texture/5786fe99be377dfb6858859f926c4dbc995751e91cee373468c5fbf4865e7151
          format: url
          type: string
      required:
      - url
      type: object
    PlayerSkinURL:
      allOf:
      - $ref: '#/components/schemas/PlayerTextureURL'
      description: Wraps the URL to the texture and configures the player's model
      properties:
        metadata:
          $ref: '#/components/schemas/PlayerSkinMetadata'
        url:
          example: http://textures.minecraft.net/texture/7fd9ba42a7c81eeea22f1524271ae85a8e045ce0af5a6ae16c6406ae917e68b5
      type: object
    PlayerSkinMetadata:
      description: Contains details about the skin
      properties:
        model:
          description: The player model, currently only "slim" (Alex) is valid, for Steve's model this property must be absent.
          enum:
          - slim
          type: string
      type: object
    SessionApiError:
      description: An object describing giving a bit of information about the error
      properties:
        error:
          description: A message describing the error
          example: Bad Request
          type: string
        path:
          description: The request path
          example: /session/minecraft/profile/asdadsda
          type: string
      type: object
