/**
 * Mojang API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.3.4
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['com.github.asyncmc.mojang.status.javascript.server/ApiClient', 'com.github.asyncmc.mojang.status.javascript.server/com.github.asyncmc.mojang.status.javascript.model/ApiStatus', 'com.github.asyncmc.mojang.status.javascript.server/com.github.asyncmc.mojang.status.javascript.api/DefaultApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./com.github.asyncmc.mojang.status.javascript.model/ApiStatus'), require('./com.github.asyncmc.mojang.status.javascript.api/DefaultApi'));
  }
}(function(ApiClient, ApiStatus, DefaultApi) {
  'use strict';

  /**
   * JS API client generated by OpenAPI Generator.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var MojangApi = require('com.github.asyncmc.mojang.status.javascript.server/index'); // See note below*.
   * var xxxSvc = new MojangApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new MojangApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['com.github.asyncmc.mojang.status.javascript.server/index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new MojangApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new MojangApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module com.github.asyncmc.mojang.status.javascript.server/index
   * @version 2020-06-05
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:com.github.asyncmc.mojang.status.javascript.server/ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The ApiStatus model constructor.
     * @property {module:com.github.asyncmc.mojang.status.javascript.server/com.github.asyncmc.mojang.status.javascript.model/ApiStatus}
     */
    ApiStatus: ApiStatus,
    /**
     * The DefaultApi service constructor.
     * @property {module:com.github.asyncmc.mojang.status.javascript.server/com.github.asyncmc.mojang.status.javascript.api/DefaultApi}
     */
    DefaultApi: DefaultApi
  };

  return exports;
}));
