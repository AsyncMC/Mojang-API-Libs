/**
 * Mojang Session API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.3.4
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['com.github.asyncmc.mojang.sessions.javascript.server/ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.MojangSessionApi) {
      root.MojangSessionApi = {};
    }
    root.MojangSessionApi.BansApi = factory(root.MojangSessionApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Bans service.
   * @module com.github.asyncmc.mojang.sessions.javascript.server/com.github.asyncmc.mojang.sessions.javascript.api/BansApi
   * @version 2020-06-05
   */

  /**
   * Constructs a new BansApi. 
   * @alias module:com.github.asyncmc.mojang.sessions.javascript.server/com.github.asyncmc.mojang.sessions.javascript.api/BansApi
   * @class
   * @param {module:com.github.asyncmc.mojang.sessions.javascript.server/ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:com.github.asyncmc.mojang.sessions.javascript.server/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getBlockedServerHashes operation.
     * @callback module:com.github.asyncmc.mojang.sessions.javascript.server/com.github.asyncmc.mojang.sessions.javascript.api/BansApi~getBlockedServerHashesCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A list of SHA1 hashes of banned servers
     * Returns a list of SHA1 hashes used to check server addresses against when the client tries to connect. Clients check the lowercase name, using the ISO-8859-1 charset, against this list. They will also attempt to check subdomains, replacing each level with a *. Specifically, it splits based off of the . in the domain, goes through each section removing one at a time. For instance, for mc.example.com, it would try mc.example.com, *.example.com, and *.com. With IP addresses (verified by having 4 split sections, with each section being a valid integer between 0 and 255, inclusive) substitution starts from the end, so for 192.168.0.1, it would try 192.168.0.1, 192.168.0.*, 192.168.*, and 192.*. This check is done by the bootstrap class in netty. The default netty class is overridden by one in the com.mojang:netty dependency loaded by the launcher. This allows it to affect any version that used netty (1.7+)
     * @param {module:com.github.asyncmc.mojang.sessions.javascript.server/com.github.asyncmc.mojang.sessions.javascript.api/BansApi~getBlockedServerHashesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    this.getBlockedServerHashes = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/blockedservers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
