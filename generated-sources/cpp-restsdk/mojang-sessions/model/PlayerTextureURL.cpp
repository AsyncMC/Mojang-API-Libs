/**
 * Mojang Session API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.3.4.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PlayerTextureURL.h"

namespace com {
namespace github {
namespace asyncmc {
namespace mojang {
namespace sessions {
namespace cpp {
namespace restsdk {
namespace model {

PlayerTextureURL::PlayerTextureURL()
{
    m_Url = utility::conversions::to_string_t("");
}

PlayerTextureURL::~PlayerTextureURL()
{
}

void PlayerTextureURL::validate()
{
    // TODO: implement validation
}

web::json::value PlayerTextureURL::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("url")] = ModelBase::toJson(m_Url);

    return val;
}

void PlayerTextureURL::fromJson(const web::json::value& val)
{
    setUrl(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("url"))));
}

void PlayerTextureURL::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("url"), m_Url));
}

void PlayerTextureURL::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setUrl(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("url"))));
}

utility::string_t PlayerTextureURL::getUrl() const
{
    return m_Url;
}

void PlayerTextureURL::setUrl(const utility::string_t& value)
{
    m_Url = value;
    
}

}
}
}
}
}
}
}
}

