/**
 * Mojang Session API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.3.4.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PlayerProfile.h
 *
 * 
 */

#ifndef COM_GITHUB_ASYNCMC_MOJANG_SESSIONS_CPP_RESTSDK_MODEL_PlayerProfile_H_
#define COM_GITHUB_ASYNCMC_MOJANG_SESSIONS_CPP_RESTSDK_MODEL_PlayerProfile_H_


#include "../ModelBase.h"

#include "PlayerProfileProperty.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace com {
namespace github {
namespace asyncmc {
namespace mojang {
namespace sessions {
namespace cpp {
namespace restsdk {
namespace model {

/// <summary>
/// 
/// </summary>
class  PlayerProfile
    : public ModelBase
{
public:
    PlayerProfile();
    virtual ~PlayerProfile();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PlayerProfile members

    /// <summary>
    /// The player UUID without hyphens
    /// </summary>
    utility::string_t getId() const;
    
    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    
    void setName(const utility::string_t& value);

    /// <summary>
    /// Will appear in the response if the user has not migrated their minecraft.net account to Mojang.
    /// </summary>
    bool isLegacy() const;
    bool legacyIsSet() const;
    void unsetLegacy();

    void setLegacy(bool value);

    /// <summary>
    /// An array with all player properties, like skin and cape
    /// </summary>
    std::vector<std::shared_ptr<PlayerProfileProperty>>& getProperties();
    
    void setProperties(const std::vector<std::shared_ptr<PlayerProfileProperty>>& value);


protected:
    utility::string_t m_Id;
        utility::string_t m_Name;
        bool m_Legacy;
    bool m_LegacyIsSet;
    std::vector<std::shared_ptr<PlayerProfileProperty>> m_Properties;
    };

}
}
}
}
}
}
}
}

#endif /* COM_GITHUB_ASYNCMC_MOJANG_SESSIONS_CPP_RESTSDK_MODEL_PlayerProfile_H_ */
