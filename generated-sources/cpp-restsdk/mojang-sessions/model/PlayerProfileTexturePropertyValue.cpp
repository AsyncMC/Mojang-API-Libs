/**
 * Mojang Session API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.3.4.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PlayerProfileTexturePropertyValue.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

PlayerProfileTexturePropertyValue::PlayerProfileTexturePropertyValue()
{
    m_Timestamp = 0L;
    m_ProfileId = utility::conversions::to_string_t("");
    m_ProfileName = utility::conversions::to_string_t("");
    m_SignatureRequired = false;
    m_SignatureRequiredIsSet = false;
    m_TexturesIsSet = false;
}

PlayerProfileTexturePropertyValue::~PlayerProfileTexturePropertyValue()
{
}

void PlayerProfileTexturePropertyValue::validate()
{
    // TODO: implement validation
}

web::json::value PlayerProfileTexturePropertyValue::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("timestamp")] = ModelBase::toJson(m_Timestamp);
    val[utility::conversions::to_string_t("profileId")] = ModelBase::toJson(m_ProfileId);
    val[utility::conversions::to_string_t("profileName")] = ModelBase::toJson(m_ProfileName);
    if(m_SignatureRequiredIsSet)
    {
        val[utility::conversions::to_string_t("signatureRequired")] = ModelBase::toJson(m_SignatureRequired);
    }
    if(m_TexturesIsSet)
    {
        val[utility::conversions::to_string_t("textures")] = ModelBase::toJson(m_Textures);
    }

    return val;
}

void PlayerProfileTexturePropertyValue::fromJson(const web::json::value& val)
{
    setTimestamp(ModelBase::int64_tFromJson(val.at(utility::conversions::to_string_t("timestamp"))));
    setProfileId(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("profileId"))));
    setProfileName(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("profileName"))));
    if(val.has_field(utility::conversions::to_string_t("signatureRequired")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("signatureRequired"));
        if(!fieldValue.is_null())
        {
            setSignatureRequired(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("textures")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("textures"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PlayerTexture> newItem(new PlayerTexture());
            newItem->fromJson(fieldValue);
            setTextures( newItem );
        }
    }
}

void PlayerProfileTexturePropertyValue::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timestamp"), m_Timestamp));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("profileId"), m_ProfileId));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("profileName"), m_ProfileName));
    if(m_SignatureRequiredIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("signatureRequired"), m_SignatureRequired));
    }
    if(m_TexturesIsSet)
    {
        if (m_Textures.get())
        {
            m_Textures->toMultipart(multipart, utility::conversions::to_string_t("textures."));
        }
    }
}

void PlayerProfileTexturePropertyValue::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setTimestamp(ModelBase::int64_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("timestamp"))));
    setProfileId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("profileId"))));
    setProfileName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("profileName"))));
    if(multipart->hasContent(utility::conversions::to_string_t("signatureRequired")))
    {
        setSignatureRequired(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("signatureRequired"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("textures")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("textures")))
        {
            std::shared_ptr<PlayerTexture> newItem(new PlayerTexture());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("textures."));
            setTextures( newItem );
        }
    }
}

int64_t PlayerProfileTexturePropertyValue::getTimestamp() const
{
    return m_Timestamp;
}

void PlayerProfileTexturePropertyValue::setTimestamp(int64_t value)
{
    m_Timestamp = value;
    
}

utility::string_t PlayerProfileTexturePropertyValue::getProfileId() const
{
    return m_ProfileId;
}

void PlayerProfileTexturePropertyValue::setProfileId(const utility::string_t& value)
{
    m_ProfileId = value;
    
}

utility::string_t PlayerProfileTexturePropertyValue::getProfileName() const
{
    return m_ProfileName;
}

void PlayerProfileTexturePropertyValue::setProfileName(const utility::string_t& value)
{
    m_ProfileName = value;
    
}

bool PlayerProfileTexturePropertyValue::isSignatureRequired() const
{
    return m_SignatureRequired;
}

void PlayerProfileTexturePropertyValue::setSignatureRequired(bool value)
{
    m_SignatureRequired = value;
    m_SignatureRequiredIsSet = true;
}

bool PlayerProfileTexturePropertyValue::signatureRequiredIsSet() const
{
    return m_SignatureRequiredIsSet;
}

void PlayerProfileTexturePropertyValue::unsetSignatureRequired()
{
    m_SignatureRequiredIsSet = false;
}

std::shared_ptr<PlayerTexture> PlayerProfileTexturePropertyValue::getTextures() const
{
    return m_Textures;
}

void PlayerProfileTexturePropertyValue::setTextures(const std::shared_ptr<PlayerTexture>& value)
{
    m_Textures = value;
    m_TexturesIsSet = true;
}

bool PlayerProfileTexturePropertyValue::texturesIsSet() const
{
    return m_TexturesIsSet;
}

void PlayerProfileTexturePropertyValue::unsetTextures()
{
    m_TexturesIsSet = false;
}

}
}
}
}

