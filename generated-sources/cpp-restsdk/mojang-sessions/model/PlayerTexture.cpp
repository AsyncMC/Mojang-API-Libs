/**
 * Mojang Session API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.3.4.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PlayerTexture.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

PlayerTexture::PlayerTexture()
{
    m_SKINIsSet = false;
    m_CAPEIsSet = false;
}

PlayerTexture::~PlayerTexture()
{
}

void PlayerTexture::validate()
{
    // TODO: implement validation
}

web::json::value PlayerTexture::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_SKINIsSet)
    {
        val[utility::conversions::to_string_t("SKIN")] = ModelBase::toJson(m_SKIN);
    }
    if(m_CAPEIsSet)
    {
        val[utility::conversions::to_string_t("CAPE")] = ModelBase::toJson(m_CAPE);
    }

    return val;
}

void PlayerTexture::fromJson(const web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("SKIN")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("SKIN"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PlayerSkinURL> newItem(new PlayerSkinURL());
            newItem->fromJson(fieldValue);
            setSKIN( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("CAPE")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("CAPE"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PlayerTextureURL> newItem(new PlayerTextureURL());
            newItem->fromJson(fieldValue);
            setCAPE( newItem );
        }
    }
}

void PlayerTexture::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_SKINIsSet)
    {
        if (m_SKIN.get())
        {
            m_SKIN->toMultipart(multipart, utility::conversions::to_string_t("SKIN."));
        }
    }
    if(m_CAPEIsSet)
    {
        if (m_CAPE.get())
        {
            m_CAPE->toMultipart(multipart, utility::conversions::to_string_t("CAPE."));
        }
    }
}

void PlayerTexture::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("SKIN")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("SKIN")))
        {
            std::shared_ptr<PlayerSkinURL> newItem(new PlayerSkinURL());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("SKIN."));
            setSKIN( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("CAPE")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("CAPE")))
        {
            std::shared_ptr<PlayerTextureURL> newItem(new PlayerTextureURL());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("CAPE."));
            setCAPE( newItem );
        }
    }
}

std::shared_ptr<PlayerSkinURL> PlayerTexture::getSKIN() const
{
    return m_SKIN;
}

void PlayerTexture::setSKIN(const std::shared_ptr<PlayerSkinURL>& value)
{
    m_SKIN = value;
    m_SKINIsSet = true;
}

bool PlayerTexture::sKINIsSet() const
{
    return m_SKINIsSet;
}

void PlayerTexture::unsetSKIN()
{
    m_SKINIsSet = false;
}

std::shared_ptr<PlayerTextureURL> PlayerTexture::getCAPE() const
{
    return m_CAPE;
}

void PlayerTexture::setCAPE(const std::shared_ptr<PlayerTextureURL>& value)
{
    m_CAPE = value;
    m_CAPEIsSet = true;
}

bool PlayerTexture::cAPEIsSet() const
{
    return m_CAPEIsSet;
}

void PlayerTexture::unsetCAPE()
{
    m_CAPEIsSet = false;
}

}
}
}
}

