/**
 * Mojang Session API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.3.4.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * LoginApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_LoginApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_LoginApi_H_


#include "../ApiClient.h"

#include "PlayerProfile.h"
#include "SessionApiError.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  LoginApi 
{
public:

    explicit LoginApi( std::shared_ptr<ApiClient> apiClient );

    virtual ~LoginApi();

    /// <summary>
    /// Gets the player&#39;s game profile
    /// </summary>
    /// <remarks>
    /// This will return the player&#39;s username plus any additional information about them (e.g. skins). This has a much stricter rate limit: You can request the same profile once per minute, however you can send as many unique requests as you like.
    /// </remarks>
    /// <param name="strippedUuid">The player UUID without hyphens</param>
    /// <param name="_unsigned">When set to false, the signature data are sent (optional, default to false)</param>
    pplx::task<std::shared_ptr<PlayerProfile>> getPlayerProfile(
        utility::string_t strippedUuid,
        boost::optional<bool> _unsigned
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_LoginApi_H_ */

