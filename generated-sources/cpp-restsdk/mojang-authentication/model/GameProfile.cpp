/**
 * Mojang Authentication API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.3.4.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "GameProfile.h"

namespace com {
namespace github {
namespace asyncmc {
namespace mojang {
namespace authentication {
namespace cpp {
namespace restsdk {
namespace model {

GameProfile::GameProfile()
{
    m_Agent = utility::conversions::to_string_t("");
    m_AgentIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
    m_CreatedAt = 0L;
    m_CreatedAtIsSet = false;
    m_LegacyProfile = false;
    m_LegacyProfileIsSet = false;
    m_Suspended = false;
    m_SuspendedIsSet = false;
    m_Paid = false;
    m_PaidIsSet = false;
    m_Migrated = false;
    m_MigratedIsSet = false;
    m_Legacy = false;
    m_LegacyIsSet = false;
}

GameProfile::~GameProfile()
{
}

void GameProfile::validate()
{
    // TODO: implement validation
}

web::json::value GameProfile::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_AgentIsSet)
    {
        val[utility::conversions::to_string_t("agent")] = ModelBase::toJson(m_Agent);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t("userId")] = ModelBase::toJson(m_UserId);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t("createdAt")] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_LegacyProfileIsSet)
    {
        val[utility::conversions::to_string_t("legacyProfile")] = ModelBase::toJson(m_LegacyProfile);
    }
    if(m_SuspendedIsSet)
    {
        val[utility::conversions::to_string_t("suspended")] = ModelBase::toJson(m_Suspended);
    }
    if(m_PaidIsSet)
    {
        val[utility::conversions::to_string_t("paid")] = ModelBase::toJson(m_Paid);
    }
    if(m_MigratedIsSet)
    {
        val[utility::conversions::to_string_t("migrated")] = ModelBase::toJson(m_Migrated);
    }
    if(m_LegacyIsSet)
    {
        val[utility::conversions::to_string_t("legacy")] = ModelBase::toJson(m_Legacy);
    }

    return val;
}

void GameProfile::fromJson(const web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("agent")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("agent"));
        if(!fieldValue.is_null())
        {
            setAgent(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            setId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            setName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("userId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("userId"));
        if(!fieldValue.is_null())
        {
            setUserId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createdAt"));
        if(!fieldValue.is_null())
        {
            setCreatedAt(ModelBase::int64_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("legacyProfile")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("legacyProfile"));
        if(!fieldValue.is_null())
        {
            setLegacyProfile(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("suspended")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("suspended"));
        if(!fieldValue.is_null())
        {
            setSuspended(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("paid")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("paid"));
        if(!fieldValue.is_null())
        {
            setPaid(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("migrated")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("migrated"));
        if(!fieldValue.is_null())
        {
            setMigrated(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("legacy")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("legacy"));
        if(!fieldValue.is_null())
        {
            setLegacy(ModelBase::boolFromJson(fieldValue));
        }
    }
}

void GameProfile::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_AgentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("agent"), m_Agent));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("userId"), m_UserId));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAt"), m_CreatedAt));
    }
    if(m_LegacyProfileIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("legacyProfile"), m_LegacyProfile));
    }
    if(m_SuspendedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("suspended"), m_Suspended));
    }
    if(m_PaidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("paid"), m_Paid));
    }
    if(m_MigratedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("migrated"), m_Migrated));
    }
    if(m_LegacyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("legacy"), m_Legacy));
    }
}

void GameProfile::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("agent")))
    {
        setAgent(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("agent"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("userId")))
    {
        setUserId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("userId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdAt")))
    {
        setCreatedAt(ModelBase::int64_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAt"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("legacyProfile")))
    {
        setLegacyProfile(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("legacyProfile"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("suspended")))
    {
        setSuspended(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("suspended"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("paid")))
    {
        setPaid(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("paid"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("migrated")))
    {
        setMigrated(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("migrated"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("legacy")))
    {
        setLegacy(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("legacy"))));
    }
}

utility::string_t GameProfile::getAgent() const
{
    return m_Agent;
}

void GameProfile::setAgent(const utility::string_t& value)
{
    m_Agent = value;
    m_AgentIsSet = true;
}

bool GameProfile::agentIsSet() const
{
    return m_AgentIsSet;
}

void GameProfile::unsetAgent()
{
    m_AgentIsSet = false;
}

utility::string_t GameProfile::getId() const
{
    return m_Id;
}

void GameProfile::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool GameProfile::idIsSet() const
{
    return m_IdIsSet;
}

void GameProfile::unsetId()
{
    m_IdIsSet = false;
}

utility::string_t GameProfile::getName() const
{
    return m_Name;
}

void GameProfile::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool GameProfile::nameIsSet() const
{
    return m_NameIsSet;
}

void GameProfile::unsetName()
{
    m_NameIsSet = false;
}

utility::string_t GameProfile::getUserId() const
{
    return m_UserId;
}

void GameProfile::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool GameProfile::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void GameProfile::unsetUserId()
{
    m_UserIdIsSet = false;
}

int64_t GameProfile::getCreatedAt() const
{
    return m_CreatedAt;
}

void GameProfile::setCreatedAt(int64_t value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool GameProfile::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void GameProfile::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}

bool GameProfile::isLegacyProfile() const
{
    return m_LegacyProfile;
}

void GameProfile::setLegacyProfile(bool value)
{
    m_LegacyProfile = value;
    m_LegacyProfileIsSet = true;
}

bool GameProfile::legacyProfileIsSet() const
{
    return m_LegacyProfileIsSet;
}

void GameProfile::unsetLegacyProfile()
{
    m_LegacyProfileIsSet = false;
}

bool GameProfile::isSuspended() const
{
    return m_Suspended;
}

void GameProfile::setSuspended(bool value)
{
    m_Suspended = value;
    m_SuspendedIsSet = true;
}

bool GameProfile::suspendedIsSet() const
{
    return m_SuspendedIsSet;
}

void GameProfile::unsetSuspended()
{
    m_SuspendedIsSet = false;
}

bool GameProfile::isPaid() const
{
    return m_Paid;
}

void GameProfile::setPaid(bool value)
{
    m_Paid = value;
    m_PaidIsSet = true;
}

bool GameProfile::paidIsSet() const
{
    return m_PaidIsSet;
}

void GameProfile::unsetPaid()
{
    m_PaidIsSet = false;
}

bool GameProfile::isMigrated() const
{
    return m_Migrated;
}

void GameProfile::setMigrated(bool value)
{
    m_Migrated = value;
    m_MigratedIsSet = true;
}

bool GameProfile::migratedIsSet() const
{
    return m_MigratedIsSet;
}

void GameProfile::unsetMigrated()
{
    m_MigratedIsSet = false;
}

bool GameProfile::isLegacy() const
{
    return m_Legacy;
}

void GameProfile::setLegacy(bool value)
{
    m_Legacy = value;
    m_LegacyIsSet = true;
}

bool GameProfile::legacyIsSet() const
{
    return m_LegacyIsSet;
}

void GameProfile::unsetLegacy()
{
    m_LegacyIsSet = false;
}

}
}
}
}
}
}
}
}

