/**
 * Mojang Authentication API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.3.4.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AccessKeys.h"

namespace com {
namespace github {
namespace asyncmc {
namespace mojang {
namespace authentication {
namespace cpp {
namespace restsdk {
namespace model {

AccessKeys::AccessKeys()
{
    m_AccessToken = utility::conversions::to_string_t("");
    m_ClientToken = utility::conversions::to_string_t("");
    m_ClientTokenIsSet = false;
}

AccessKeys::~AccessKeys()
{
}

void AccessKeys::validate()
{
    // TODO: implement validation
}

web::json::value AccessKeys::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("accessToken")] = ModelBase::toJson(m_AccessToken);
    if(m_ClientTokenIsSet)
    {
        val[utility::conversions::to_string_t("clientToken")] = ModelBase::toJson(m_ClientToken);
    }

    return val;
}

void AccessKeys::fromJson(const web::json::value& val)
{
    setAccessToken(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("accessToken"))));
    if(val.has_field(utility::conversions::to_string_t("clientToken")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("clientToken"));
        if(!fieldValue.is_null())
        {
            setClientToken(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void AccessKeys::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("accessToken"), m_AccessToken));
    if(m_ClientTokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("clientToken"), m_ClientToken));
    }
}

void AccessKeys::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setAccessToken(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("accessToken"))));
    if(multipart->hasContent(utility::conversions::to_string_t("clientToken")))
    {
        setClientToken(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("clientToken"))));
    }
}

utility::string_t AccessKeys::getAccessToken() const
{
    return m_AccessToken;
}

void AccessKeys::setAccessToken(const utility::string_t& value)
{
    m_AccessToken = value;
    
}

utility::string_t AccessKeys::getClientToken() const
{
    return m_ClientToken;
}

void AccessKeys::setClientToken(const utility::string_t& value)
{
    m_ClientToken = value;
    m_ClientTokenIsSet = true;
}

bool AccessKeys::clientTokenIsSet() const
{
    return m_ClientTokenIsSet;
}

void AccessKeys::unsetClientToken()
{
    m_ClientTokenIsSet = false;
}

}
}
}
}
}
}
}
}

