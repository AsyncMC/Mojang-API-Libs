/**
 * Mojang Authentication API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.3.4.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ReducedUserData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ReducedUserData::ReducedUserData()
{
    m_IdIsSet = false;
    m_PropertiesIsSet = false;
}

ReducedUserData::~ReducedUserData()
{
}

void ReducedUserData::validate()
{
    // TODO: implement validation
}

web::json::value ReducedUserData::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Properties )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("properties")] = web::json::value::array(jsonArray);
        }
    }

    return val;
}

void ReducedUserData::fromJson(const web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            HttpContent newItem(utility::conversions::to_string_t(""));
            newItem->fromJson(fieldValue);
            setId( newItem );
        }
    }
    {
        m_Properties.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("properties")))
        {
        for( auto& item : val.at(utility::conversions::to_string_t("properties")).as_array() )
        {
            if(item.is_null())
            {
                m_Properties.push_back( std::shared_ptr<GameProfileProperty>(nullptr) );
            }
            else
            {
                std::shared_ptr<GameProfileProperty> newItem(new GameProfileProperty());
                newItem->fromJson(item);
                m_Properties.push_back( newItem );
            }
        }
        }
    }
}

void ReducedUserData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_IdIsSet)
    {
        if (m_Id.get())
        {
            m_Id->toMultipart(multipart, utility::conversions::to_string_t("id."));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Properties )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("properties"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
}

void ReducedUserData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("id")))
        {
            HttpContent newItem(utility::conversions::to_string_t(""));
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("id."));
            setId( newItem );
        }
    }
    {
        m_Properties.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("properties")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("properties"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Properties.push_back( std::shared_ptr<GameProfileProperty>(nullptr) );
            }
            else
            {
                std::shared_ptr<GameProfileProperty> newItem(new GameProfileProperty());
                newItem->fromJson(item);
                m_Properties.push_back( newItem );
            }
        }
        }
    }
}

HttpContent ReducedUserData::getId() const
{
    return m_Id;
}

void ReducedUserData::setId(const HttpContent& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool ReducedUserData::idIsSet() const
{
    return m_IdIsSet;
}

void ReducedUserData::unsetId()
{
    m_IdIsSet = false;
}

std::vector<std::shared_ptr<GameProfileProperty>>& ReducedUserData::getProperties()
{
    return m_Properties;
}

void ReducedUserData::setProperties(const std::vector<std::shared_ptr<GameProfileProperty>>& value)
{
    m_Properties = value;
    m_PropertiesIsSet = true;
}

bool ReducedUserData::propertiesIsSet() const
{
    return m_PropertiesIsSet;
}

void ReducedUserData::unsetProperties()
{
    m_PropertiesIsSet = false;
}

}
}
}
}

