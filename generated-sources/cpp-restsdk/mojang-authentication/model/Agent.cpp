/**
 * Mojang Authentication API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.3.4.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Agent.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Agent::Agent()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Version = 0;
    m_VersionIsSet = false;
}

Agent::~Agent()
{
}

void Agent::validate()
{
    // TODO: implement validation
}

web::json::value Agent::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_VersionIsSet)
    {
        val[utility::conversions::to_string_t("version")] = ModelBase::toJson(m_Version);
    }

    return val;
}

void Agent::fromJson(const web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            setName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("version")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("version"));
        if(!fieldValue.is_null())
        {
            setVersion(ModelBase::int32_tFromJson(fieldValue));
        }
    }
}

void Agent::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("version"), m_Version));
    }
}

void Agent::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("version")))
    {
        setVersion(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("version"))));
    }
}

utility::string_t Agent::getName() const
{
    return m_Name;
}

void Agent::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Agent::nameIsSet() const
{
    return m_NameIsSet;
}

void Agent::unsetName()
{
    m_NameIsSet = false;
}

int32_t Agent::getVersion() const
{
    return m_Version;
}

void Agent::setVersion(int32_t value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool Agent::versionIsSet() const
{
    return m_VersionIsSet;
}

void Agent::unsetVersion()
{
    m_VersionIsSet = false;
}

}
}
}
}

