/**
 * Mojang API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.3.4.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CurrentPlayerIDs.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

CurrentPlayerIDs::CurrentPlayerIDs()
{
    m_Id = utility::conversions::to_string_t("");
    m_Name = utility::conversions::to_string_t("");
    m_Legacy = false;
    m_LegacyIsSet = false;
    m_Demo = false;
    m_DemoIsSet = false;
}

CurrentPlayerIDs::~CurrentPlayerIDs()
{
}

void CurrentPlayerIDs::validate()
{
    // TODO: implement validation
}

web::json::value CurrentPlayerIDs::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    if(m_LegacyIsSet)
    {
        val[utility::conversions::to_string_t("legacy")] = ModelBase::toJson(m_Legacy);
    }
    if(m_DemoIsSet)
    {
        val[utility::conversions::to_string_t("demo")] = ModelBase::toJson(m_Demo);
    }

    return val;
}

void CurrentPlayerIDs::fromJson(const web::json::value& val)
{
    setId(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("id"))));
    setName(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("name"))));
    if(val.has_field(utility::conversions::to_string_t("legacy")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("legacy"));
        if(!fieldValue.is_null())
        {
            setLegacy(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("demo")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("demo"));
        if(!fieldValue.is_null())
        {
            setDemo(ModelBase::boolFromJson(fieldValue));
        }
    }
}

void CurrentPlayerIDs::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    if(m_LegacyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("legacy"), m_Legacy));
    }
    if(m_DemoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("demo"), m_Demo));
    }
}

void CurrentPlayerIDs::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    if(multipart->hasContent(utility::conversions::to_string_t("legacy")))
    {
        setLegacy(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("legacy"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("demo")))
    {
        setDemo(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("demo"))));
    }
}

utility::string_t CurrentPlayerIDs::getId() const
{
    return m_Id;
}

void CurrentPlayerIDs::setId(const utility::string_t& value)
{
    m_Id = value;
    
}

utility::string_t CurrentPlayerIDs::getName() const
{
    return m_Name;
}

void CurrentPlayerIDs::setName(const utility::string_t& value)
{
    m_Name = value;
    
}

bool CurrentPlayerIDs::isLegacy() const
{
    return m_Legacy;
}

void CurrentPlayerIDs::setLegacy(bool value)
{
    m_Legacy = value;
    m_LegacyIsSet = true;
}

bool CurrentPlayerIDs::legacyIsSet() const
{
    return m_LegacyIsSet;
}

void CurrentPlayerIDs::unsetLegacy()
{
    m_LegacyIsSet = false;
}

bool CurrentPlayerIDs::isDemo() const
{
    return m_Demo;
}

void CurrentPlayerIDs::setDemo(bool value)
{
    m_Demo = value;
    m_DemoIsSet = true;
}

bool CurrentPlayerIDs::demoIsSet() const
{
    return m_DemoIsSet;
}

void CurrentPlayerIDs::unsetDemo()
{
    m_DemoIsSet = false;
}

}
}
}
}

