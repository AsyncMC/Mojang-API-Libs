/**
 * Mojang API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.3.4.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SecurityQuestion.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

SecurityQuestion::SecurityQuestion()
{
    m_Id = 0;
    m_Question = utility::conversions::to_string_t("");
}

SecurityQuestion::~SecurityQuestion()
{
}

void SecurityQuestion::validate()
{
    // TODO: implement validation
}

web::json::value SecurityQuestion::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    val[utility::conversions::to_string_t("question")] = ModelBase::toJson(m_Question);

    return val;
}

void SecurityQuestion::fromJson(const web::json::value& val)
{
    setId(ModelBase::int32_tFromJson(val.at(utility::conversions::to_string_t("id"))));
    setQuestion(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("question"))));
}

void SecurityQuestion::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("question"), m_Question));
}

void SecurityQuestion::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    setQuestion(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("question"))));
}

int32_t SecurityQuestion::getId() const
{
    return m_Id;
}

void SecurityQuestion::setId(int32_t value)
{
    m_Id = value;
    
}

utility::string_t SecurityQuestion::getQuestion() const
{
    return m_Question;
}

void SecurityQuestion::setQuestion(const utility::string_t& value)
{
    m_Question = value;
    
}

}
}
}
}

