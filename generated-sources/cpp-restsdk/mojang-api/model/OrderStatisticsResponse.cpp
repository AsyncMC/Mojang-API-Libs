/**
 * Mojang API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.3.4.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrderStatisticsResponse.h"

namespace com {
namespace github {
namespace asyncmc {
namespace mojang {
namespace api {
namespace cpp {
namespace restsdk {
namespace model {

OrderStatisticsResponse::OrderStatisticsResponse()
{
    m_Total = 0L;
    m_Last24h = 0L;
    m_SaleVelocityPerSeconds = 0.0;
}

OrderStatisticsResponse::~OrderStatisticsResponse()
{
}

void OrderStatisticsResponse::validate()
{
    // TODO: implement validation
}

web::json::value OrderStatisticsResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("total")] = ModelBase::toJson(m_Total);
    val[utility::conversions::to_string_t("last24h")] = ModelBase::toJson(m_Last24h);
    val[utility::conversions::to_string_t("saleVelocityPerSeconds")] = ModelBase::toJson(m_SaleVelocityPerSeconds);

    return val;
}

void OrderStatisticsResponse::fromJson(const web::json::value& val)
{
    setTotal(ModelBase::int64_tFromJson(val.at(utility::conversions::to_string_t("total"))));
    setLast24h(ModelBase::int64_tFromJson(val.at(utility::conversions::to_string_t("last24h"))));
    setSaleVelocityPerSeconds(ModelBase::doubleFromJson(val.at(utility::conversions::to_string_t("saleVelocityPerSeconds"))));
}

void OrderStatisticsResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("total"), m_Total));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("last24h"), m_Last24h));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("saleVelocityPerSeconds"), m_SaleVelocityPerSeconds));
}

void OrderStatisticsResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setTotal(ModelBase::int64_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("total"))));
    setLast24h(ModelBase::int64_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("last24h"))));
    setSaleVelocityPerSeconds(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("saleVelocityPerSeconds"))));
}

int64_t OrderStatisticsResponse::getTotal() const
{
    return m_Total;
}

void OrderStatisticsResponse::setTotal(int64_t value)
{
    m_Total = value;
    
}

int64_t OrderStatisticsResponse::getLast24h() const
{
    return m_Last24h;
}

void OrderStatisticsResponse::setLast24h(int64_t value)
{
    m_Last24h = value;
    
}

double OrderStatisticsResponse::getSaleVelocityPerSeconds() const
{
    return m_SaleVelocityPerSeconds;
}

void OrderStatisticsResponse::setSaleVelocityPerSeconds(double value)
{
    m_SaleVelocityPerSeconds = value;
    
}

}
}
}
}
}
}
}
}

