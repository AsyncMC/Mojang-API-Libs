/**
 * Mojang API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.3.4.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SecurityChallenge.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

SecurityChallenge::SecurityChallenge()
{
}

SecurityChallenge::~SecurityChallenge()
{
}

void SecurityChallenge::validate()
{
    // TODO: implement validation
}

web::json::value SecurityChallenge::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("question")] = ModelBase::toJson(m_Question);
    val[utility::conversions::to_string_t("answer")] = ModelBase::toJson(m_Answer);

    return val;
}

void SecurityChallenge::fromJson(const web::json::value& val)
{
    std::shared_ptr<SecurityQuestion> newQuestion(new SecurityQuestion());
    newQuestion->fromJson(val.at(utility::conversions::to_string_t("question")));
    setQuestion( newQuestion );
    std::shared_ptr<SecurityAnswerId> newAnswer(new SecurityAnswerId());
    newAnswer->fromJson(val.at(utility::conversions::to_string_t("answer")));
    setAnswer( newAnswer );
}

void SecurityChallenge::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    m_Question->toMultipart(multipart, utility::conversions::to_string_t("question."));
    m_Answer->toMultipart(multipart, utility::conversions::to_string_t("answer."));
}

void SecurityChallenge::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    std::shared_ptr<SecurityQuestion> newQuestion(new SecurityQuestion());
    newQuestion->fromMultiPart(multipart, utility::conversions::to_string_t("question."));
    setQuestion( newQuestion );
    std::shared_ptr<SecurityAnswerId> newAnswer(new SecurityAnswerId());
    newAnswer->fromMultiPart(multipart, utility::conversions::to_string_t("answer."));
    setAnswer( newAnswer );
}

std::shared_ptr<SecurityQuestion> SecurityChallenge::getQuestion() const
{
    return m_Question;
}

void SecurityChallenge::setQuestion(const std::shared_ptr<SecurityQuestion>& value)
{
    m_Question = value;
    
}

std::shared_ptr<SecurityAnswerId> SecurityChallenge::getAnswer() const
{
    return m_Answer;
}

void SecurityChallenge::setAnswer(const std::shared_ptr<SecurityAnswerId>& value)
{
    m_Answer = value;
    
}

}
}
}
}

