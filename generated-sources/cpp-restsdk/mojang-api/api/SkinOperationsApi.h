/**
 * Mojang API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.3.4.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SkinOperationsApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_SkinOperationsApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_SkinOperationsApi_H_


#include "../ApiClient.h"

#include "Error.h"
#include "HttpContent.h"
#include "SkinModel.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  SkinOperationsApi 
{
public:

    explicit SkinOperationsApi( std::shared_ptr<ApiClient> apiClient );

    virtual ~SkinOperationsApi();

    /// <summary>
    /// Changes the player skin by URL
    /// </summary>
    /// <remarks>
    /// This will set the skin for the selected profile, but Mojang&#39;s servers will fetch the skin from a URL. This will also work for legacy accounts.
    /// </remarks>
    /// <param name="strippedUuid">The player UUID without hyphens</param>
    /// <param name="url">The URL which Mojang servers will download and apply the skin</param>
    /// <param name="model"> (optional, default to new SkinModel())</param>
    pplx::task<void> changePlayerSkin(
        utility::string_t strippedUuid,
        utility::string_t url,
        boost::optional<std::shared_ptr<SkinModel>> model
    );
    /// <summary>
    /// Resets the player skin to default
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="strippedUuid">The player UUID without hyphens</param>
    pplx::task<void> resetPlayerSkin(
        utility::string_t strippedUuid
    );
    /// <summary>
    /// Changes the player skin by upload
    /// </summary>
    /// <remarks>
    /// This uploads a skin to Mojang&#39;s servers. It also sets the users skin. This works on legacy counts as well.
    /// </remarks>
    /// <param name="strippedUuid">The player UUID without hyphens</param>
    /// <param name="file">The skin image in PNG format</param>
    /// <param name="model"> (optional, default to new SkinModel())</param>
    pplx::task<void> uploadPlayerSkin(
        utility::string_t strippedUuid,
        std::shared_ptr<HttpContent> file,
        boost::optional<std::shared_ptr<SkinModel>> model
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_SkinOperationsApi_H_ */

