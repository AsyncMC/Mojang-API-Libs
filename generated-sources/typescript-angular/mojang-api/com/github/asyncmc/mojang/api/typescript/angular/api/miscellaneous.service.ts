/**
 * Mojang API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { OrderStatisticsRequest } from '../com.github.asyncmc.mojang.api.typescript.angular.model/orderStatisticsRequest';
import { OrderStatisticsResponse } from '../com.github.asyncmc.mojang.api.typescript.angular.model/orderStatisticsResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class MiscellaneousService {

    protected basePath = 'https://api.mojang.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get statistics on the sales of Minecraft.
     * 
     * @param orderStatisticsRequest The payload is a json list of options under the metricKeys key. You will receive a single object corresponding to the sum of sales of the requested type(s). You must request at least one type of sale. Below is the default list used by https://minecraft.net/en/stats/
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOrdersStatistics(orderStatisticsRequest: OrderStatisticsRequest, observe?: 'body', reportProgress?: boolean): Observable<OrderStatisticsResponse>;
    public getOrdersStatistics(orderStatisticsRequest: OrderStatisticsRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderStatisticsResponse>>;
    public getOrdersStatistics(orderStatisticsRequest: OrderStatisticsRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderStatisticsResponse>>;
    public getOrdersStatistics(orderStatisticsRequest: OrderStatisticsRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (orderStatisticsRequest === null || orderStatisticsRequest === undefined) {
            throw new Error('Required parameter orderStatisticsRequest was null or undefined when calling getOrdersStatistics.');
        }

        let headers = this.defaultHeaders;

        // authentication (MojangStatisticsToken) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<OrderStatisticsResponse>(`${this.configuration.basePath}/orders/statistics`,
            orderStatisticsRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
