/**
 * Mojang API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { CurrentPlayerIDs } from '../com.github.asyncmc.mojang.api.typescript.angular.model/currentPlayerIDs';
import { NameChange } from '../com.github.asyncmc.mojang.api.typescript.angular.model/nameChange';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class NameHistoryService {

    protected basePath = 'https://api.mojang.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Find the current UUID of multiple players at once
     * Find the current players name, UUID, demo status and migration flag by the current players name. The \&quot;at\&quot; parameter is not supported. Players not found are not returned. If no players are found, an empty array is returned.
     * @param requestBody Array with the player names
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findUniqueIdsByName(requestBody: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<Array<CurrentPlayerIDs>>;
    public findUniqueIdsByName(requestBody: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CurrentPlayerIDs>>>;
    public findUniqueIdsByName(requestBody: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CurrentPlayerIDs>>>;
    public findUniqueIdsByName(requestBody: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (requestBody === null || requestBody === undefined) {
            throw new Error('Required parameter requestBody was null or undefined when calling findUniqueIdsByName.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<CurrentPlayerIDs>>(`${this.configuration.basePath}/profiles/minecraft`,
            requestBody,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the full player&#39;s name history
     * 
     * @param strippedUuid The player UUID without hyphens
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getNameHistory(strippedUuid: string, observe?: 'body', reportProgress?: boolean): Observable<Array<NameChange>>;
    public getNameHistory(strippedUuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<NameChange>>>;
    public getNameHistory(strippedUuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<NameChange>>>;
    public getNameHistory(strippedUuid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (strippedUuid === null || strippedUuid === undefined) {
            throw new Error('Required parameter strippedUuid was null or undefined when calling getNameHistory.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<NameChange>>(`${this.configuration.basePath}/user/profiles/${encodeURIComponent(String(strippedUuid))}/names`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find the UUID by name
     * Find the current player name, UUID, demo status and migration flag by the current player name or at a given time.
     * @param username The username in a given time, or in present if \&quot;at\&quot; is not sent
     * @param at Find the username in a given time, when 0 selects the original name however, it only works if the name was changed at least once, or if the account is legacy. The time is an UNIX timestamp (without milliseconds)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUniqueIdByName(username: string, at?: number, observe?: 'body', reportProgress?: boolean): Observable<CurrentPlayerIDs>;
    public getUniqueIdByName(username: string, at?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CurrentPlayerIDs>>;
    public getUniqueIdByName(username: string, at?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CurrentPlayerIDs>>;
    public getUniqueIdByName(username: string, at?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getUniqueIdByName.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (at !== undefined && at !== null) {
            queryParameters = queryParameters.set('at', <any>at);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CurrentPlayerIDs>(`${this.configuration.basePath}/users/profiles/minecraft/${encodeURIComponent(String(username))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
