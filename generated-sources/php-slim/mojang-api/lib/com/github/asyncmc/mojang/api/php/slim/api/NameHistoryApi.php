<?php
/**
 * NameHistoryApi
 *
 * PHP version 5
 *
 * @category Class
 * @package  com.github.asyncmc.mojang.api.php.slim.server\com.github.asyncmc.mojang.api.php.slim.api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Mojang API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 * OpenAPI spec version: 2020-06-05
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace com.github.asyncmc.mojang.api.php.slim.server\com.github.asyncmc.mojang.api.php.slim.api;

use com.github.asyncmc.mojang.api.php.slim.server\AbstractApiController;

/**
 * NameHistoryApi Class Doc Comment
 *
 * PHP version 5
 *
 * @category Class
 * @package  com.github.asyncmc.mojang.api.php.slim.server\com.github.asyncmc.mojang.api.php.slim.api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
class NameHistoryApi extends AbstractApiController
{

    /**
     * POST findUniqueIdsByName
     * Summary: Find the current UUID of multiple players at once
     * Notes: Find the current players name, UUID, demo status and migration flag by the current players name. The \&quot;at\&quot; parameter is not supported. Players not found are not returned. If no players are found, an empty array is returned.
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function findUniqueIdsByName($request, $response, $args)
    {
        $body = $request->getParsedBody();
        $response->write('How about implementing findUniqueIdsByName as a POST method ?');
        return $response;
    }

    /**
     * GET getNameHistory
     * Summary: Gets the full player&#39;s name history
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getNameHistory($request, $response, $args)
    {
        $strippedUuid = $args['stripped_uuid'];
        $response->write('How about implementing getNameHistory as a GET method ?');
        return $response;
    }

    /**
     * GET getUniqueIdByName
     * Summary: Find the UUID by name
     * Notes: Find the current player name, UUID, demo status and migration flag by the current player name or at a given time.
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getUniqueIdByName($request, $response, $args)
    {
        $username = $args['username'];
        $queryParams = $request->getQueryParams();
        $at = $request->getQueryParam('at');
        $response->write('How about implementing getUniqueIdByName as a GET method ?');
        return $response;
    }
}
