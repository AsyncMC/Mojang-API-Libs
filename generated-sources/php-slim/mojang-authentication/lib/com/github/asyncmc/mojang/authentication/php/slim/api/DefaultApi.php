<?php
/**
 * DefaultApi
 *
 * PHP version 5
 *
 * @category Class
 * @package  com.github.asyncmc.mojang.authentication.php.slim.server\com.github.asyncmc.mojang.authentication.php.slim.api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Mojang Authentication API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 * OpenAPI spec version: 2020-06-05
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace com.github.asyncmc.mojang.authentication.php.slim.server\com.github.asyncmc.mojang.authentication.php.slim.api;

use com.github.asyncmc.mojang.authentication.php.slim.server\AbstractApiController;

/**
 * DefaultApi Class Doc Comment
 *
 * PHP version 5
 *
 * @category Class
 * @package  com.github.asyncmc.mojang.authentication.php.slim.server\com.github.asyncmc.mojang.authentication.php.slim.api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
class DefaultApi extends AbstractApiController
{

    /**
     * POST authenticate
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function authenticate($request, $response, $args)
    {
        $body = $request->getParsedBody();
        $response->write('How about implementing authenticate as a POST method ?');
        return $response;
    }

    /**
     * POST invalidate
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function invalidate($request, $response, $args)
    {
        $body = $request->getParsedBody();
        $response->write('How about implementing invalidate as a POST method ?');
        return $response;
    }

    /**
     * POST refresh
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function refresh($request, $response, $args)
    {
        $body = $request->getParsedBody();
        $response->write('How about implementing refresh as a POST method ?');
        return $response;
    }

    /**
     * POST siginout
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function siginout($request, $response, $args)
    {
        $body = $request->getParsedBody();
        $response->write('How about implementing siginout as a POST method ?');
        return $response;
    }

    /**
     * POST validate
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function validate($request, $response, $args)
    {
        $body = $request->getParsedBody();
        $response->write('How about implementing validate as a POST method ?');
        return $response;
    }
}
