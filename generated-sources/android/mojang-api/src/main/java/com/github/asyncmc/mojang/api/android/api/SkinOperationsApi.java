/**
 * Mojang API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.github.asyncmc.mojang.api.android.api;

import com.github.asyncmc.mojang.api.android.server.ApiInvoker;
import com.github.asyncmc.mojang.api.android.server.ApiException;
import com.github.asyncmc.mojang.api.android.server.Pair;

import com.github.asyncmc.mojang.api.android.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import com.github.asyncmc.mojang.api.android.model.Error;
import java.io.File;
import com.github.asyncmc.mojang.api.android.model.SkinModel;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class SkinOperationsApi {
  String basePath = "https://api.mojang.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Changes the player skin by URL
  * This will set the skin for the selected profile, but Mojang&#39;s servers will fetch the skin from a URL. This will also work for legacy accounts.
   * @param strippedUuid The player UUID without hyphens
   * @param url The URL which Mojang servers will download and apply the skin
   * @param model 
   * @return void
  */
  public void changePlayerSkin (String strippedUuid, String url, SkinModel model) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'strippedUuid' is set
    if (strippedUuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'strippedUuid' when calling changePlayerSkin",
        new ApiException(400, "Missing the required parameter 'strippedUuid' when calling changePlayerSkin"));
    }
    // verify the required parameter 'url' is set
    if (url == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'url' when calling changePlayerSkin",
        new ApiException(400, "Missing the required parameter 'url' when calling changePlayerSkin"));
    }

    // create path and map variables
    String path = "/user/profile/{stripped_uuid}/skin".replaceAll("\\{" + "stripped_uuid" + "\\}", apiInvoker.escapeString(strippedUuid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (model != null) {
        localVarBuilder.addTextBody("model", ApiInvoker.parameterToString(model), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (url != null) {
        localVarBuilder.addTextBody("url", ApiInvoker.parameterToString(url), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("model", ApiInvoker.parameterToString(model));
      formParams.put("url", ApiInvoker.parameterToString(url));
    }

    String[] authNames = new String[] { "PlayerAccessToken" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Changes the player skin by URL
   * This will set the skin for the selected profile, but Mojang&#39;s servers will fetch the skin from a URL. This will also work for legacy accounts.
   * @param strippedUuid The player UUID without hyphens   * @param url The URL which Mojang servers will download and apply the skin   * @param model 
  */
  public void changePlayerSkin (String strippedUuid, String url, SkinModel model, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'strippedUuid' is set
    if (strippedUuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'strippedUuid' when calling changePlayerSkin",
        new ApiException(400, "Missing the required parameter 'strippedUuid' when calling changePlayerSkin"));
    }
    // verify the required parameter 'url' is set
    if (url == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'url' when calling changePlayerSkin",
        new ApiException(400, "Missing the required parameter 'url' when calling changePlayerSkin"));
    }

    // create path and map variables
    String path = "/user/profile/{stripped_uuid}/skin".replaceAll("\\{format\\}","json").replaceAll("\\{" + "stripped_uuid" + "\\}", apiInvoker.escapeString(strippedUuid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (model != null) {
        localVarBuilder.addTextBody("model", ApiInvoker.parameterToString(model), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (url != null) {
        localVarBuilder.addTextBody("url", ApiInvoker.parameterToString(url), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("model", ApiInvoker.parameterToString(model));
formParams.put("url", ApiInvoker.parameterToString(url));
    }

    String[] authNames = new String[] { "PlayerAccessToken" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Resets the player skin to default
  * 
   * @param strippedUuid The player UUID without hyphens
   * @return void
  */
  public void resetPlayerSkin (String strippedUuid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'strippedUuid' is set
    if (strippedUuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'strippedUuid' when calling resetPlayerSkin",
        new ApiException(400, "Missing the required parameter 'strippedUuid' when calling resetPlayerSkin"));
    }

    // create path and map variables
    String path = "/user/profile/{stripped_uuid}/skin".replaceAll("\\{" + "stripped_uuid" + "\\}", apiInvoker.escapeString(strippedUuid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "PlayerAccessToken" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Resets the player skin to default
   * 
   * @param strippedUuid The player UUID without hyphens
  */
  public void resetPlayerSkin (String strippedUuid, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'strippedUuid' is set
    if (strippedUuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'strippedUuid' when calling resetPlayerSkin",
        new ApiException(400, "Missing the required parameter 'strippedUuid' when calling resetPlayerSkin"));
    }

    // create path and map variables
    String path = "/user/profile/{stripped_uuid}/skin".replaceAll("\\{format\\}","json").replaceAll("\\{" + "stripped_uuid" + "\\}", apiInvoker.escapeString(strippedUuid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "PlayerAccessToken" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Changes the player skin by upload
  * This uploads a skin to Mojang&#39;s servers. It also sets the users skin. This works on legacy counts as well.
   * @param strippedUuid The player UUID without hyphens
   * @param file The skin image in PNG format
   * @param model 
   * @return void
  */
  public void uploadPlayerSkin (String strippedUuid, File file, SkinModel model) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'strippedUuid' is set
    if (strippedUuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'strippedUuid' when calling uploadPlayerSkin",
        new ApiException(400, "Missing the required parameter 'strippedUuid' when calling uploadPlayerSkin"));
    }
    // verify the required parameter 'file' is set
    if (file == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'file' when calling uploadPlayerSkin",
        new ApiException(400, "Missing the required parameter 'file' when calling uploadPlayerSkin"));
    }

    // create path and map variables
    String path = "/user/profile/{stripped_uuid}/skin".replaceAll("\\{" + "stripped_uuid" + "\\}", apiInvoker.escapeString(strippedUuid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (model != null) {
        localVarBuilder.addTextBody("model", ApiInvoker.parameterToString(model), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("model", ApiInvoker.parameterToString(model));
    }

    String[] authNames = new String[] { "PlayerAccessToken" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Changes the player skin by upload
   * This uploads a skin to Mojang&#39;s servers. It also sets the users skin. This works on legacy counts as well.
   * @param strippedUuid The player UUID without hyphens   * @param file The skin image in PNG format   * @param model 
  */
  public void uploadPlayerSkin (String strippedUuid, File file, SkinModel model, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'strippedUuid' is set
    if (strippedUuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'strippedUuid' when calling uploadPlayerSkin",
        new ApiException(400, "Missing the required parameter 'strippedUuid' when calling uploadPlayerSkin"));
    }
    // verify the required parameter 'file' is set
    if (file == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'file' when calling uploadPlayerSkin",
        new ApiException(400, "Missing the required parameter 'file' when calling uploadPlayerSkin"));
    }

    // create path and map variables
    String path = "/user/profile/{stripped_uuid}/skin".replaceAll("\\{format\\}","json").replaceAll("\\{" + "stripped_uuid" + "\\}", apiInvoker.escapeString(strippedUuid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (model != null) {
        localVarBuilder.addTextBody("model", ApiInvoker.parameterToString(model), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("model", ApiInvoker.parameterToString(model));

    }

    String[] authNames = new String[] { "PlayerAccessToken" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
