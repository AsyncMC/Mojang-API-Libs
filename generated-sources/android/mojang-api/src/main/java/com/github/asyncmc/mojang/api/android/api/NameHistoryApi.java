/**
 * Mojang API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.github.asyncmc.mojang.api.android.api;

import com.github.asyncmc.mojang.api.android.server.ApiInvoker;
import com.github.asyncmc.mojang.api.android.server.ApiException;
import com.github.asyncmc.mojang.api.android.server.Pair;

import com.github.asyncmc.mojang.api.android.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import com.github.asyncmc.mojang.api.android.model.CurrentPlayerIDs;
import com.github.asyncmc.mojang.api.android.model.Error;
import java.util.*;
import com.github.asyncmc.mojang.api.android.model.NameChange;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class NameHistoryApi {
  String basePath = "https://api.mojang.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Find the current UUID of multiple players at once
  * Find the current players name, UUID, demo status and migration flag by the current players name. The \&quot;at\&quot; parameter is not supported. Players not found are not returned. If no players are found, an empty array is returned.
   * @param requestBody Array with the player names
   * @return List<CurrentPlayerIDs>
  */
  public List<CurrentPlayerIDs> findUniqueIdsByName (List<String> requestBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = requestBody;
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestBody' when calling findUniqueIdsByName",
        new ApiException(400, "Missing the required parameter 'requestBody' when calling findUniqueIdsByName"));
    }

    // create path and map variables
    String path = "/profiles/minecraft";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<CurrentPlayerIDs>) ApiInvoker.deserialize(localVarResponse, "array", CurrentPlayerIDs.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Find the current UUID of multiple players at once
   * Find the current players name, UUID, demo status and migration flag by the current players name. The \&quot;at\&quot; parameter is not supported. Players not found are not returned. If no players are found, an empty array is returned.
   * @param requestBody Array with the player names
  */
  public void findUniqueIdsByName (List<String> requestBody, final Response.Listener<List<CurrentPlayerIDs>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = requestBody;

    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestBody' when calling findUniqueIdsByName",
        new ApiException(400, "Missing the required parameter 'requestBody' when calling findUniqueIdsByName"));
    }

    // create path and map variables
    String path = "/profiles/minecraft".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<CurrentPlayerIDs>) ApiInvoker.deserialize(localVarResponse,  "array", CurrentPlayerIDs.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets the full player&#39;s name history
  * 
   * @param strippedUuid The player UUID without hyphens
   * @return List<NameChange>
  */
  public List<NameChange> getNameHistory (String strippedUuid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'strippedUuid' is set
    if (strippedUuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'strippedUuid' when calling getNameHistory",
        new ApiException(400, "Missing the required parameter 'strippedUuid' when calling getNameHistory"));
    }

    // create path and map variables
    String path = "/user/profiles/{stripped_uuid}/names".replaceAll("\\{" + "stripped_uuid" + "\\}", apiInvoker.escapeString(strippedUuid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<NameChange>) ApiInvoker.deserialize(localVarResponse, "array", NameChange.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets the full player&#39;s name history
   * 
   * @param strippedUuid The player UUID without hyphens
  */
  public void getNameHistory (String strippedUuid, final Response.Listener<List<NameChange>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'strippedUuid' is set
    if (strippedUuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'strippedUuid' when calling getNameHistory",
        new ApiException(400, "Missing the required parameter 'strippedUuid' when calling getNameHistory"));
    }

    // create path and map variables
    String path = "/user/profiles/{stripped_uuid}/names".replaceAll("\\{format\\}","json").replaceAll("\\{" + "stripped_uuid" + "\\}", apiInvoker.escapeString(strippedUuid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<NameChange>) ApiInvoker.deserialize(localVarResponse,  "array", NameChange.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Find the UUID by name
  * Find the current player name, UUID, demo status and migration flag by the current player name or at a given time.
   * @param username The username in a given time, or in present if \&quot;at\&quot; is not sent
   * @param at Find the username in a given time, when 0 selects the original name however, it only works if the name was changed at least once, or if the account is legacy. The time is an UNIX timestamp (without milliseconds)
   * @return CurrentPlayerIDs
  */
  public CurrentPlayerIDs getUniqueIdByName (String username, Long at) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'username' is set
    if (username == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'username' when calling getUniqueIdByName",
        new ApiException(400, "Missing the required parameter 'username' when calling getUniqueIdByName"));
    }

    // create path and map variables
    String path = "/users/profiles/minecraft/{username}".replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "at", at));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CurrentPlayerIDs) ApiInvoker.deserialize(localVarResponse, "", CurrentPlayerIDs.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Find the UUID by name
   * Find the current player name, UUID, demo status and migration flag by the current player name or at a given time.
   * @param username The username in a given time, or in present if \&quot;at\&quot; is not sent   * @param at Find the username in a given time, when 0 selects the original name however, it only works if the name was changed at least once, or if the account is legacy. The time is an UNIX timestamp (without milliseconds)
  */
  public void getUniqueIdByName (String username, Long at, final Response.Listener<CurrentPlayerIDs> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'username' is set
    if (username == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'username' when calling getUniqueIdByName",
        new ApiException(400, "Missing the required parameter 'username' when calling getUniqueIdByName"));
    }

    // create path and map variables
    String path = "/users/profiles/minecraft/{username}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "at", at));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CurrentPlayerIDs) ApiInvoker.deserialize(localVarResponse,  "", CurrentPlayerIDs.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
