/**
 * Mojang API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.3.4.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>

#include "NameHistoryApi.h"

namespace com {
namespace github {
namespace asyncmc {
namespace mojang {
namespace api {
namespace cpp {
namespace restbed {
namespace server {
namespace api {

using namespace com::github::asyncmc::mojang::api::cpp::restbed::server::model;

NameHistoryApi::NameHistoryApi() {
	std::shared_ptr<NameHistoryApiProfilesMinecraftResource> spNameHistoryApiProfilesMinecraftResource = std::make_shared<NameHistoryApiProfilesMinecraftResource>();
	this->publish(spNameHistoryApiProfilesMinecraftResource);
	
	std::shared_ptr<NameHistoryApiUserProfilesStripped_uuidNamesResource> spNameHistoryApiUserProfilesStripped_uuidNamesResource = std::make_shared<NameHistoryApiUserProfilesStripped_uuidNamesResource>();
	this->publish(spNameHistoryApiUserProfilesStripped_uuidNamesResource);
	
	std::shared_ptr<NameHistoryApiUsersProfilesMinecraftUsernameResource> spNameHistoryApiUsersProfilesMinecraftUsernameResource = std::make_shared<NameHistoryApiUsersProfilesMinecraftUsernameResource>();
	this->publish(spNameHistoryApiUsersProfilesMinecraftUsernameResource);
	
}

NameHistoryApi::~NameHistoryApi() {}

void NameHistoryApi::startService(int const& port) {
	std::shared_ptr<restbed::Settings> settings = std::make_shared<restbed::Settings>();
	settings->set_port(port);
	settings->set_root("");
	
	this->start(settings);
}

void NameHistoryApi::stopService() {
	this->stop();
}

NameHistoryApiProfilesMinecraftResource::NameHistoryApiProfilesMinecraftResource()
{
	this->set_path("/profiles/minecraft/");
	this->set_method_handler("POST",
		std::bind(&NameHistoryApiProfilesMinecraftResource::POST_method_handler, this,
			std::placeholders::_1));
}

NameHistoryApiProfilesMinecraftResource::~NameHistoryApiProfilesMinecraftResource()
{
}

void NameHistoryApiProfilesMinecraftResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	// Body params are present, therefore we have to fetch them
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{

			const auto request = session->get_request();
			std::string requestBody = restbed::String::format("%.*s\n", ( int ) body.size( ), body.data( ));
			/**
			 * Get body params or form params here from the requestBody string
			 */
			
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "An array containing all players found", { {"Connection", "close"} });
				return;
			}

		});
}



NameHistoryApiUserProfilesStripped_uuidNamesResource::NameHistoryApiUserProfilesStripped_uuidNamesResource()
{
	this->set_path("/user/profiles/{stripped_uuid: .*}/names/");
	this->set_method_handler("GET",
		std::bind(&NameHistoryApiUserProfilesStripped_uuidNamesResource::GET_method_handler, this,
			std::placeholders::_1));
}

NameHistoryApiUserProfilesStripped_uuidNamesResource::~NameHistoryApiUserProfilesStripped_uuidNamesResource()
{
}

void NameHistoryApiUserProfilesStripped_uuidNamesResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string strippedUuid = request->get_path_parameter("strippedUuid", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "A list of name changes, the first entry usually don&#39;t have a change time", { {"Connection", "close"} });
				return;
			}
			if (status_code == 204) {
				session->close(204, "Username not found at the given time", { {"Connection", "close"} });
				return;
			}

}



NameHistoryApiUsersProfilesMinecraftUsernameResource::NameHistoryApiUsersProfilesMinecraftUsernameResource()
{
	this->set_path("/users/profiles/minecraft/{username: .*}/");
	this->set_method_handler("GET",
		std::bind(&NameHistoryApiUsersProfilesMinecraftUsernameResource::GET_method_handler, this,
			std::placeholders::_1));
}

NameHistoryApiUsersProfilesMinecraftUsernameResource::~NameHistoryApiUsersProfilesMinecraftUsernameResource()
{
}

void NameHistoryApiUsersProfilesMinecraftUsernameResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string username = request->get_path_parameter("username", "");
			
			// Getting the query params
			const int64_t at = request->get_query_parameter("at", 0L);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "The user was found", { {"Connection", "close"} });
				return;
			}
			if (status_code == 204) {
				session->close(204, "User not found", { {"Connection", "close"} });
				return;
			}
			if (status_code == 400) {
				session->close(400, "If the timestamp is invalid", { {"Connection", "close"} });
				return;
			}

}




}
}
}
}
}
}
}
}
}

