/**
 * Mojang Session API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.3.4.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BansApi.h
 *
 * 
 */

#ifndef BansApi_H_
#define BansApi_H_


#include <memory>
#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/service.hpp>

#include <string>

namespace com {
namespace github {
namespace asyncmc {
namespace mojang {
namespace sessions {
namespace cpp {
namespace restbed {
namespace server {
namespace api {

using namespace com::github::asyncmc::mojang::sessions::cpp::restbed::server::model;

class  BansApi: public restbed::Service
{
public:
	BansApi();
	~BansApi();
	void startService(int const& port);
	void stopService();
};


/// <summary>
/// A list of SHA1 hashes of banned servers
/// </summary>
/// <remarks>
/// Returns a list of SHA1 hashes used to check server addresses against when the client tries to connect. Clients check the lowercase name, using the ISO-8859-1 charset, against this list. They will also attempt to check subdomains, replacing each level with a *. Specifically, it splits based off of the . in the domain, goes through each section removing one at a time. For instance, for mc.example.com, it would try mc.example.com, *.example.com, and *.com. With IP addresses (verified by having 4 split sections, with each section being a valid integer between 0 and 255, inclusive) substitution starts from the end, so for 192.168.0.1, it would try 192.168.0.1, 192.168.0.*, 192.168.*, and 192.*. This check is done by the bootstrap class in netty. The default netty class is overridden by one in the com.mojang:netty dependency loaded by the launcher. This allows it to affect any version that used netty (1.7+)
/// </remarks>
class  BansApiBlockedserversResource: public restbed::Resource
{
public:
	BansApiBlockedserversResource();
    virtual ~BansApiBlockedserversResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};


}
}
}
}
}
}
}
}
}

#endif /* BansApi_H_ */

