/**
 * Mojang Session API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.3.4.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>

#include "BansApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

BansApi::BansApi() {
	std::shared_ptr<BansApiBlockedserversResource> spBansApiBlockedserversResource = std::make_shared<BansApiBlockedserversResource>();
	this->publish(spBansApiBlockedserversResource);
	
}

BansApi::~BansApi() {}

void BansApi::startService(int const& port) {
	std::shared_ptr<restbed::Settings> settings = std::make_shared<restbed::Settings>();
	settings->set_port(port);
	settings->set_root("");
	
	this->start(settings);
}

void BansApi::stopService() {
	this->stop();
}

BansApiBlockedserversResource::BansApiBlockedserversResource()
{
	this->set_path("/blockedservers/");
	this->set_method_handler("GET",
		std::bind(&BansApiBlockedserversResource::GET_method_handler, this,
			std::placeholders::_1));
}

BansApiBlockedserversResource::~BansApiBlockedserversResource()
{
}

void BansApiBlockedserversResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "A list of SHA1 hashes, one hash per line", { {"Connection", "close"} });
				return;
			}

}




}
}
}
}

