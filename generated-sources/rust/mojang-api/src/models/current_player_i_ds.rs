/* 
 * Mojang API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 * Generated by: https://openapi-generator.tech
 */

/// CurrentPlayerIDs : The current player, demo and legacy status of a player identified by the id

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CurrentPlayerIDs {
  /// The player UUID without hyphens
  #[serde(rename = "id")]
  id: String,
  /// The current name being used by this player
  #[serde(rename = "name")]
  name: String,
  /// If account has not been converted
  #[serde(rename = "legacy")]
  legacy: Option<bool>,
  /// If the player has not puchased the game
  #[serde(rename = "demo")]
  demo: Option<bool>
}

impl CurrentPlayerIDs {
  /// The current player, demo and legacy status of a player identified by the id
  pub fn new(id: String, name: String) -> CurrentPlayerIDs {
    CurrentPlayerIDs {
      id: id,
      name: name,
      legacy: None,
      demo: None
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> CurrentPlayerIDs {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }


  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> CurrentPlayerIDs {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_legacy(&mut self, legacy: bool) {
    self.legacy = Some(legacy);
  }

  pub fn with_legacy(mut self, legacy: bool) -> CurrentPlayerIDs {
    self.legacy = Some(legacy);
    self
  }

  pub fn legacy(&self) -> Option<&bool> {
    self.legacy.as_ref()
  }

  pub fn reset_legacy(&mut self) {
    self.legacy = None;
  }

  pub fn set_demo(&mut self, demo: bool) {
    self.demo = Some(demo);
  }

  pub fn with_demo(mut self, demo: bool) -> CurrentPlayerIDs {
    self.demo = Some(demo);
    self
  }

  pub fn demo(&self) -> Option<&bool> {
    self.demo.as_ref()
  }

  pub fn reset_demo(&mut self) {
    self.demo = None;
  }

}



