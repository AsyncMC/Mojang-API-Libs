/* 
 * Mojang API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 * Generated by: https://openapi-generator.tech
 */

/// OrderStatisticsResponse : A json object is returned with the total amount of copies sold, the amount of copies sold in the last 24h and how many sales there are per second.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrderStatisticsResponse {
  /// total amount sold
  #[serde(rename = "total")]
  total: i64,
  /// total sold in last 24 hours
  #[serde(rename = "last24h")]
  last24h: i64,
  /// decimal average sales per second
  #[serde(rename = "saleVelocityPerSeconds")]
  sale_velocity_per_seconds: f64
}

impl OrderStatisticsResponse {
  /// A json object is returned with the total amount of copies sold, the amount of copies sold in the last 24h and how many sales there are per second.
  pub fn new(total: i64, last24h: i64, sale_velocity_per_seconds: f64) -> OrderStatisticsResponse {
    OrderStatisticsResponse {
      total: total,
      last24h: last24h,
      sale_velocity_per_seconds: sale_velocity_per_seconds
    }
  }

  pub fn set_total(&mut self, total: i64) {
    self.total = total;
  }

  pub fn with_total(mut self, total: i64) -> OrderStatisticsResponse {
    self.total = total;
    self
  }

  pub fn total(&self) -> &i64 {
    &self.total
  }


  pub fn set_last24h(&mut self, last24h: i64) {
    self.last24h = last24h;
  }

  pub fn with_last24h(mut self, last24h: i64) -> OrderStatisticsResponse {
    self.last24h = last24h;
    self
  }

  pub fn last24h(&self) -> &i64 {
    &self.last24h
  }


  pub fn set_sale_velocity_per_seconds(&mut self, sale_velocity_per_seconds: f64) {
    self.sale_velocity_per_seconds = sale_velocity_per_seconds;
  }

  pub fn with_sale_velocity_per_seconds(mut self, sale_velocity_per_seconds: f64) -> OrderStatisticsResponse {
    self.sale_velocity_per_seconds = sale_velocity_per_seconds;
    self
  }

  pub fn sale_velocity_per_seconds(&self) -> &f64 {
    &self.sale_velocity_per_seconds
  }


}



