/* 
 * Mojang API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct SecurityQuestionAnswerApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> SecurityQuestionAnswerApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> SecurityQuestionAnswerApiClient<C> {
        SecurityQuestionAnswerApiClient {
            configuration: configuration,
        }
    }
}

pub trait SecurityQuestionAnswerApi {
    fn check_security_status(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn list_pending_security_questions(&self, ) -> Box<Future<Item = Vec<::models::SecurityChallenge>, Error = Error<serde_json::Value>>>;
    fn send_security_question_answers(&self, security_answer: Vec<::models::SecurityAnswer>) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>SecurityQuestionAnswerApi for SecurityQuestionAnswerApiClient<C> {
    fn check_security_status(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/user/security/location".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn list_pending_security_questions(&self, ) -> Box<Future<Item = Vec<::models::SecurityChallenge>, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/user/security/challenges".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .execute(self.configuration.borrow())
    }

    fn send_security_question_answers(&self, security_answer: Vec<::models::SecurityAnswer>) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/user/security/location".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_body_param(security_answer)
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

}
