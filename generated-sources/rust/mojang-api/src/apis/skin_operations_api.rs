/* 
 * Mojang API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct SkinOperationsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> SkinOperationsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> SkinOperationsApiClient<C> {
        SkinOperationsApiClient {
            configuration: configuration,
        }
    }
}

pub trait SkinOperationsApi {
    fn change_player_skin(&self, stripped_uuid: &str, url: &str, model: ::models::::models::SkinModel) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn reset_player_skin(&self, stripped_uuid: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn upload_player_skin(&self, stripped_uuid: &str, file: ::models::File, model: ::models::::models::SkinModel) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>SkinOperationsApi for SkinOperationsApiClient<C> {
    fn change_player_skin(&self, stripped_uuid: &str, url: &str, model: ::models::::models::SkinModel) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/user/profile/{stripped_uuid}/skin".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_path_param("stripped_uuid".to_string(), stripped_uuid.to_string())
            .with_form_param("model".to_string(), model.to_string())
            .with_form_param("url".to_string(), url.to_string())
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn reset_player_skin(&self, stripped_uuid: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/user/profile/{stripped_uuid}/skin".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_path_param("stripped_uuid".to_string(), stripped_uuid.to_string())
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

    fn upload_player_skin(&self, stripped_uuid: &str, file: ::models::File, model: ::models::::models::SkinModel) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/user/profile/{stripped_uuid}/skin".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_path_param("stripped_uuid".to_string(), stripped_uuid.to_string())
            .with_form_param("model".to_string(), model.to_string())
            .with_form_param("file".to_string(), unimplemented!())
            .returns_nothing()
            .execute(self.configuration.borrow())
    }

}
