/* 
 * Mojang Session API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PlayerProfile {
  /// The player UUID without hyphens
  #[serde(rename = "id")]
  id: String,
  #[serde(rename = "name")]
  name: String,
  /// Will appear in the response if the user has not migrated their minecraft.net account to Mojang.
  #[serde(rename = "legacy")]
  legacy: Option<bool>,
  /// An array with all player properties, like skin and cape
  #[serde(rename = "properties")]
  properties: Vec<::models::PlayerProfileProperty>
}

impl PlayerProfile {
  pub fn new(id: String, name: String, properties: Vec<::models::PlayerProfileProperty>) -> PlayerProfile {
    PlayerProfile {
      id: id,
      name: name,
      legacy: None,
      properties: properties
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> PlayerProfile {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }


  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> PlayerProfile {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_legacy(&mut self, legacy: bool) {
    self.legacy = Some(legacy);
  }

  pub fn with_legacy(mut self, legacy: bool) -> PlayerProfile {
    self.legacy = Some(legacy);
    self
  }

  pub fn legacy(&self) -> Option<&bool> {
    self.legacy.as_ref()
  }

  pub fn reset_legacy(&mut self) {
    self.legacy = None;
  }

  pub fn set_properties(&mut self, properties: Vec<::models::PlayerProfileProperty>) {
    self.properties = properties;
  }

  pub fn with_properties(mut self, properties: Vec<::models::PlayerProfileProperty>) -> PlayerProfile {
    self.properties = properties;
    self
  }

  pub fn properties(&self) -> &Vec<::models::PlayerProfileProperty> {
    &self.properties
  }


}



