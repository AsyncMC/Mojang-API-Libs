/* 
 * Mojang Session API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 * Generated by: https://openapi-generator.tech
 */

/// PlayerTexture : Provide links to the player's skin and cape

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PlayerTexture {
  #[serde(rename = "SKIN")]
  SKIN: Option<::models::PlayerSkinUrl>,
  #[serde(rename = "CAPE")]
  CAPE: Option<::models::PlayerTextureUrl>
}

impl PlayerTexture {
  /// Provide links to the player's skin and cape
  pub fn new() -> PlayerTexture {
    PlayerTexture {
      SKIN: None,
      CAPE: None
    }
  }

  pub fn set_SKIN(&mut self, SKIN: ::models::PlayerSkinUrl) {
    self.SKIN = Some(SKIN);
  }

  pub fn with_SKIN(mut self, SKIN: ::models::PlayerSkinUrl) -> PlayerTexture {
    self.SKIN = Some(SKIN);
    self
  }

  pub fn SKIN(&self) -> Option<&::models::PlayerSkinUrl> {
    self.SKIN.as_ref()
  }

  pub fn reset_SKIN(&mut self) {
    self.SKIN = None;
  }

  pub fn set_CAPE(&mut self, CAPE: ::models::PlayerTextureUrl) {
    self.CAPE = Some(CAPE);
  }

  pub fn with_CAPE(mut self, CAPE: ::models::PlayerTextureUrl) -> PlayerTexture {
    self.CAPE = Some(CAPE);
    self
  }

  pub fn CAPE(&self) -> Option<&::models::PlayerTextureUrl> {
    self.CAPE.as_ref()
  }

  pub fn reset_CAPE(&mut self) {
    self.CAPE = None;
  }

}



