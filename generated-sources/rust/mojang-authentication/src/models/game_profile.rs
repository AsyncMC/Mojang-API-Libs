/* 
 * Mojang Authentication API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GameProfile {
  #[serde(rename = "agent")]
  agent: Option<String>,
  #[serde(rename = "id")]
  id: Option<String>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "userId")]
  user_id: Option<::models::File>,
  /// Unix timestamp in milliseconds
  #[serde(rename = "createdAt")]
  created_at: Option<i64>,
  #[serde(rename = "legacyProfile")]
  legacy_profile: Option<bool>,
  #[serde(rename = "suspended")]
  suspended: Option<bool>,
  #[serde(rename = "paid")]
  paid: Option<bool>,
  #[serde(rename = "migrated")]
  migrated: Option<bool>,
  #[serde(rename = "legacy")]
  legacy: Option<bool>
}

impl GameProfile {
  pub fn new() -> GameProfile {
    GameProfile {
      agent: None,
      id: None,
      name: None,
      user_id: None,
      created_at: None,
      legacy_profile: None,
      suspended: None,
      paid: None,
      migrated: None,
      legacy: None
    }
  }

  pub fn set_agent(&mut self, agent: String) {
    self.agent = Some(agent);
  }

  pub fn with_agent(mut self, agent: String) -> GameProfile {
    self.agent = Some(agent);
    self
  }

  pub fn agent(&self) -> Option<&String> {
    self.agent.as_ref()
  }

  pub fn reset_agent(&mut self) {
    self.agent = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> GameProfile {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> GameProfile {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_user_id(&mut self, user_id: ::models::File) {
    self.user_id = Some(user_id);
  }

  pub fn with_user_id(mut self, user_id: ::models::File) -> GameProfile {
    self.user_id = Some(user_id);
    self
  }

  pub fn user_id(&self) -> Option<&::models::File> {
    self.user_id.as_ref()
  }

  pub fn reset_user_id(&mut self) {
    self.user_id = None;
  }

  pub fn set_created_at(&mut self, created_at: i64) {
    self.created_at = Some(created_at);
  }

  pub fn with_created_at(mut self, created_at: i64) -> GameProfile {
    self.created_at = Some(created_at);
    self
  }

  pub fn created_at(&self) -> Option<&i64> {
    self.created_at.as_ref()
  }

  pub fn reset_created_at(&mut self) {
    self.created_at = None;
  }

  pub fn set_legacy_profile(&mut self, legacy_profile: bool) {
    self.legacy_profile = Some(legacy_profile);
  }

  pub fn with_legacy_profile(mut self, legacy_profile: bool) -> GameProfile {
    self.legacy_profile = Some(legacy_profile);
    self
  }

  pub fn legacy_profile(&self) -> Option<&bool> {
    self.legacy_profile.as_ref()
  }

  pub fn reset_legacy_profile(&mut self) {
    self.legacy_profile = None;
  }

  pub fn set_suspended(&mut self, suspended: bool) {
    self.suspended = Some(suspended);
  }

  pub fn with_suspended(mut self, suspended: bool) -> GameProfile {
    self.suspended = Some(suspended);
    self
  }

  pub fn suspended(&self) -> Option<&bool> {
    self.suspended.as_ref()
  }

  pub fn reset_suspended(&mut self) {
    self.suspended = None;
  }

  pub fn set_paid(&mut self, paid: bool) {
    self.paid = Some(paid);
  }

  pub fn with_paid(mut self, paid: bool) -> GameProfile {
    self.paid = Some(paid);
    self
  }

  pub fn paid(&self) -> Option<&bool> {
    self.paid.as_ref()
  }

  pub fn reset_paid(&mut self) {
    self.paid = None;
  }

  pub fn set_migrated(&mut self, migrated: bool) {
    self.migrated = Some(migrated);
  }

  pub fn with_migrated(mut self, migrated: bool) -> GameProfile {
    self.migrated = Some(migrated);
    self
  }

  pub fn migrated(&self) -> Option<&bool> {
    self.migrated.as_ref()
  }

  pub fn reset_migrated(&mut self) {
    self.migrated = None;
  }

  pub fn set_legacy(&mut self, legacy: bool) {
    self.legacy = Some(legacy);
  }

  pub fn with_legacy(mut self, legacy: bool) -> GameProfile {
    self.legacy = Some(legacy);
    self
  }

  pub fn legacy(&self) -> Option<&bool> {
    self.legacy.as_ref()
  }

  pub fn reset_legacy(&mut self) {
    self.legacy = None;
  }

}



