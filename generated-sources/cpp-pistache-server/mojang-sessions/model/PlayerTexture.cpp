/**
* Mojang Session API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 2020-06-05
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "PlayerTexture.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

PlayerTexture::PlayerTexture()
{
    m_SKINIsSet = false;
    m_CAPEIsSet = false;
    
}

PlayerTexture::~PlayerTexture()
{
}

void PlayerTexture::validate()
{
    // TODO: implement validation
}

nlohmann::json PlayerTexture::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_SKINIsSet)
    {
        val["SKIN"] = ModelBase::toJson(m_SKIN);
    }
    if(m_CAPEIsSet)
    {
        val["CAPE"] = ModelBase::toJson(m_CAPE);
    }
    

    return val;
}

void PlayerTexture::fromJson(const nlohmann::json& val)
{
    if(val.find("SKIN") != val.end())
    {
        if(!val["SKIN"].is_null())
        {
            PlayerSkinURL newItem;
            newItem.fromJson(val["SKIN"]);
            setSKIN( newItem );
        }
        
    }
    if(val.find("CAPE") != val.end())
    {
        if(!val["CAPE"].is_null())
        {
            PlayerTextureURL newItem;
            newItem.fromJson(val["CAPE"]);
            setCAPE( newItem );
        }
        
    }
    
}


PlayerSkinURL PlayerTexture::getSKIN() const
{
    return m_SKIN;
}
void PlayerTexture::setSKIN(PlayerSkinURL const& value)
{
    m_SKIN = value;
    m_SKINIsSet = true;
}
bool PlayerTexture::sKINIsSet() const
{
    return m_SKINIsSet;
}
void PlayerTexture::unsetSKIN()
{
    m_SKINIsSet = false;
}
PlayerTextureURL PlayerTexture::getCAPE() const
{
    return m_CAPE;
}
void PlayerTexture::setCAPE(PlayerTextureURL const& value)
{
    m_CAPE = value;
    m_CAPEIsSet = true;
}
bool PlayerTexture::cAPEIsSet() const
{
    return m_CAPEIsSet;
}
void PlayerTexture::unsetCAPE()
{
    m_CAPEIsSet = false;
}

}
}
}
}

