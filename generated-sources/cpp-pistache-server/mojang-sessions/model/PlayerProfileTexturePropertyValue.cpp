/**
* Mojang Session API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 2020-06-05
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "PlayerProfileTexturePropertyValue.h"

namespace com {
namespace github {
namespace asyncmc {
namespace mojang {
namespace sessions {
namespace cpp {
namespace pistache {
namespace server {
namespace model {

PlayerProfileTexturePropertyValue::PlayerProfileTexturePropertyValue()
{
    m_Timestamp = 0L;
    m_ProfileId = "";
    m_ProfileName = "";
    m_SignatureRequired = false;
    m_SignatureRequiredIsSet = false;
    m_TexturesIsSet = false;
    
}

PlayerProfileTexturePropertyValue::~PlayerProfileTexturePropertyValue()
{
}

void PlayerProfileTexturePropertyValue::validate()
{
    // TODO: implement validation
}

nlohmann::json PlayerProfileTexturePropertyValue::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["timestamp"] = m_Timestamp;
    val["profileId"] = ModelBase::toJson(m_ProfileId);
    val["profileName"] = ModelBase::toJson(m_ProfileName);
    if(m_SignatureRequiredIsSet)
    {
        val["signatureRequired"] = m_SignatureRequired;
    }
    if(m_TexturesIsSet)
    {
        val["textures"] = ModelBase::toJson(m_Textures);
    }
    

    return val;
}

void PlayerProfileTexturePropertyValue::fromJson(const nlohmann::json& val)
{
    setTimestamp(val.at("timestamp"));
    setProfileId(val.at("profileId"));
    setProfileName(val.at("profileName"));
    if(val.find("signatureRequired") != val.end())
    {
        setSignatureRequired(val.at("signatureRequired"));
    }
    if(val.find("textures") != val.end())
    {
        if(!val["textures"].is_null())
        {
            PlayerTexture newItem;
            newItem.fromJson(val["textures"]);
            setTextures( newItem );
        }
        
    }
    
}


int64_t PlayerProfileTexturePropertyValue::getTimestamp() const
{
    return m_Timestamp;
}
void PlayerProfileTexturePropertyValue::setTimestamp(int64_t const value)
{
    m_Timestamp = value;
    
}
std::string PlayerProfileTexturePropertyValue::getProfileId() const
{
    return m_ProfileId;
}
void PlayerProfileTexturePropertyValue::setProfileId(std::string const& value)
{
    m_ProfileId = value;
    
}
std::string PlayerProfileTexturePropertyValue::getProfileName() const
{
    return m_ProfileName;
}
void PlayerProfileTexturePropertyValue::setProfileName(std::string const& value)
{
    m_ProfileName = value;
    
}
bool PlayerProfileTexturePropertyValue::isSignatureRequired() const
{
    return m_SignatureRequired;
}
void PlayerProfileTexturePropertyValue::setSignatureRequired(bool const value)
{
    m_SignatureRequired = value;
    m_SignatureRequiredIsSet = true;
}
bool PlayerProfileTexturePropertyValue::signatureRequiredIsSet() const
{
    return m_SignatureRequiredIsSet;
}
void PlayerProfileTexturePropertyValue::unsetSignatureRequired()
{
    m_SignatureRequiredIsSet = false;
}
PlayerTexture PlayerProfileTexturePropertyValue::getTextures() const
{
    return m_Textures;
}
void PlayerProfileTexturePropertyValue::setTextures(PlayerTexture const& value)
{
    m_Textures = value;
    m_TexturesIsSet = true;
}
bool PlayerProfileTexturePropertyValue::texturesIsSet() const
{
    return m_TexturesIsSet;
}
void PlayerProfileTexturePropertyValue::unsetTextures()
{
    m_TexturesIsSet = false;
}

}
}
}
}
}
}
}
}
}

