/**
* Mojang Session API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 2020-06-05
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "PlayerProfile.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

PlayerProfile::PlayerProfile()
{
    m_Id = "";
    m_Name = "";
    m_Legacy = false;
    m_LegacyIsSet = false;
    
}

PlayerProfile::~PlayerProfile()
{
}

void PlayerProfile::validate()
{
    // TODO: implement validation
}

nlohmann::json PlayerProfile::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["id"] = ModelBase::toJson(m_Id);
    val["name"] = ModelBase::toJson(m_Name);
    if(m_LegacyIsSet)
    {
        val["legacy"] = m_Legacy;
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Properties )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val["properties"] = jsonArray;
        
    }
    

    return val;
}

void PlayerProfile::fromJson(const nlohmann::json& val)
{
    setId(val.at("id"));
    setName(val.at("name"));
    if(val.find("legacy") != val.end())
    {
        setLegacy(val.at("legacy"));
    }
    {
        m_Properties.clear();
                    for( auto& item : val["properties"] )
            {
                
                if(item.is_null())
                {
                    m_Properties.push_back( PlayerProfileProperty() );
                }
                else
                {
                    PlayerProfileProperty newItem;
                    newItem.fromJson(item);
                    m_Properties.push_back( newItem );
                }
                
            }
    }
    
}


std::string PlayerProfile::getId() const
{
    return m_Id;
}
void PlayerProfile::setId(std::string const& value)
{
    m_Id = value;
    
}
std::string PlayerProfile::getName() const
{
    return m_Name;
}
void PlayerProfile::setName(std::string const& value)
{
    m_Name = value;
    
}
bool PlayerProfile::isLegacy() const
{
    return m_Legacy;
}
void PlayerProfile::setLegacy(bool const value)
{
    m_Legacy = value;
    m_LegacyIsSet = true;
}
bool PlayerProfile::legacyIsSet() const
{
    return m_LegacyIsSet;
}
void PlayerProfile::unsetLegacy()
{
    m_LegacyIsSet = false;
}
std::vector<PlayerProfileProperty>& PlayerProfile::getProperties()
{
    return m_Properties;
}

}
}
}
}

