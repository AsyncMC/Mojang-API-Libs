/**
* Mojang API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 2020-06-05
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * SkinOperationsApi.h
 *
 * 
 */

#ifndef SkinOperationsApi_H_
#define SkinOperationsApi_H_


#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>


#include "Error.h"
#include "SkinModel.h"
#include <string>

namespace com {
namespace github {
namespace asyncmc {
namespace mojang {
namespace api {
namespace cpp {
namespace pistache {
namespace server {
namespace api {

using namespace com::github::asyncmc::mojang::api::cpp::pistache::server::model;

class  SkinOperationsApi {
public:
    SkinOperationsApi(std::shared_ptr<Pistache::Rest::Router>);
    virtual ~SkinOperationsApi() {}
    void init();

    const std::string base = "";

private:
    void setupRoutes();

    void change_player_skin_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void reset_player_skin_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void upload_player_skin_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void skin_operations_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    std::shared_ptr<Pistache::Rest::Router> router;

    /// <summary>
    /// Changes the player skin by URL
    /// </summary>
    /// <remarks>
    /// This will set the skin for the selected profile, but Mojang&#39;s servers will fetch the skin from a URL. This will also work for legacy accounts.
    /// </remarks>
    virtual void change_player_skin(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Resets the player skin to default
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="strippedUuid">The player UUID without hyphens</param>
    virtual void reset_player_skin(const std::string &strippedUuid, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Changes the player skin by upload
    /// </summary>
    /// <remarks>
    /// This uploads a skin to Mojang&#39;s servers. It also sets the users skin. This works on legacy counts as well.
    /// </remarks>
    virtual void upload_player_skin(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter &response) = 0;

};

}
}
}
}
}
}
}
}
}

#endif /* SkinOperationsApi_H_ */

