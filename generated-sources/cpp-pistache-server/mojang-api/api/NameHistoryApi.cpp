/**
* Mojang API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 2020-06-05
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "NameHistoryApi.h"
#include "Helpers.h"

namespace com {
namespace github {
namespace asyncmc {
namespace mojang {
namespace api {
namespace cpp {
namespace pistache {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace com::github::asyncmc::mojang::api::cpp::pistache::server::model;

NameHistoryApi::NameHistoryApi(std::shared_ptr<Pistache::Rest::Router> rtr) { 
    router = rtr;
};

void NameHistoryApi::init() {
    setupRoutes();
}

void NameHistoryApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Post(*router, base + "/profiles/minecraft", Routes::bind(&NameHistoryApi::find_unique_ids_by_name_handler, this));
    Routes::Get(*router, base + "/user/profiles/:stripped_uuid/names", Routes::bind(&NameHistoryApi::get_name_history_handler, this));
    Routes::Get(*router, base + "/users/profiles/minecraft/:username", Routes::bind(&NameHistoryApi::get_unique_id_by_name_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&NameHistoryApi::name_history_api_default_handler, this));
}

void NameHistoryApi::find_unique_ids_by_name_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the body param
    std::vector<std::string> stdString;
    
    try {
      nlohmann::json request_body = nlohmann::json::parse(request.body());
      stdString =   ArrayHelper::fromJson<std::string>(request_body);
      this->find_unique_ids_by_name(stdString, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void NameHistoryApi::get_name_history_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto strippedUuid = request.param(":strippedUuid").as<std::string>();
    
    try {
      this->get_name_history(strippedUuid, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void NameHistoryApi::get_unique_id_by_name_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto username = request.param(":username").as<std::string>();
    
    // Getting the query params
    auto atQuery = request.query().get("at");
    Pistache::Optional<int64_t> at;
    if(!atQuery.isEmpty()){
        int64_t value;
        if(fromStringValue(atQuery.get(), value)){
            at = Pistache::Some(value);
        }
    }
    
    try {
      this->get_unique_id_by_name(username, at, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}

void NameHistoryApi::name_history_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

}
}
}
}
}
}
}
}
}

