/**
* Mojang API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 2020-06-05
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "SkinOperationsApi.h"
#include "Helpers.h"

namespace com {
namespace github {
namespace asyncmc {
namespace mojang {
namespace api {
namespace cpp {
namespace pistache {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace com::github::asyncmc::mojang::api::cpp::pistache::server::model;

SkinOperationsApi::SkinOperationsApi(std::shared_ptr<Pistache::Rest::Router> rtr) { 
    router = rtr;
};

void SkinOperationsApi::init() {
    setupRoutes();
}

void SkinOperationsApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Post(*router, base + "/user/profile/:stripped_uuid/skin", Routes::bind(&SkinOperationsApi::change_player_skin_handler, this));
    Routes::Delete(*router, base + "/user/profile/:stripped_uuid/skin", Routes::bind(&SkinOperationsApi::reset_player_skin_handler, this));
    Routes::Put(*router, base + "/user/profile/:stripped_uuid/skin", Routes::bind(&SkinOperationsApi::upload_player_skin_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&SkinOperationsApi::skin_operations_api_default_handler, this));
}

void SkinOperationsApi::change_player_skin_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {
      this->change_player_skin(request, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void SkinOperationsApi::reset_player_skin_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto strippedUuid = request.param(":strippedUuid").as<std::string>();
    
    try {
      this->reset_player_skin(strippedUuid, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void SkinOperationsApi::upload_player_skin_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {
      this->upload_player_skin(request, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}

void SkinOperationsApi::skin_operations_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

}
}
}
}
}
}
}
}
}

