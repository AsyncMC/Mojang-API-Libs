/**
* Mojang API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 2020-06-05
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * SecurityQuestionAnswerApi.h
 *
 * 
 */

#ifndef SecurityQuestionAnswerApi_H_
#define SecurityQuestionAnswerApi_H_


#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>


#include "Error.h"
#include "SecurityAnswer.h"
#include "SecurityChallenge.h"
#include <vector>

namespace com {
namespace github {
namespace asyncmc {
namespace mojang {
namespace api {
namespace cpp {
namespace pistache {
namespace server {
namespace api {

using namespace com::github::asyncmc::mojang::api::cpp::pistache::server::model;

class  SecurityQuestionAnswerApi {
public:
    SecurityQuestionAnswerApi(std::shared_ptr<Pistache::Rest::Router>);
    virtual ~SecurityQuestionAnswerApi() {}
    void init();

    const std::string base = "";

private:
    void setupRoutes();

    void check_security_status_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void list_pending_security_questions_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void send_security_question_answers_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void security_question_answer_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    std::shared_ptr<Pistache::Rest::Router> router;

    /// <summary>
    /// Check if security questions are needed
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    virtual void check_security_status(Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Get list of questions
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    virtual void list_pending_security_questions(Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Send back the answers
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="securityAnswer">An array with all the answers</param>
    virtual void send_security_question_answers(const std::vector<SecurityAnswer> &securityAnswer, Pistache::Http::ResponseWriter &response) = 0;

};

}
}
}
}
}
}
}
}
}

#endif /* SecurityQuestionAnswerApi_H_ */

