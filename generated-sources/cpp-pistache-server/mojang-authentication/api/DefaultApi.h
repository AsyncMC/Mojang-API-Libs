/**
* Mojang Authentication API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 2020-06-05
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * DefaultApi.h
 *
 * 
 */

#ifndef DefaultApi_H_
#define DefaultApi_H_


#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>


#include "AccessKeys.h"
#include "Authentication.h"
#include "AuthenticationRequest.h"
#include "Error.h"
#include "RefreshRequest.h"
#include "RefreshResponse.h"
#include "UsernamePassword.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class  DefaultApi {
public:
    DefaultApi(std::shared_ptr<Pistache::Rest::Router>);
    virtual ~DefaultApi() {}
    void init();

    const std::string base = "";

private:
    void setupRoutes();

    void authenticate_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void invalidate_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void refresh_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void siginout_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void validate_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void default_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    std::shared_ptr<Pistache::Rest::Router> router;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="authenticationRequest"></param>
    virtual void authenticate(const AuthenticationRequest &authenticationRequest, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="accessKeys"></param>
    virtual void invalidate(const AccessKeys &accessKeys, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="refreshRequest"></param>
    virtual void refresh(const RefreshRequest &refreshRequest, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="usernamePassword"></param>
    virtual void siginout(const UsernamePassword &usernamePassword, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="accessKeys"></param>
    virtual void validate(const AccessKeys &accessKeys, Pistache::Http::ResponseWriter &response) = 0;

};

}
}
}
}

#endif /* DefaultApi_H_ */

