/**
* Mojang Authentication API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 2020-06-05
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GameProfile.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

GameProfile::GameProfile()
{
    m_Agent = "";
    m_AgentIsSet = false;
    m_Id = "";
    m_IdIsSet = false;
    m_Name = "";
    m_NameIsSet = false;
    m_UserIdIsSet = false;
    m_CreatedAt = 0L;
    m_CreatedAtIsSet = false;
    m_LegacyProfile = false;
    m_LegacyProfileIsSet = false;
    m_Suspended = false;
    m_SuspendedIsSet = false;
    m_Paid = false;
    m_PaidIsSet = false;
    m_Migrated = false;
    m_MigratedIsSet = false;
    m_Legacy = false;
    m_LegacyIsSet = false;
    
}

GameProfile::~GameProfile()
{
}

void GameProfile::validate()
{
    // TODO: implement validation
}

nlohmann::json GameProfile::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_AgentIsSet)
    {
        val["agent"] = ModelBase::toJson(m_Agent);
    }
    if(m_IdIsSet)
    {
        val["id"] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val["name"] = ModelBase::toJson(m_Name);
    }
    if(m_UserIdIsSet)
    {
        val["userId"] = ModelBase::toJson(m_UserId);
    }
    if(m_CreatedAtIsSet)
    {
        val["createdAt"] = m_CreatedAt;
    }
    if(m_LegacyProfileIsSet)
    {
        val["legacyProfile"] = m_LegacyProfile;
    }
    if(m_SuspendedIsSet)
    {
        val["suspended"] = m_Suspended;
    }
    if(m_PaidIsSet)
    {
        val["paid"] = m_Paid;
    }
    if(m_MigratedIsSet)
    {
        val["migrated"] = m_Migrated;
    }
    if(m_LegacyIsSet)
    {
        val["legacy"] = m_Legacy;
    }
    

    return val;
}

void GameProfile::fromJson(const nlohmann::json& val)
{
    if(val.find("agent") != val.end())
    {
        setAgent(val.at("agent"));
    }
    if(val.find("id") != val.end())
    {
        setId(val.at("id"));
    }
    if(val.find("name") != val.end())
    {
        setName(val.at("name"));
    }
    if(val.find("userId") != val.end())
    {
        setUserId(val.at("userId"));
        
    }
    if(val.find("createdAt") != val.end())
    {
        setCreatedAt(val.at("createdAt"));
    }
    if(val.find("legacyProfile") != val.end())
    {
        setLegacyProfile(val.at("legacyProfile"));
    }
    if(val.find("suspended") != val.end())
    {
        setSuspended(val.at("suspended"));
    }
    if(val.find("paid") != val.end())
    {
        setPaid(val.at("paid"));
    }
    if(val.find("migrated") != val.end())
    {
        setMigrated(val.at("migrated"));
    }
    if(val.find("legacy") != val.end())
    {
        setLegacy(val.at("legacy"));
    }
    
}


std::string GameProfile::getAgent() const
{
    return m_Agent;
}
void GameProfile::setAgent(std::string const& value)
{
    m_Agent = value;
    m_AgentIsSet = true;
}
bool GameProfile::agentIsSet() const
{
    return m_AgentIsSet;
}
void GameProfile::unsetAgent()
{
    m_AgentIsSet = false;
}
std::string GameProfile::getId() const
{
    return m_Id;
}
void GameProfile::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool GameProfile::idIsSet() const
{
    return m_IdIsSet;
}
void GameProfile::unsetId()
{
    m_IdIsSet = false;
}
std::string GameProfile::getName() const
{
    return m_Name;
}
void GameProfile::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool GameProfile::nameIsSet() const
{
    return m_NameIsSet;
}
void GameProfile::unsetName()
{
    m_NameIsSet = false;
}
std::string GameProfile::getUserId() const
{
    return m_UserId;
}
void GameProfile::setUserId(std::string const& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}
bool GameProfile::userIdIsSet() const
{
    return m_UserIdIsSet;
}
void GameProfile::unsetUserId()
{
    m_UserIdIsSet = false;
}
int64_t GameProfile::getCreatedAt() const
{
    return m_CreatedAt;
}
void GameProfile::setCreatedAt(int64_t const value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}
bool GameProfile::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}
void GameProfile::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
bool GameProfile::isLegacyProfile() const
{
    return m_LegacyProfile;
}
void GameProfile::setLegacyProfile(bool const value)
{
    m_LegacyProfile = value;
    m_LegacyProfileIsSet = true;
}
bool GameProfile::legacyProfileIsSet() const
{
    return m_LegacyProfileIsSet;
}
void GameProfile::unsetLegacyProfile()
{
    m_LegacyProfileIsSet = false;
}
bool GameProfile::isSuspended() const
{
    return m_Suspended;
}
void GameProfile::setSuspended(bool const value)
{
    m_Suspended = value;
    m_SuspendedIsSet = true;
}
bool GameProfile::suspendedIsSet() const
{
    return m_SuspendedIsSet;
}
void GameProfile::unsetSuspended()
{
    m_SuspendedIsSet = false;
}
bool GameProfile::isPaid() const
{
    return m_Paid;
}
void GameProfile::setPaid(bool const value)
{
    m_Paid = value;
    m_PaidIsSet = true;
}
bool GameProfile::paidIsSet() const
{
    return m_PaidIsSet;
}
void GameProfile::unsetPaid()
{
    m_PaidIsSet = false;
}
bool GameProfile::isMigrated() const
{
    return m_Migrated;
}
void GameProfile::setMigrated(bool const value)
{
    m_Migrated = value;
    m_MigratedIsSet = true;
}
bool GameProfile::migratedIsSet() const
{
    return m_MigratedIsSet;
}
void GameProfile::unsetMigrated()
{
    m_MigratedIsSet = false;
}
bool GameProfile::isLegacy() const
{
    return m_Legacy;
}
void GameProfile::setLegacy(bool const value)
{
    m_Legacy = value;
    m_LegacyIsSet = true;
}
bool GameProfile::legacyIsSet() const
{
    return m_LegacyIsSet;
}
void GameProfile::unsetLegacy()
{
    m_LegacyIsSet = false;
}

}
}
}
}

