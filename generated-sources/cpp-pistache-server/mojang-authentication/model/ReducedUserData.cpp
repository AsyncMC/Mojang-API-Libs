/**
* Mojang Authentication API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 2020-06-05
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ReducedUserData.h"

namespace com {
namespace github {
namespace asyncmc {
namespace mojang {
namespace authentication {
namespace cpp {
namespace pistache {
namespace server {
namespace model {

ReducedUserData::ReducedUserData()
{
    m_Id = "";
    m_IdIsSet = false;
    m_PropertiesIsSet = false;
    
}

ReducedUserData::~ReducedUserData()
{
}

void ReducedUserData::validate()
{
    // TODO: implement validation
}

nlohmann::json ReducedUserData::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_IdIsSet)
    {
        val["id"] = ModelBase::toJson(m_Id);
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Properties )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["properties"] = jsonArray;
        } 
    }
    

    return val;
}

void ReducedUserData::fromJson(const nlohmann::json& val)
{
    if(val.find("id") != val.end())
    {
        setId(val.at("id"));
    }
    {
        m_Properties.clear();
        if(val.find("properties") != val.end())
        {
            for( auto& item : val["properties"] )
            {
                
                if(item.is_null())
                {
                    m_Properties.push_back( GameProfileProperty() );
                }
                else
                {
                    GameProfileProperty newItem;
                    newItem.fromJson(item);
                    m_Properties.push_back( newItem );
                }
                
            }
        }
    }
    
}


std::string ReducedUserData::getId() const
{
    return m_Id;
}
void ReducedUserData::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool ReducedUserData::idIsSet() const
{
    return m_IdIsSet;
}
void ReducedUserData::unsetId()
{
    m_IdIsSet = false;
}
std::vector<GameProfileProperty>& ReducedUserData::getProperties()
{
    return m_Properties;
}
bool ReducedUserData::propertiesIsSet() const
{
    return m_PropertiesIsSet;
}
void ReducedUserData::unsetProperties()
{
    m_PropertiesIsSet = false;
}

}
}
}
}
}
}
}
}
}

