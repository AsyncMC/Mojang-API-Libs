--  Mojang API
--  No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
--
--  OpenAPI spec version: 2020_06_05
--  
--
--  NOTE: This package is auto generated by the swagger code generator 3.3.4.
--  https://openapi-generator.tech
--  Do not edit the class manually.
with Swagger.Streams;
package body com.github.asyncmc.mojang.api.ada.model.Clients is

   --  Get statistics on the sales of Minecraft.
   procedure Get_Orders_Statistics
      (Client : in out Client_Type;
       Order_Statistics_Request_Type : in com.github.asyncmc.mojang.api.ada.model.Models.OrderStatisticsRequest_Type;
       Result : out com.github.asyncmc.mojang.api.ada.model.Models.OrderStatisticsResponse_Type) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_JSON));
      com.github.asyncmc.mojang.api.ada.model.Models.Serialize (Req.Stream, "", Order_Statistics_Request_Type);

      URI.Set_Path ("/orders/statistics");
      Client.Call (Swagger.Clients.POST, URI, Req, Reply);
      com.github.asyncmc.mojang.api.ada.model.Models.Deserialize (Reply, "", Result);
   end Get_Orders_Statistics;

   --  Find the current UUID of multiple players at once
   --  Find the current players name, UUID, demo status and migration flag by the current players name. The "at" parameter is not supported. Players not found are not returned. If no players are found, an empty array is returned.
   procedure Find_Unique_Ids_By_Name
      (Client : in out Client_Type;
       String : in Swagger.UString_Vectors.Vector;
       Result : out com.github.asyncmc.mojang.api.ada.model.Models.CurrentPlayerIDs_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_JSON));
      Req.Stream.Write_Entity ("string", String);

      URI.Set_Path ("/profiles/minecraft");
      Client.Call (Swagger.Clients.POST, URI, Req, Reply);
      com.github.asyncmc.mojang.api.ada.model.Models.Deserialize (Reply, "", Result);
   end Find_Unique_Ids_By_Name;

   --  Gets the full player's name history
   procedure Get_Name_History
      (Client : in out Client_Type;
       Stripped_Uuid : in Swagger.UString;
       Result : out com.github.asyncmc.mojang.api.ada.model.Models.NameChange_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/user/profiles/{stripped_uuid}/names");
      URI.Set_Path_Param ("stripped_uuid", Stripped_Uuid);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      com.github.asyncmc.mojang.api.ada.model.Models.Deserialize (Reply, "", Result);
   end Get_Name_History;

   --  Find the UUID by name
   --  Find the current player name, UUID, demo status and migration flag by the current player name or at a given time.
   procedure Get_Unique_Id_By_Name
      (Client : in out Client_Type;
       Username : in Swagger.UString;
       P_At : in Swagger.Nullable_Long;
       Result : out com.github.asyncmc.mojang.api.ada.model.Models.CurrentPlayerIDs_Type) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("at", P_At);
      URI.Set_Path ("/users/profiles/minecraft/{username}");
      URI.Set_Path_Param ("username", Username);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      com.github.asyncmc.mojang.api.ada.model.Models.Deserialize (Reply, "", Result);
   end Get_Unique_Id_By_Name;

   --  Check if security questions are needed
   procedure Check_Security_Status
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/user/security/location");
      Client.Call (Swagger.Clients.GET, URI);
   end Check_Security_Status;

   --  Get list of questions
   procedure List_Pending_Security_Questions
      (Client : in out Client_Type;
       Result : out com.github.asyncmc.mojang.api.ada.model.Models.SecurityChallenge_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/user/security/challenges");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      com.github.asyncmc.mojang.api.ada.model.Models.Deserialize (Reply, "", Result);
   end List_Pending_Security_Questions;

   --  Send back the answers
   procedure Send_Security_Question_Answers
      (Client : in out Client_Type;
       Security_Answer : in com.github.asyncmc.mojang.api.ada.model.Models.SecurityAnswer_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_JSON));
      com.github.asyncmc.mojang.api.ada.model.Models.Serialize (Req.Stream, "", Security_Answer);

      URI.Set_Path ("/user/security/location");
      Client.Call (Swagger.Clients.POST, URI, Req);
   end Send_Security_Question_Answers;

   --  Changes the player skin by URL
   --  This will set the skin for the selected profile, but Mojang's servers will fetch the skin from a URL. This will also work for legacy accounts.
   procedure Change_Player_Skin
      (Client : in out Client_Type;
       Stripped_Uuid : in Swagger.UString;
       Url : in Swagger.UString;
       Model : in com.github.asyncmc.mojang.api.ada.model.Models.com.github.asyncmc.mojang.api.ada.model.Models.SkinModel_Type) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_FORM));
      com.github.asyncmc.mojang.api.ada.model.Models.Serialize (Req.Stream, "model", Model);
      Req.Stream.Write_Entity ("url", Url);

      URI.Set_Path ("/user/profile/{stripped_uuid}/skin");
      URI.Set_Path_Param ("stripped_uuid", Stripped_Uuid);
      Client.Call (Swagger.Clients.POST, URI, Req);
   end Change_Player_Skin;

   --  Resets the player skin to default
   procedure Reset_Player_Skin
      (Client : in out Client_Type;
       Stripped_Uuid : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/user/profile/{stripped_uuid}/skin");
      URI.Set_Path_Param ("stripped_uuid", Stripped_Uuid);
      Client.Call (Swagger.Clients.DELETE, URI);
   end Reset_Player_Skin;

   --  Changes the player skin by upload
   --  This uploads a skin to Mojang's servers. It also sets the users skin. This works on legacy counts as well.
   procedure Upload_Player_Skin
      (Client : in out Client_Type;
       Stripped_Uuid : in Swagger.UString;
       File : in Swagger.File_Part_Type;
       Model : in com.github.asyncmc.mojang.api.ada.model.Models.com.github.asyncmc.mojang.api.ada.model.Models.SkinModel_Type) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_FORM));
      com.github.asyncmc.mojang.api.ada.model.Models.Serialize (Req.Stream, "model", Model);
      Req.Stream.Write_Entity ("file", File);

      URI.Set_Path ("/user/profile/{stripped_uuid}/skin");
      URI.Set_Path_Param ("stripped_uuid", Stripped_Uuid);
      Client.Call (Swagger.Clients.PUT, URI, Req);
   end Upload_Player_Skin;
end com.github.asyncmc.mojang.api.ada.model.Clients;
