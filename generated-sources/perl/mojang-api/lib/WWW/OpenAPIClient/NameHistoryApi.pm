=begin comment

Mojang API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

OpenAPI spec version: 2020-06-05

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::NameHistoryApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# find_unique_ids_by_name
#
# Find the current UUID of multiple players at once
# 
# @param ARRAY[string] $request_body Array with the player names (required)
{
    my $params = {
    'request_body' => {
        data_type => 'ARRAY[string]',
        description => 'Array with the player names',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'find_unique_ids_by_name' } = { 
    	summary => 'Find the current UUID of multiple players at once',
        params => $params,
        returns => 'ARRAY[CurrentPlayerIDs]',
        };
}
# @return ARRAY[CurrentPlayerIDs]
#
sub find_unique_ids_by_name {
    my ($self, %args) = @_;

    # verify the required parameter 'request_body' is set
    unless (exists $args{'request_body'}) {
      croak("Missing the required parameter 'request_body' when calling find_unique_ids_by_name");
    }

    # parse inputs
    my $_resource_path = '/profiles/minecraft';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'request_body'}) {
        $_body_data = $args{'request_body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurrentPlayerIDs]', $response);
    return $_response_object;
}

#
# get_name_history
#
# Gets the full player's name history
# 
# @param string $stripped_uuid The player UUID without hyphens (required)
{
    my $params = {
    'stripped_uuid' => {
        data_type => 'string',
        description => 'The player UUID without hyphens',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_name_history' } = { 
    	summary => 'Gets the full player&#39;s name history',
        params => $params,
        returns => 'ARRAY[NameChange]',
        };
}
# @return ARRAY[NameChange]
#
sub get_name_history {
    my ($self, %args) = @_;

    # verify the required parameter 'stripped_uuid' is set
    unless (exists $args{'stripped_uuid'}) {
      croak("Missing the required parameter 'stripped_uuid' when calling get_name_history");
    }

    # parse inputs
    my $_resource_path = '/user/profiles/{stripped_uuid}/names';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'stripped_uuid'}) {
        my $_base_variable = "{" . "stripped_uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'stripped_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[NameChange]', $response);
    return $_response_object;
}

#
# get_unique_id_by_name
#
# Find the UUID by name
# 
# @param string $username The username in a given time, or in present if \&quot;at\&quot; is not sent (required)
# @param int $at Find the username in a given time, when 0 selects the original name however, it only works if the name was changed at least once, or if the account is legacy. The time is an UNIX timestamp (without milliseconds) (optional)
{
    my $params = {
    'username' => {
        data_type => 'string',
        description => 'The username in a given time, or in present if \&quot;at\&quot; is not sent',
        required => '1',
    },
    'at' => {
        data_type => 'int',
        description => 'Find the username in a given time, when 0 selects the original name however, it only works if the name was changed at least once, or if the account is legacy. The time is an UNIX timestamp (without milliseconds)',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_unique_id_by_name' } = { 
    	summary => 'Find the UUID by name',
        params => $params,
        returns => 'CurrentPlayerIDs',
        };
}
# @return CurrentPlayerIDs
#
sub get_unique_id_by_name {
    my ($self, %args) = @_;

    # verify the required parameter 'username' is set
    unless (exists $args{'username'}) {
      croak("Missing the required parameter 'username' when calling get_unique_id_by_name");
    }

    # parse inputs
    my $_resource_path = '/users/profiles/minecraft/{username}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'at'}) {
        $query_params->{'at'} = $self->{api_client}->to_query_value($args{'at'});
    }

    # path params
    if ( exists $args{'username'}) {
        my $_base_variable = "{" . "username" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'username'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CurrentPlayerIDs', $response);
    return $_response_object;
}

1;
