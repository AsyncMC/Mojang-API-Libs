=begin comment

Mojang Session API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

OpenAPI spec version: 2020-06-05

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::LoginApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# get_player_profile
#
# Gets the player's game profile
# 
# @param string $stripped_uuid The player UUID without hyphens (required)
# @param boolean $unsigned When set to false, the signature data are sent (optional)
{
    my $params = {
    'stripped_uuid' => {
        data_type => 'string',
        description => 'The player UUID without hyphens',
        required => '1',
    },
    'unsigned' => {
        data_type => 'boolean',
        description => 'When set to false, the signature data are sent',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_player_profile' } = { 
    	summary => 'Gets the player&#39;s game profile',
        params => $params,
        returns => 'PlayerProfile',
        };
}
# @return PlayerProfile
#
sub get_player_profile {
    my ($self, %args) = @_;

    # verify the required parameter 'stripped_uuid' is set
    unless (exists $args{'stripped_uuid'}) {
      croak("Missing the required parameter 'stripped_uuid' when calling get_player_profile");
    }

    # parse inputs
    my $_resource_path = '/session/minecraft/profile/{stripped_uuid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'unsigned'}) {
        $query_params->{'unsigned'} = $self->{api_client}->to_query_value($args{'unsigned'});
    }

    # path params
    if ( exists $args{'stripped_uuid'}) {
        my $_base_variable = "{" . "stripped_uuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'stripped_uuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PlayerProfile', $response);
    return $_response_object;
}

1;
