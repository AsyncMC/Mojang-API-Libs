=begin comment

Mojang Authentication API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

OpenAPI spec version: 2020-06-05

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::DefaultApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# authenticate
#
# 
# 
# @param AuthenticationRequest $authentication_request  (required)
{
    my $params = {
    'authentication_request' => {
        data_type => 'AuthenticationRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'authenticate' } = { 
    	summary => '',
        params => $params,
        returns => 'Authentication',
        };
}
# @return Authentication
#
sub authenticate {
    my ($self, %args) = @_;

    # verify the required parameter 'authentication_request' is set
    unless (exists $args{'authentication_request'}) {
      croak("Missing the required parameter 'authentication_request' when calling authenticate");
    }

    # parse inputs
    my $_resource_path = '/authenticate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'authentication_request'}) {
        $_body_data = $args{'authentication_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Authentication', $response);
    return $_response_object;
}

#
# invalidate
#
# 
# 
# @param AccessKeys $access_keys  (required)
{
    my $params = {
    'access_keys' => {
        data_type => 'AccessKeys',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'invalidate' } = { 
    	summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub invalidate {
    my ($self, %args) = @_;

    # verify the required parameter 'access_keys' is set
    unless (exists $args{'access_keys'}) {
      croak("Missing the required parameter 'access_keys' when calling invalidate");
    }

    # parse inputs
    my $_resource_path = '/invalidate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'access_keys'}) {
        $_body_data = $args{'access_keys'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# refresh
#
# 
# 
# @param RefreshRequest $refresh_request  (required)
{
    my $params = {
    'refresh_request' => {
        data_type => 'RefreshRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'refresh' } = { 
    	summary => '',
        params => $params,
        returns => 'RefreshResponse',
        };
}
# @return RefreshResponse
#
sub refresh {
    my ($self, %args) = @_;

    # verify the required parameter 'refresh_request' is set
    unless (exists $args{'refresh_request'}) {
      croak("Missing the required parameter 'refresh_request' when calling refresh");
    }

    # parse inputs
    my $_resource_path = '/refresh';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'refresh_request'}) {
        $_body_data = $args{'refresh_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RefreshResponse', $response);
    return $_response_object;
}

#
# siginout
#
# 
# 
# @param UsernamePassword $username_password  (required)
{
    my $params = {
    'username_password' => {
        data_type => 'UsernamePassword',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'siginout' } = { 
    	summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub siginout {
    my ($self, %args) = @_;

    # verify the required parameter 'username_password' is set
    unless (exists $args{'username_password'}) {
      croak("Missing the required parameter 'username_password' when calling siginout");
    }

    # parse inputs
    my $_resource_path = '/signout';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'username_password'}) {
        $_body_data = $args{'username_password'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# validate
#
# 
# 
# @param AccessKeys $access_keys  (required)
{
    my $params = {
    'access_keys' => {
        data_type => 'AccessKeys',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'validate' } = { 
    	summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub validate {
    my ($self, %args) = @_;

    # verify the required parameter 'access_keys' is set
    unless (exists $args{'access_keys'}) {
      croak("Missing the required parameter 'access_keys' when calling validate");
    }

    # parse inputs
    my $_resource_path = '/validate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'access_keys'}) {
        $_body_data = $args{'access_keys'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
