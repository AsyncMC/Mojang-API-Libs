<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  com.github.asyncmc.mojang.authentication.php.server
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mojang Authentication API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use com.github.asyncmc.mojang.authentication.php.server\ApiException;
use com.github.asyncmc.mojang.authentication.php.server\Configuration;
use com.github.asyncmc.mojang.authentication.php.server\HeaderSelector;
use com.github.asyncmc.mojang.authentication.php.server\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  com.github.asyncmc.mojang.authentication.php.server
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation authenticate
     *
     * @param  \com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\AuthenticationRequest $authentication_request authentication_request (required)
     *
     * @throws \com.github.asyncmc.mojang.authentication.php.server\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\Authentication|\com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\Error
     */
    public function authenticate($authentication_request)
    {
        list($response) = $this->authenticateWithHttpInfo($authentication_request);
        return $response;
    }

    /**
     * Operation authenticateWithHttpInfo
     *
     * @param  \com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\AuthenticationRequest $authentication_request (required)
     *
     * @throws \com.github.asyncmc.mojang.authentication.php.server\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\Authentication|\com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function authenticateWithHttpInfo($authentication_request)
    {
        $request = $this->authenticateRequest($authentication_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\Authentication' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\Authentication', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\Authentication';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\Authentication',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation authenticateAsync
     *
     * 
     *
     * @param  \com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\AuthenticationRequest $authentication_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authenticateAsync($authentication_request)
    {
        return $this->authenticateAsyncWithHttpInfo($authentication_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation authenticateAsyncWithHttpInfo
     *
     * 
     *
     * @param  \com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\AuthenticationRequest $authentication_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authenticateAsyncWithHttpInfo($authentication_request)
    {
        $returnType = '\com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\Authentication';
        $request = $this->authenticateRequest($authentication_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'authenticate'
     *
     * @param  \com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\AuthenticationRequest $authentication_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function authenticateRequest($authentication_request)
    {
        // verify the required parameter 'authentication_request' is set
        if ($authentication_request === null || (is_array($authentication_request) && count($authentication_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authentication_request when calling authenticate'
            );
        }

        $resourcePath = '/authenticate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($authentication_request)) {
            $_tempBody = $authentication_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invalidate
     *
     * @param  \com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\AccessKeys $access_keys access_keys (required)
     *
     * @throws \com.github.asyncmc.mojang.authentication.php.server\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function invalidate($access_keys)
    {
        $this->invalidateWithHttpInfo($access_keys);
    }

    /**
     * Operation invalidateWithHttpInfo
     *
     * @param  \com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\AccessKeys $access_keys (required)
     *
     * @throws \com.github.asyncmc.mojang.authentication.php.server\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function invalidateWithHttpInfo($access_keys)
    {
        $request = $this->invalidateRequest($access_keys);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation invalidateAsync
     *
     * 
     *
     * @param  \com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\AccessKeys $access_keys (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invalidateAsync($access_keys)
    {
        return $this->invalidateAsyncWithHttpInfo($access_keys)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invalidateAsyncWithHttpInfo
     *
     * 
     *
     * @param  \com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\AccessKeys $access_keys (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invalidateAsyncWithHttpInfo($access_keys)
    {
        $returnType = '';
        $request = $this->invalidateRequest($access_keys);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invalidate'
     *
     * @param  \com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\AccessKeys $access_keys (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function invalidateRequest($access_keys)
    {
        // verify the required parameter 'access_keys' is set
        if ($access_keys === null || (is_array($access_keys) && count($access_keys) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $access_keys when calling invalidate'
            );
        }

        $resourcePath = '/invalidate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($access_keys)) {
            $_tempBody = $access_keys;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation refresh
     *
     * @param  \com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\RefreshRequest $refresh_request refresh_request (required)
     *
     * @throws \com.github.asyncmc.mojang.authentication.php.server\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\RefreshResponse|\com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\Error
     */
    public function refresh($refresh_request)
    {
        list($response) = $this->refreshWithHttpInfo($refresh_request);
        return $response;
    }

    /**
     * Operation refreshWithHttpInfo
     *
     * @param  \com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\RefreshRequest $refresh_request (required)
     *
     * @throws \com.github.asyncmc.mojang.authentication.php.server\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\RefreshResponse|\com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function refreshWithHttpInfo($refresh_request)
    {
        $request = $this->refreshRequest($refresh_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\RefreshResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\RefreshResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\RefreshResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\RefreshResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation refreshAsync
     *
     * 
     *
     * @param  \com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\RefreshRequest $refresh_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refreshAsync($refresh_request)
    {
        return $this->refreshAsyncWithHttpInfo($refresh_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refreshAsyncWithHttpInfo
     *
     * 
     *
     * @param  \com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\RefreshRequest $refresh_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refreshAsyncWithHttpInfo($refresh_request)
    {
        $returnType = '\com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\RefreshResponse';
        $request = $this->refreshRequest($refresh_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'refresh'
     *
     * @param  \com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\RefreshRequest $refresh_request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function refreshRequest($refresh_request)
    {
        // verify the required parameter 'refresh_request' is set
        if ($refresh_request === null || (is_array($refresh_request) && count($refresh_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $refresh_request when calling refresh'
            );
        }

        $resourcePath = '/refresh';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($refresh_request)) {
            $_tempBody = $refresh_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation siginout
     *
     * @param  \com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\UsernamePassword $username_password username_password (required)
     *
     * @throws \com.github.asyncmc.mojang.authentication.php.server\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function siginout($username_password)
    {
        $this->siginoutWithHttpInfo($username_password);
    }

    /**
     * Operation siginoutWithHttpInfo
     *
     * @param  \com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\UsernamePassword $username_password (required)
     *
     * @throws \com.github.asyncmc.mojang.authentication.php.server\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function siginoutWithHttpInfo($username_password)
    {
        $request = $this->siginoutRequest($username_password);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation siginoutAsync
     *
     * 
     *
     * @param  \com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\UsernamePassword $username_password (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siginoutAsync($username_password)
    {
        return $this->siginoutAsyncWithHttpInfo($username_password)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation siginoutAsyncWithHttpInfo
     *
     * 
     *
     * @param  \com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\UsernamePassword $username_password (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siginoutAsyncWithHttpInfo($username_password)
    {
        $returnType = '';
        $request = $this->siginoutRequest($username_password);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'siginout'
     *
     * @param  \com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\UsernamePassword $username_password (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function siginoutRequest($username_password)
    {
        // verify the required parameter 'username_password' is set
        if ($username_password === null || (is_array($username_password) && count($username_password) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username_password when calling siginout'
            );
        }

        $resourcePath = '/signout';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($username_password)) {
            $_tempBody = $username_password;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation validate
     *
     * @param  \com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\AccessKeys $access_keys access_keys (required)
     *
     * @throws \com.github.asyncmc.mojang.authentication.php.server\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function validate($access_keys)
    {
        $this->validateWithHttpInfo($access_keys);
    }

    /**
     * Operation validateWithHttpInfo
     *
     * @param  \com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\AccessKeys $access_keys (required)
     *
     * @throws \com.github.asyncmc.mojang.authentication.php.server\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function validateWithHttpInfo($access_keys)
    {
        $request = $this->validateRequest($access_keys);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation validateAsync
     *
     * 
     *
     * @param  \com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\AccessKeys $access_keys (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateAsync($access_keys)
    {
        return $this->validateAsyncWithHttpInfo($access_keys)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation validateAsyncWithHttpInfo
     *
     * 
     *
     * @param  \com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\AccessKeys $access_keys (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateAsyncWithHttpInfo($access_keys)
    {
        $returnType = '';
        $request = $this->validateRequest($access_keys);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'validate'
     *
     * @param  \com.github.asyncmc.mojang.authentication.php.server\com.github.asyncmc.mojang.authentication.php.model\AccessKeys $access_keys (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function validateRequest($access_keys)
    {
        // verify the required parameter 'access_keys' is set
        if ($access_keys === null || (is_array($access_keys) && count($access_keys) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $access_keys when calling validate'
            );
        }

        $resourcePath = '/validate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($access_keys)) {
            $_tempBody = $access_keys;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
