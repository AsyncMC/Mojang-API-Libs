/**
* Mojang API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 2020-06-05
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.client.apis

import org.openapitools.client.models.OrderStatisticsRequest
import org.openapitools.client.models.OrderStatisticsResponse

import org.openapitools.client.infrastructure.*

class MiscellaneousApi(basePath: kotlin.String = "https://api.mojang.com") : ApiClient(basePath) {

    /**
    * Get statistics on the sales of Minecraft.
    * 
    * @param orderStatisticsRequest The payload is a json list of options under the metricKeys key. You will receive a single object corresponding to the sum of sales of the requested type(s). You must request at least one type of sale. Below is the default list used by https://minecraft.net/en/stats/ 
    * @return OrderStatisticsResponse
    */
    @Suppress("UNCHECKED_CAST")
    fun getOrdersStatistics(orderStatisticsRequest: OrderStatisticsRequest) : OrderStatisticsResponse {
        val localVariableBody: kotlin.Any? = orderStatisticsRequest
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/orders/statistics",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<OrderStatisticsResponse>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrderStatisticsResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
