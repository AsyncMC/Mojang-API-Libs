/**
* Mojang API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 2020-06-05
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.github.asyncmc.mojang.api.kotlin.api

import com.github.asyncmc.mojang.api.kotlin.model.CurrentPlayerIDs
import com.github.asyncmc.mojang.api.kotlin.model.Error
import com.github.asyncmc.mojang.api.kotlin.model.NameChange

import org.openapitools.client.infrastructure.*

class NameHistoryApi(basePath: kotlin.String = "https://api.mojang.com") : ApiClient(basePath) {

    /**
    * Find the current UUID of multiple players at once
    * Find the current players name, UUID, demo status and migration flag by the current players name. The \&quot;at\&quot; parameter is not supported. Players not found are not returned. If no players are found, an empty array is returned.
    * @param requestBody Array with the player names 
    * @return kotlin.Array<CurrentPlayerIDs>
    */
    @Suppress("UNCHECKED_CAST")
    fun findUniqueIdsByName(requestBody: kotlin.Array<kotlin.String>) : kotlin.Array<CurrentPlayerIDs> {
        val localVariableBody: kotlin.Any? = requestBody
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/profiles/minecraft",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<CurrentPlayerIDs>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<CurrentPlayerIDs>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Gets the full player&#39;s name history
    * 
    * @param strippedUuid The player UUID without hyphens 
    * @return kotlin.Array<NameChange>
    */
    @Suppress("UNCHECKED_CAST")
    fun getNameHistory(strippedUuid: kotlin.String) : kotlin.Array<NameChange> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/user/profiles/{stripped_uuid}/names".replace("{"+"stripped_uuid"+"}", "$strippedUuid"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<NameChange>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<NameChange>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Find the UUID by name
    * Find the current player name, UUID, demo status and migration flag by the current player name or at a given time.
    * @param username The username in a given time, or in present if \&quot;at\&quot; is not sent 
    * @param at Find the username in a given time, when 0 selects the original name however, it only works if the name was changed at least once, or if the account is legacy. The time is an UNIX timestamp (without milliseconds) (optional, default to null)
    * @return CurrentPlayerIDs
    */
    @Suppress("UNCHECKED_CAST")
    fun getUniqueIdByName(username: kotlin.String, at: kotlin.Long) : CurrentPlayerIDs {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("at" to listOf("$at"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/users/profiles/minecraft/{username}".replace("{"+"username"+"}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<CurrentPlayerIDs>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as CurrentPlayerIDs
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
