/* 
 * Mojang Session API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A profile property, may be signed. The values are encoded by base64 and usually contains a json. The schema for the textures are described at PlayerProfileTexturePropertyValue
    /// </summary>
    [DataContract]
    public partial class PlayerProfileProperty :  IEquatable<PlayerProfileProperty>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerProfileProperty" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PlayerProfileProperty() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerProfileProperty" /> class.
        /// </summary>
        /// <param name="name">The property name (required).</param>
        /// <param name="value">The serialized property value in base64. (required).</param>
        /// <param name="signature">signed data using Yggdrasil&#39;s private key.</param>
        public PlayerProfileProperty(string name = default(string), byte[] value = default(byte[]), byte[] signature = default(byte[]))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for PlayerProfileProperty and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new InvalidDataException("value is a required property for PlayerProfileProperty and cannot be null");
            }
            else
            {
                this.Value = value;
            }
            this.Signature = signature;
        }
        
        /// <summary>
        /// The property name
        /// </summary>
        /// <value>The property name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The serialized property value in base64.
        /// </summary>
        /// <value>The serialized property value in base64.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public byte[] Value { get; set; }

        /// <summary>
        /// signed data using Yggdrasil&#39;s private key
        /// </summary>
        /// <value>signed data using Yggdrasil&#39;s private key</value>
        [DataMember(Name="signature", EmitDefaultValue=false)]
        public byte[] Signature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlayerProfileProperty {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlayerProfileProperty);
        }

        /// <summary>
        /// Returns true if PlayerProfileProperty instances are equal
        /// </summary>
        /// <param name="input">Instance of PlayerProfileProperty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlayerProfileProperty input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Signature == input.Signature ||
                    (this.Signature != null &&
                    this.Signature.Equals(input.Signature))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Signature != null)
                    hashCode = hashCode * 59 + this.Signature.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
