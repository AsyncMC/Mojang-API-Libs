/* 
 * Mojang Session API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// This is obtained by decoding the \&quot;textures\&quot; property
    /// </summary>
    [DataContract]
    public partial class PlayerProfileTexturePropertyValue :  IEquatable<PlayerProfileTexturePropertyValue>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerProfileTexturePropertyValue" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PlayerProfileTexturePropertyValue() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerProfileTexturePropertyValue" /> class.
        /// </summary>
        /// <param name="timestamp">UNIX timestamp in milliseconds (required).</param>
        /// <param name="profileId">The player UUID without hyphens (required).</param>
        /// <param name="profileName">The player&#39;s name (required).</param>
        /// <param name="signatureRequired">Only present if unsigned was set to false in the request (default to false).</param>
        /// <param name="textures">textures.</param>
        public PlayerProfileTexturePropertyValue(long? timestamp = default(long?), string profileId = default(string), string profileName = default(string), bool? signatureRequired = false, PlayerTexture textures = default(PlayerTexture))
        {
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for PlayerProfileTexturePropertyValue and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
            // to ensure "profileId" is required (not null)
            if (profileId == null)
            {
                throw new InvalidDataException("profileId is a required property for PlayerProfileTexturePropertyValue and cannot be null");
            }
            else
            {
                this.ProfileId = profileId;
            }
            // to ensure "profileName" is required (not null)
            if (profileName == null)
            {
                throw new InvalidDataException("profileName is a required property for PlayerProfileTexturePropertyValue and cannot be null");
            }
            else
            {
                this.ProfileName = profileName;
            }
            // use default value if no "signatureRequired" provided
            if (signatureRequired == null)
            {
                this.SignatureRequired = false;
            }
            else
            {
                this.SignatureRequired = signatureRequired;
            }
            this.Textures = textures;
        }
        
        /// <summary>
        /// UNIX timestamp in milliseconds
        /// </summary>
        /// <value>UNIX timestamp in milliseconds</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public long? Timestamp { get; set; }

        /// <summary>
        /// The player UUID without hyphens
        /// </summary>
        /// <value>The player UUID without hyphens</value>
        [DataMember(Name="profileId", EmitDefaultValue=false)]
        public string ProfileId { get; set; }

        /// <summary>
        /// The player&#39;s name
        /// </summary>
        /// <value>The player&#39;s name</value>
        [DataMember(Name="profileName", EmitDefaultValue=false)]
        public string ProfileName { get; set; }

        /// <summary>
        /// Only present if unsigned was set to false in the request
        /// </summary>
        /// <value>Only present if unsigned was set to false in the request</value>
        [DataMember(Name="signatureRequired", EmitDefaultValue=false)]
        public bool? SignatureRequired { get; set; }

        /// <summary>
        /// Gets or Sets Textures
        /// </summary>
        [DataMember(Name="textures", EmitDefaultValue=false)]
        public PlayerTexture Textures { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlayerProfileTexturePropertyValue {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  ProfileId: ").Append(ProfileId).Append("\n");
            sb.Append("  ProfileName: ").Append(ProfileName).Append("\n");
            sb.Append("  SignatureRequired: ").Append(SignatureRequired).Append("\n");
            sb.Append("  Textures: ").Append(Textures).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlayerProfileTexturePropertyValue);
        }

        /// <summary>
        /// Returns true if PlayerProfileTexturePropertyValue instances are equal
        /// </summary>
        /// <param name="input">Instance of PlayerProfileTexturePropertyValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlayerProfileTexturePropertyValue input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.ProfileId == input.ProfileId ||
                    (this.ProfileId != null &&
                    this.ProfileId.Equals(input.ProfileId))
                ) && 
                (
                    this.ProfileName == input.ProfileName ||
                    (this.ProfileName != null &&
                    this.ProfileName.Equals(input.ProfileName))
                ) && 
                (
                    this.SignatureRequired == input.SignatureRequired ||
                    (this.SignatureRequired != null &&
                    this.SignatureRequired.Equals(input.SignatureRequired))
                ) && 
                (
                    this.Textures == input.Textures ||
                    (this.Textures != null &&
                    this.Textures.Equals(input.Textures))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.ProfileId != null)
                    hashCode = hashCode * 59 + this.ProfileId.GetHashCode();
                if (this.ProfileName != null)
                    hashCode = hashCode * 59 + this.ProfileName.GetHashCode();
                if (this.SignatureRequired != null)
                    hashCode = hashCode * 59 + this.SignatureRequired.GetHashCode();
                if (this.Textures != null)
                    hashCode = hashCode * 59 + this.Textures.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
