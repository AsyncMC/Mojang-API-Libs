/**
 * Mojang Session API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { PlayerProfile } from '../com.github.asyncmc.mojang.sessions.typescript.inversify.model/playerProfile';
import { SessionApiError } from '../com.github.asyncmc.mojang.sessions.typescript.inversify.model/sessionApiError';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class LoginService {
    private basePath: string = 'https://sessionserver.mojang.com';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Gets the player&#39;s game profile
     * This will return the player&#39;s username plus any additional information about them (e.g. skins). This has a much stricter rate limit: You can request the same profile once per minute, however you can send as many unique requests as you like.
     * @param strippedUuid The player UUID without hyphens
     * @param unsigned When set to false, the signature data are sent
     
     */
    public getPlayerProfile(strippedUuid: string, unsigned?: boolean, observe?: 'body', headers?: Headers): Observable<PlayerProfile>;
    public getPlayerProfile(strippedUuid: string, unsigned?: boolean, observe?: 'response', headers?: Headers): Observable<HttpResponse<PlayerProfile>>;
    public getPlayerProfile(strippedUuid: string, unsigned?: boolean, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!strippedUuid){
            throw new Error('Required parameter strippedUuid was null or undefined when calling getPlayerProfile.');
        }

        let queryParameters: string[] = [];
        if (unsigned !== undefined) {
            queryParameters.push("unsigned="+encodeURIComponent(String(unsigned)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<PlayerProfile>> = this.httpClient.get(`${this.basePath}/session/minecraft/profile/${encodeURIComponent(String(strippedUuid))}?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <PlayerProfile>(httpResponse.response));
        }
        return response;
    }

}
