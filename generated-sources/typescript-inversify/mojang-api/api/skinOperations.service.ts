/**
 * Mojang API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { SkinModel } from '../model/skinModel';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class SkinOperationsService {
    private basePath: string = 'https://api.mojang.com';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Changes the player skin by URL
     * This will set the skin for the selected profile, but Mojang&#39;s servers will fetch the skin from a URL. This will also work for legacy accounts.
     * @param strippedUuid The player UUID without hyphens
     * @param url The URL which Mojang servers will download and apply the skin
     * @param model 
     
     */
    public changePlayerSkin(strippedUuid: string, url: string, model?: SkinModel, observe?: 'body', headers?: Headers): Observable<any>;
    public changePlayerSkin(strippedUuid: string, url: string, model?: SkinModel, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public changePlayerSkin(strippedUuid: string, url: string, model?: SkinModel, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!strippedUuid){
            throw new Error('Required parameter strippedUuid was null or undefined when calling changePlayerSkin.');
        }

        if (!url){
            throw new Error('Required parameter url was null or undefined when calling changePlayerSkin.');
        }

        // authentication (PlayerAccessToken) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        let formData: FormData = new FormData();
        headers['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';
        if (model !== undefined) {
            formData.append('model', <any>model);
        }
        if (url !== undefined) {
            formData.append('url', <any>url);
        }

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/user/profile/${encodeURIComponent(String(strippedUuid))}/skin`, body, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }


    /**
     * Resets the player skin to default
     * 
     * @param strippedUuid The player UUID without hyphens
     
     */
    public resetPlayerSkin(strippedUuid: string, observe?: 'body', headers?: Headers): Observable<any>;
    public resetPlayerSkin(strippedUuid: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public resetPlayerSkin(strippedUuid: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!strippedUuid){
            throw new Error('Required parameter strippedUuid was null or undefined when calling resetPlayerSkin.');
        }

        // authentication (PlayerAccessToken) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/user/profile/${encodeURIComponent(String(strippedUuid))}/skin`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }


    /**
     * Changes the player skin by upload
     * This uploads a skin to Mojang&#39;s servers. It also sets the users skin. This works on legacy counts as well.
     * @param strippedUuid The player UUID without hyphens
     * @param file The skin image in PNG format
     * @param model 
     
     */
    public uploadPlayerSkin(strippedUuid: string, file: Blob, model?: SkinModel, observe?: 'body', headers?: Headers): Observable<any>;
    public uploadPlayerSkin(strippedUuid: string, file: Blob, model?: SkinModel, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public uploadPlayerSkin(strippedUuid: string, file: Blob, model?: SkinModel, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!strippedUuid){
            throw new Error('Required parameter strippedUuid was null or undefined when calling uploadPlayerSkin.');
        }

        if (!file){
            throw new Error('Required parameter file was null or undefined when calling uploadPlayerSkin.');
        }

        // authentication (PlayerAccessToken) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        let formData: FormData = new FormData();
        headers['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';
        if (model !== undefined) {
            formData.append('model', <any>model);
        }
        if (file !== undefined) {
            formData.append('file', <any>file);
        }

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/user/profile/${encodeURIComponent(String(strippedUuid))}/skin`, body, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <any>(httpResponse.response));
        }
        return response;
    }

}
