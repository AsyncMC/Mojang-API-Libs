/**
 * Mojang API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { CurrentPlayerIDs } from '../com.github.asyncmc.mojang.api.typescript.inversify.model/currentPlayerIDs';
import { NameChange } from '../com.github.asyncmc.mojang.api.typescript.inversify.model/nameChange';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class NameHistoryService {
    private basePath: string = 'https://api.mojang.com';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Find the current UUID of multiple players at once
     * Find the current players name, UUID, demo status and migration flag by the current players name. The \&quot;at\&quot; parameter is not supported. Players not found are not returned. If no players are found, an empty array is returned.
     * @param requestBody Array with the player names
     
     */
    public findUniqueIdsByName(requestBody: Array<string>, observe?: 'body', headers?: Headers): Observable<Array<CurrentPlayerIDs>>;
    public findUniqueIdsByName(requestBody: Array<string>, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<CurrentPlayerIDs>>>;
    public findUniqueIdsByName(requestBody: Array<string>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!requestBody){
            throw new Error('Required parameter requestBody was null or undefined when calling findUniqueIdsByName.');
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<Array<CurrentPlayerIDs>>> = this.httpClient.post(`${this.basePath}/profiles/minecraft`, requestBody , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<CurrentPlayerIDs>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Gets the full player&#39;s name history
     * 
     * @param strippedUuid The player UUID without hyphens
     
     */
    public getNameHistory(strippedUuid: string, observe?: 'body', headers?: Headers): Observable<Array<NameChange>>;
    public getNameHistory(strippedUuid: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<NameChange>>>;
    public getNameHistory(strippedUuid: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!strippedUuid){
            throw new Error('Required parameter strippedUuid was null or undefined when calling getNameHistory.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<NameChange>>> = this.httpClient.get(`${this.basePath}/user/profiles/${encodeURIComponent(String(strippedUuid))}/names`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <Array<NameChange>>(httpResponse.response));
        }
        return response;
    }


    /**
     * Find the UUID by name
     * Find the current player name, UUID, demo status and migration flag by the current player name or at a given time.
     * @param username The username in a given time, or in present if \&quot;at\&quot; is not sent
     * @param at Find the username in a given time, when 0 selects the original name however, it only works if the name was changed at least once, or if the account is legacy. The time is an UNIX timestamp (without milliseconds)
     
     */
    public getUniqueIdByName(username: string, at?: number, observe?: 'body', headers?: Headers): Observable<CurrentPlayerIDs>;
    public getUniqueIdByName(username: string, at?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<CurrentPlayerIDs>>;
    public getUniqueIdByName(username: string, at?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!username){
            throw new Error('Required parameter username was null or undefined when calling getUniqueIdByName.');
        }

        let queryParameters: string[] = [];
        if (at !== undefined) {
            queryParameters.push("at="+encodeURIComponent(String(at)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<CurrentPlayerIDs>> = this.httpClient.get(`${this.basePath}/users/profiles/minecraft/${encodeURIComponent(String(username))}?${queryParameters.join('&')}`, headers);
        if (observe == 'body') {
               return response.map(httpResponse => <CurrentPlayerIDs>(httpResponse.response));
        }
        return response;
    }

}
