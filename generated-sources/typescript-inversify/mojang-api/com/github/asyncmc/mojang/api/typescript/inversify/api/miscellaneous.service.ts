/**
 * Mojang API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2020-06-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration";
import { Headers } from "../Headers";
import HttpResponse from "../HttpResponse";

import { OrderStatisticsRequest } from '../com.github.asyncmc.mojang.api.typescript.inversify.model/orderStatisticsRequest';
import { OrderStatisticsResponse } from '../com.github.asyncmc.mojang.api.typescript.inversify.model/orderStatisticsResponse';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class MiscellaneousService {
    private basePath: string = 'https://api.mojang.com';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Get statistics on the sales of Minecraft.
     * 
     * @param orderStatisticsRequest The payload is a json list of options under the metricKeys key. You will receive a single object corresponding to the sum of sales of the requested type(s). You must request at least one type of sale. Below is the default list used by https://minecraft.net/en/stats/
     
     */
    public getOrdersStatistics(orderStatisticsRequest: OrderStatisticsRequest, observe?: 'body', headers?: Headers): Observable<OrderStatisticsResponse>;
    public getOrdersStatistics(orderStatisticsRequest: OrderStatisticsRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<OrderStatisticsResponse>>;
    public getOrdersStatistics(orderStatisticsRequest: OrderStatisticsRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!orderStatisticsRequest){
            throw new Error('Required parameter orderStatisticsRequest was null or undefined when calling getOrdersStatistics.');
        }

        // authentication (MojangStatisticsToken) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<OrderStatisticsResponse>> = this.httpClient.post(`${this.basePath}/orders/statistics`, orderStatisticsRequest , headers);
        if (observe == 'body') {
               return response.map(httpResponse => <OrderStatisticsResponse>(httpResponse.response));
        }
        return response;
    }

}
